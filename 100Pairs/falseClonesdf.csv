clone1,clone2
"    private void setNodekeyInJsonResponse(String service) throws Exception {
        String filename = this.baseDirectory + service + "".json"";
        Scanner s = new Scanner(new File(filename));
        PrintWriter fw = new PrintWriter(new File(filename + "".new""));
        while (s.hasNextLine()) {
            fw.println(s.nextLine().replaceAll(""NODEKEY"", this.key));
        }
        s.close();
        fw.close();
        (new File(filename + "".new"")).renameTo(new File(filename));
    }
","    public void transform(String style, String spec, OutputStream out) throws IOException {
        URL url = new URL(rootURL, spec);
        InputStream in = new PatchXMLSymbolsStream(new StripDoctypeStream(url.openStream()));
        transform(style, in, out);
        in.close();
    }
"
"    public static void printResponseHeaders(String address) {
        logger.info(""Address: "" + address);
        try {
            URL url = new URL(address);
            URLConnection conn = url.openConnection();
            for (int i = 0; ; i++) {
                String headerName = conn.getHeaderFieldKey(i);
                String headerValue = conn.getHeaderField(i);
                if (headerName == null && headerValue == null) {
                    break;
                }
                if (headerName == null) {
                    logger.info(headerValue);
                    continue;
                }
                logger.info(headerName + "" "" + headerValue);
            }
        } catch (Exception e) {
            logger.error(""Exception Message: "" + e.getMessage());
        }
    }
","    public static String getEncodedPassword(String buff) {
        if (buff == null) return null;
        String t = new String();
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(buff.getBytes());
            byte[] r = md.digest();
            for (int i = 0; i < r.length; i++) {
                t += toHexString(r[i]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return t;
    }
"
"    public void load(String fileName) {
        BufferedReader bufReader;
        loaded = false;
        vector.removeAllElements();
        try {
            if (fileName.startsWith(""http:"")) {
                URL url = new URL(fileName);
                bufReader = new BufferedReader(new InputStreamReader(url.openStream()));
            } else bufReader = new BufferedReader(new FileReader(fileName));
            String inputLine;
            while ((inputLine = bufReader.readLine()) != null) {
                if (listener != null) listener.handleLine(inputLine); else vector.add(inputLine);
            }
            bufReader.close();
            loaded = true;
        } catch (IOException e) {
            errorMsg = e.getMessage();
        }
    }
","    private static void copyFile(File sourceFile, File destFile) {
        try {
            if (!destFile.exists()) {
                destFile.createNewFile();
            }
            FileChannel source = null;
            FileChannel destination = null;
            try {
                source = new FileInputStream(sourceFile).getChannel();
                destination = new FileOutputStream(destFile).getChannel();
                destination.transferFrom(source, 0, source.size());
            } finally {
                if (source != null) {
                    source.close();
                }
                if (destination != null) {
                    destination.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
"
"    private MapProperties readProperties(URL url) {
        @SuppressWarnings(""unchecked"") MapProperties properties = new MapProperties(new LinkedHashMap());
        InputStream is = null;
        try {
            is = url.openStream();
            properties.load(is);
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        } finally {
            StreamUtils.close(is);
        }
        return properties;
    }
","    public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException {
        InputStream input = null;
        BufferedOutputStream bos = null;
        File tempUnit = null;
        try {
            URL url = null;
            int total = 0;
            try {
                url = new URL(urlStr);
                input = url.openStream();
                URLConnection urlConnection;
                urlConnection = url.openConnection();
                total = urlConnection.getContentLength();
            } catch (IOException e) {
                throw new UnitTransportException(String.format(""Can't get remote file [%s]."", urlStr), e);
            }
            String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1);
            tempUnit = null;
            try {
                if (StringUtils.isNotEmpty(unitName)) tempUnit = new File(CommonUtil.getTempDir(), unitName); else tempUnit = File.createTempFile(CommonUtil.getTempDir(), ""tempUnit"");
                File parent = tempUnit.getParentFile();
                FileUtils.forceMkdir(parent);
                if (!tempUnit.exists()) FileUtils.touch(tempUnit);
                bos = new BufferedOutputStream(new FileOutputStream(tempUnit));
            } catch (FileNotFoundException e) {
                throw new UnitTransportException(String.format(""Can't find temp file [%s]."", tempUnit.getAbsolutePath()), e);
            } catch (IOException e) {
                throw new UnitTransportException(String.format(""Can't create temp file [%s]."", tempUnit.getAbsolutePath()), e);
            } catch (DeployToolException e) {
                throw new UnitTransportException(String.format(""Error when create temp file [%s]."", tempUnit), e);
            }
            logger.info(String.format(""Use [%s] for http unit [%s]."", tempUnit.getAbsoluteFile(), urlStr));
            int size = -1;
            try {
                size = IOUtils.copy(input, bos);
                bos.flush();
            } catch (IOException e) {
                logger.info(String.format(""Error when download [%s] to [%s]."", urlStr, tempUnit));
            }
            if (size != total) throw new UnitTransportException(String.format(""The file size is not right when download http unit [%s]"", urlStr));
        } finally {
            if (input != null) IOUtils.closeQuietly(input);
            if (bos != null) IOUtils.closeQuietly(bos);
        }
        logger.info(String.format(""Download unit to [%s]."", tempUnit.getAbsolutePath()));
        return tempUnit.getAbsolutePath();
    }
"
"    protected void doRestoreOrganize() throws Exception {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet result = null;
        String strDelQuery = ""DELETE FROM "" + Common.ORGANIZE_TABLE;
        String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_B_TABLE + "" "" + ""WHERE version_no = ?"";
        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_TABLE + "" "" + ""(organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?)"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            try {
                con = dbo.getConnection();
                con.setAutoCommit(false);
                ps = con.prepareStatement(strDelQuery);
                ps.executeUpdate();
                ps = con.prepareStatement(strSelQuery);
                ps.setInt(1, this.versionNO);
                result = ps.executeQuery();
                ps = con.prepareStatement(strInsQuery);
                while (result.next()) {
                    ps.setString(1, result.getString(""organize_id""));
                    ps.setString(2, result.getString(""organize_type_id""));
                    ps.setString(3, result.getString(""organize_name""));
                    ps.setString(4, result.getString(""organize_manager""));
                    ps.setString(5, result.getString(""organize_describe""));
                    ps.setString(6, result.getString(""work_type""));
                    ps.setInt(7, result.getInt(""show_order""));
                    ps.setInt(8, result.getInt(""position_x""));
                    ps.setInt(9, result.getInt(""position_y""));
                    int resultCount = ps.executeUpdate();
                    if (resultCount != 1) {
                        con.rollback();
                        throw new CesSystemException(""Organize_backup.doRestoreOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE INSERT !! resultCount = "" + resultCount);
                    }
                }
                con.commit();
            } catch (SQLException se) {
                con.rollback();
                throw new CesSystemException(""Organize_backup.doRestoreOrganize(): SQLException:  "" + se);
            } finally {
                con.setAutoCommit(true);
                close(dbo, ps, result);
            }
        } catch (SQLException se) {
            throw new CesSystemException(""Organize_backup.doRestoreOrganize(): SQLException while committing or rollback"");
        }
    }
","    static String encodeEmailAsUserId(String email) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(email.toLowerCase().getBytes());
            StringBuilder builder = new StringBuilder();
            builder.append(""1"");
            for (byte b : md5.digest()) {
                builder.append(String.format(""%02d"", new Object[] { Integer.valueOf(b & 0xFF) }));
            }
            return builder.toString().substring(0, 20);
        } catch (NoSuchAlgorithmException ex) {
        }
        return """";
    }
"
"    public InlineImageChunk(URL url) {
        super();
        this.url = url;
        try {
            URLConnection urlConn = url.openConnection();
            urlConn.setReadTimeout(15000);
            ImageInputStream iis = ImageIO.createImageInputStream(urlConn.getInputStream());
            Iterator<ImageReader> readers = ImageIO.getImageReaders(iis);
            if (readers.hasNext()) {
                ImageReader reader = readers.next();
                reader.setInput(iis, true);
                this.width = reader.getWidth(0);
                this.ascent = reader.getHeight(0);
                this.descent = 0;
                reader.dispose();
            } else System.err.println(""cannot read width and height of image "" + url + "" - no suitable reader!"");
        } catch (Exception exc) {
            System.err.println(""cannot read width and height of image "" + url + "" due to exception:"");
            System.err.println(exc);
            exc.printStackTrace(System.err);
        }
    }
","        void execute(Connection conn, Component parent, String context, final ProgressMonitor progressMonitor, ProgressWrapper progressWrapper) throws Exception {
            int noOfComponents = m_components.length;
            Statement statement = null;
            StringBuffer pmNoteBuf = new StringBuffer(m_update ? ""Updating "" : ""Creating "");
            pmNoteBuf.append(m_itemNameAbbrev);
            pmNoteBuf.append("" "");
            pmNoteBuf.append(m_itemNameValue);
            final String pmNote = pmNoteBuf.toString();
            progressMonitor.setNote(pmNote);
            try {
                conn.setAutoCommit(false);
                int id = -1;
                if (m_update) {
                    statement = conn.createStatement();
                    String sql = getUpdateSql(noOfComponents, m_id);
                    statement.executeUpdate(sql);
                    id = m_id;
                    if (m_indexesChanged) deleteComponents(conn, id);
                } else {
                    PreparedStatement pStmt = getInsertPrepStmt(conn, noOfComponents);
                    pStmt.executeUpdate();
                    Integer res = DbCommon.getAutoGenId(parent, context, pStmt);
                    if (res == null) return;
                    id = res.intValue();
                }
                if (!m_update || m_indexesChanged) {
                    PreparedStatement insertCompPrepStmt = conn.prepareStatement(getInsertComponentPrepStmtSql());
                    for (int i = 0; i < noOfComponents; i++) {
                        createComponent(progressMonitor, m_components, pmNote, id, i, insertCompPrepStmt);
                    }
                }
                conn.commit();
                m_itemTable.getPrimaryId().setVal(m_item, id);
                m_itemCache.updateCache(m_item, id);
            } catch (SQLException ex) {
                try {
                    conn.rollback();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                throw ex;
            } finally {
                if (statement != null) {
                    statement.close();
                }
            }
        }
"
"    static synchronized Person lookup(PhoneNumber number, String siteName) {
        Vector<Person> foundPersons = new Vector<Person>(5);
        if (number.isFreeCall()) {
            Person p = new Person("""", ""FreeCall"");
            p.addNumber(number);
            foundPersons.add(p);
        } else if (number.isSIPNumber() || number.isQuickDial()) {
            Person p = new Person();
            p.addNumber(number);
            foundPersons.add(p);
        } else if (ReverseLookup.rlsMap.containsKey(number.getCountryCode())) {
            nummer = number.getAreaNumber();
            rls_list = ReverseLookup.rlsMap.get(number.getCountryCode());
            Debug.info(""Begin reverselookup for: "" + nummer);
            if (nummer.startsWith(number.getCountryCode())) nummer = nummer.substring(number.getCountryCode().length());
            city = """";
            for (int i = 0; i < rls_list.size(); i++) {
                yield();
                rls = rls_list.get(i);
                if (!siteName.equals("""") && !siteName.equals(rls.getName())) {
                    Debug.warning(""This lookup should be done using a specific site, skipping"");
                    continue;
                }
                prefix = rls.getPrefix();
                ac_length = rls.getAreaCodeLength();
                if (!nummer.startsWith(prefix)) nummer = prefix + nummer;
                urlstr = rls.getURL();
                if (urlstr.contains(""$AREACODE"")) {
                    urlstr = urlstr.replaceAll(""\\$AREACODE"", nummer.substring(prefix.length(), ac_length + prefix.length()));
                    urlstr = urlstr.replaceAll(""\\$NUMBER"", nummer.substring(prefix.length() + ac_length));
                } else if (urlstr.contains(""$PFXAREACODE"")) {
                    urlstr = urlstr.replaceAll(""\\$PFXAREACODE"", nummer.substring(0, prefix.length() + ac_length));
                    urlstr = urlstr.replaceAll(""\\$NUMBER"", nummer.substring(prefix.length() + ac_length));
                } else urlstr = urlstr.replaceAll(""\\$NUMBER"", nummer);
                Debug.info(""Reverse lookup using: "" + urlstr);
                url = null;
                data = new String[dataLength];
                try {
                    url = new URL(urlstr);
                    if (url != null) {
                        try {
                            con = url.openConnection();
                            con.setConnectTimeout(5000);
                            con.setReadTimeout(15000);
                            con.addRequestProperty(""User-Agent"", userAgent);
                            con.connect();
                            header = """";
                            charSet = """";
                            for (int j = 0; ; j++) {
                                String headerName = con.getHeaderFieldKey(j);
                                String headerValue = con.getHeaderField(j);
                                if (headerName == null && headerValue == null) {
                                    break;
                                }
                                if (""content-type"".equalsIgnoreCase(headerName)) {
                                    String[] split = headerValue.split("";"", 2);
                                    for (int k = 0; k < split.length; k++) {
                                        if (split[k].trim().toLowerCase().startsWith(""charset="")) {
                                            String[] charsetSplit = split[k].split(""="");
                                            charSet = charsetSplit[1].trim();
                                        }
                                    }
                                }
                                header += headerName + "": "" + headerValue + "" | "";
                            }
                            Debug.debug(""Header of "" + rls.getName() + "":"" + header);
                            Debug.debug(""CHARSET : "" + charSet);
                            BufferedReader d;
                            if (charSet.equals("""")) {
                                d = new BufferedReader(new InputStreamReader(con.getInputStream(), ""ISO-8859-1""));
                            } else {
                                d = new BufferedReader(new InputStreamReader(con.getInputStream(), charSet));
                            }
                            int lines = 0;
                            while (null != ((str = d.readLine()))) {
                                data[lines] = str;
                                yield();
                                if (lines >= dataLength) {
                                    System.err.println(""Result > "" + dataLength + "" Lines"");
                                    break;
                                }
                                lines++;
                            }
                            d.close();
                            Debug.info(""Begin processing response from "" + rls.getName());
                            for (int j = 0; j < rls.size(); j++) {
                                yield();
                                firstname = """";
                                lastname = """";
                                company = """";
                                street = """";
                                zipcode = """";
                                city = """";
                                Person p = null;
                                patterns = rls.getEntry(j);
                                Pattern namePattern = null;
                                Pattern streetPattern = null;
                                Pattern cityPattern = null;
                                Pattern zipcodePattern = null;
                                Pattern firstnamePattern = null;
                                Pattern lastnamePattern = null;
                                Matcher nameMatcher = null;
                                Matcher streetMatcher = null;
                                Matcher cityMatcher = null;
                                Matcher zipcodeMatcher = null;
                                Matcher firstnameMatcher = null;
                                Matcher lastnameMatcher = null;
                                if (!patterns[ReverseLookupSite.NAME].equals("""") && (patterns[ReverseLookupSite.FIRSTNAME].equals("""") && patterns[ReverseLookupSite.LASTNAME].equals(""""))) {
                                    namePattern = Pattern.compile(patterns[ReverseLookupSite.NAME]);
                                }
                                if (!patterns[ReverseLookupSite.STREET].equals("""")) {
                                    streetPattern = Pattern.compile(patterns[ReverseLookupSite.STREET]);
                                }
                                if (!patterns[ReverseLookupSite.CITY].equals("""")) {
                                    cityPattern = Pattern.compile(patterns[ReverseLookupSite.CITY]);
                                }
                                if (!patterns[ReverseLookupSite.ZIPCODE].equals("""")) {
                                    zipcodePattern = Pattern.compile(patterns[ReverseLookupSite.ZIPCODE]);
                                }
                                if (!patterns[ReverseLookupSite.FIRSTNAME].equals("""")) {
                                    firstnamePattern = Pattern.compile(patterns[ReverseLookupSite.FIRSTNAME]);
                                }
                                if (!patterns[ReverseLookupSite.LASTNAME].equals("""")) {
                                    lastnamePattern = Pattern.compile(patterns[ReverseLookupSite.LASTNAME]);
                                }
                                for (int line = 0; line < dataLength; line++) {
                                    if (data[line] != null) {
                                        int spaceAlternative = 160;
                                        data[line] = data[line].replaceAll(new Character((char) spaceAlternative).toString(), "" "");
                                        if (lastnamePattern != null) {
                                            lastnameMatcher = lastnamePattern.matcher(data[line]);
                                            if (lastnameMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= lastnameMatcher.groupCount(); k++) {
                                                    if (lastnameMatcher.group(k) != null) str = str + lastnameMatcher.group(k).trim() + "" "";
                                                }
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(str));
                                                lastname = lastname.trim();
                                                lastname = lastname.replaceAll("","", """");
                                                lastname = lastname.replaceAll(""%20"", "" "");
                                                lastname = JFritzUtils.replaceSpecialCharsUTF(lastname);
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(lastname));
                                                lastname = JFritzUtils.removeDuplicateWhitespace(lastname);
                                                if (""lastname"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setLastName(lastname);
                                                }
                                            }
                                        }
                                        yield();
                                        if (firstnamePattern != null) {
                                            firstnameMatcher = firstnamePattern.matcher(data[line]);
                                            if (firstnameMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= firstnameMatcher.groupCount(); k++) {
                                                    if (firstnameMatcher.group(k) != null) str = str + firstnameMatcher.group(k).trim() + "" "";
                                                }
                                                firstname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(str));
                                                firstname = firstname.trim();
                                                firstname = firstname.replaceAll("","", """");
                                                firstname = firstname.replaceAll(""%20"", "" "");
                                                firstname = JFritzUtils.replaceSpecialCharsUTF(firstname);
                                                firstname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(firstname));
                                                firstname = JFritzUtils.removeDuplicateWhitespace(firstname);
                                                if (""firstname"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setFirstName(firstname);
                                                }
                                            }
                                        }
                                        yield();
                                        if (namePattern != null) {
                                            nameMatcher = namePattern.matcher(data[line]);
                                            if (nameMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= nameMatcher.groupCount(); k++) {
                                                    if (nameMatcher.group(k) != null) str = str + nameMatcher.group(k).trim() + "" "";
                                                }
                                                String[] split;
                                                split = str.split("" "", 2);
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(split[0]));
                                                lastname = lastname.trim();
                                                lastname = lastname.replaceAll("","", """");
                                                lastname = lastname.replaceAll(""%20"", "" "");
                                                lastname = JFritzUtils.replaceSpecialCharsUTF(lastname);
                                                lastname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(lastname));
                                                lastname = JFritzUtils.removeDuplicateWhitespace(lastname);
                                                if (split[1].length() > 0) {
                                                    firstname = HTMLUtil.stripEntities(split[1]);
                                                    if ((firstname.indexOf(""  "") > -1) && (firstname.indexOf(""  u."") == -1)) {
                                                        company = JFritzUtils.removeLeadingSpaces(firstname.substring(firstname.indexOf(""  "")).trim());
                                                        firstname = JFritzUtils.removeLeadingSpaces(firstname.substring(0, firstname.indexOf(""  "")).trim());
                                                    } else {
                                                        firstname = JFritzUtils.removeLeadingSpaces(firstname.replaceAll(""  u. "", "" und ""));
                                                    }
                                                }
                                                firstname = firstname.replaceAll(""%20"", "" "");
                                                firstname = JFritzUtils.replaceSpecialCharsUTF(firstname);
                                                firstname = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(firstname));
                                                firstname = JFritzUtils.removeDuplicateWhitespace(firstname);
                                                firstname = firstname.trim();
                                                company = company.replaceAll(""%20"", "" "");
                                                company = JFritzUtils.replaceSpecialCharsUTF(company);
                                                company = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(company));
                                                company = JFritzUtils.removeDuplicateWhitespace(company);
                                                company = company.trim();
                                                if (""name"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    if (company.length() > 0) {
                                                        p.addNumber(number.getIntNumber(), ""business"");
                                                    } else {
                                                        p.addNumber(number.getIntNumber(), ""home"");
                                                    }
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setFirstName(firstname);
                                                    p.setLastName(lastname);
                                                    p.setCompany(company);
                                                }
                                            }
                                        }
                                        yield();
                                        if (streetPattern != null) {
                                            streetMatcher = streetPattern.matcher(data[line]);
                                            if (streetMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= streetMatcher.groupCount(); k++) {
                                                    if (streetMatcher.group(k) != null) str = str + streetMatcher.group(k).trim() + "" "";
                                                }
                                                street = str.replaceAll(""%20"", "" "");
                                                street = JFritzUtils.replaceSpecialCharsUTF(street);
                                                street = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(street));
                                                street = JFritzUtils.removeDuplicateWhitespace(street);
                                                street = street.trim();
                                                if (""street"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setStreet(street);
                                                }
                                            }
                                        }
                                        yield();
                                        if (cityPattern != null) {
                                            cityMatcher = cityPattern.matcher(data[line]);
                                            if (cityMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= cityMatcher.groupCount(); k++) {
                                                    if (cityMatcher.group(k) != null) str = str + cityMatcher.group(k).trim() + "" "";
                                                }
                                                city = str.replaceAll(""%20"", "" "");
                                                city = JFritzUtils.replaceSpecialCharsUTF(city);
                                                city = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(city));
                                                city = JFritzUtils.removeDuplicateWhitespace(city);
                                                city = city.trim();
                                                if (""city"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setCity(city);
                                                }
                                            }
                                        }
                                        yield();
                                        if (zipcodePattern != null) {
                                            zipcodeMatcher = zipcodePattern.matcher(data[line]);
                                            if (zipcodeMatcher.find()) {
                                                str = """";
                                                for (int k = 1; k <= zipcodeMatcher.groupCount(); k++) {
                                                    if (zipcodeMatcher.group(k) != null) str = str + zipcodeMatcher.group(k).trim() + "" "";
                                                }
                                                zipcode = str.replaceAll(""%20"", "" "");
                                                zipcode = JFritzUtils.replaceSpecialCharsUTF(zipcode);
                                                zipcode = JFritzUtils.removeLeadingSpaces(HTMLUtil.stripEntities(zipcode));
                                                zipcode = JFritzUtils.removeDuplicateWhitespace(zipcode);
                                                zipcode = zipcode.trim();
                                                if (""zipcode"".equals(patterns[ReverseLookupSite.FIRSTOCCURANCE])) {
                                                    p = new Person();
                                                    p.addNumber(number.getIntNumber(), ""home"");
                                                    foundPersons.add(p);
                                                }
                                                if (p != null) {
                                                    p.setPostalCode(zipcode);
                                                }
                                            }
                                        }
                                    }
                                }
                                if (!firstname.equals("""") || !lastname.equals("""") || !company.equals("""")) break;
                            }
                            yield();
                            if (!firstname.equals("""") || !lastname.equals("""") || !company.equals("""")) {
                                if (city.equals("""")) {
                                    if (number.getCountryCode().equals(ReverseLookup.GERMANY_CODE)) city = ReverseLookupGermany.getCity(nummer); else if (number.getCountryCode().equals(ReverseLookup.AUSTRIA_CODE)) city = ReverseLookupAustria.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.USA_CODE)) city = ReverseLookupUnitedStates.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.TURKEY_CODE)) city = ReverseLookupTurkey.getCity(nummer);
                                }
                                return foundPersons.get(0);
                            }
                        } catch (IOException e1) {
                            Debug.error(""Error while retrieving "" + urlstr);
                        }
                    }
                } catch (MalformedURLException e) {
                    Debug.error(""URL invalid: "" + urlstr);
                }
            }
            yield();
            Debug.warning(""No match for "" + nummer + "" found"");
            if (city.equals("""")) {
                if (number.getCountryCode().equals(ReverseLookup.GERMANY_CODE)) city = ReverseLookupGermany.getCity(nummer); else if (number.getCountryCode().equals(ReverseLookup.AUSTRIA_CODE)) city = ReverseLookupAustria.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.USA_CODE)) city = ReverseLookupUnitedStates.getCity(nummer); else if (number.getCountryCode().startsWith(ReverseLookup.TURKEY_CODE)) city = ReverseLookupTurkey.getCity(nummer);
            }
            Person p = new Person("""", """", """", """", """", city, """", """");
            p.addNumber(number.getAreaNumber(), ""home"");
            return p;
        } else {
            Debug.warning(""No reverse lookup sites for: "" + number.getCountryCode());
            Person p = new Person();
            p.addNumber(number.getAreaNumber(), ""home"");
            if (number.getCountryCode().equals(ReverseLookup.GERMANY_CODE)) city = ReverseLookupGermany.getCity(number.getIntNumber()); else if (number.getCountryCode().equals(ReverseLookup.AUSTRIA_CODE)) city = ReverseLookupAustria.getCity(number.getIntNumber()); else if (number.getCountryCode().startsWith(ReverseLookup.USA_CODE)) city = ReverseLookupUnitedStates.getCity(number.getIntNumber()); else if (number.getCountryCode().startsWith(ReverseLookup.TURKEY_CODE)) city = ReverseLookupTurkey.getCity(number.getIntNumber());
            p.setCity(city);
            return p;
        }
        return new Person(""not found"", ""Person"");
    }
","    private void copyFile(File sourceFile, File destFile) throws IOException {
        if (!sourceFile.exists()) {
            return;
        }
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        source = new FileInputStream(sourceFile).getChannel();
        destination = new FileOutputStream(destFile).getChannel();
        if (destination != null && source != null) {
            destination.transferFrom(source, 0, source.size());
        }
        if (source != null) {
            source.close();
        }
        if (destination != null) {
            destination.close();
        }
    }
"
"    @Override
    public void vote(String urlString, Map<String, String> headData, Map<String, String> paramData) {
        HttpURLConnection httpConn = null;
        try {
            URL url = new URL(urlString);
            httpConn = (HttpURLConnection) url.openConnection();
            String cookies = getCookies(httpConn);
            System.out.println(cookies);
            BufferedReader post = new BufferedReader(new InputStreamReader(httpConn.getInputStream(), ""GB2312""));
            String text = null;
            while ((text = post.readLine()) != null) {
                System.out.println(text);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
            throw new VoteBeanException(""网址不正确"", e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new VoteBeanException(""不能打开网址"", e);
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
"
"    public void checkin(Object _document) {
        this.document = (Document) _document;
        synchronized (url) {
            OutputStream outputStream = null;
            try {
                if (""file"".equals(url.getProtocol())) {
                    outputStream = new FileOutputStream(url.getFile());
                } else {
                    URLConnection connection = url.openConnection();
                    connection.setDoOutput(true);
                    outputStream = connection.getOutputStream();
                }
                new XMLOutputter(""  "", true).output(this.document, outputStream);
                outputStream.flush();
                outputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    public static void extractFile(String jarArchive, String fileToExtract, String destination) {
        FileWriter writer = null;
        ZipInputStream zipStream = null;
        try {
            FileInputStream inputStream = new FileInputStream(jarArchive);
            BufferedInputStream bufferedStream = new BufferedInputStream(inputStream);
            zipStream = new ZipInputStream(bufferedStream);
            writer = new FileWriter(new File(destination));
            ZipEntry zipEntry = null;
            while ((zipEntry = zipStream.getNextEntry()) != null) {
                if (zipEntry.getName().equals(fileToExtract)) {
                    int size = (int) zipEntry.getSize();
                    for (int i = 0; i < size; i++) {
                        writer.write(zipStream.read());
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (zipStream != null) try {
                zipStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (writer != null) try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
"
"    public void testPreparedStatement0009() throws Exception {
        Statement stmt = con.createStatement();
        stmt.executeUpdate(""create table #t0009 "" + ""  (i  integer  not null,      "" + ""   s  char(10) not null)      "");
        con.setAutoCommit(false);
        PreparedStatement pstmt = con.prepareStatement(""insert into #t0009 values (?, ?)"");
        int rowsToAdd = 8;
        final String theString = ""abcdefghijklmnopqrstuvwxyz"";
        int count = 0;
        for (int i = 1; i <= rowsToAdd; i++) {
            pstmt.setInt(1, i);
            pstmt.setString(2, theString.substring(0, i));
            count += pstmt.executeUpdate();
        }
        pstmt.close();
        assertEquals(count, rowsToAdd);
        con.rollback();
        ResultSet rs = stmt.executeQuery(""select s, i from #t0009"");
        assertNotNull(rs);
        count = 0;
        while (rs.next()) {
            count++;
            assertEquals(rs.getString(1).trim().length(), rs.getInt(2));
        }
        assertEquals(count, 0);
        con.commit();
        pstmt = con.prepareStatement(""insert into #t0009 values (?, ?)"");
        rowsToAdd = 6;
        count = 0;
        for (int i = 1; i <= rowsToAdd; i++) {
            pstmt.setInt(1, i);
            pstmt.setString(2, theString.substring(0, i));
            count += pstmt.executeUpdate();
        }
        assertEquals(count, rowsToAdd);
        con.commit();
        pstmt.close();
        rs = stmt.executeQuery(""select s, i from #t0009"");
        count = 0;
        while (rs.next()) {
            count++;
            assertEquals(rs.getString(1).trim().length(), rs.getInt(2));
        }
        assertEquals(count, rowsToAdd);
        con.commit();
        stmt.close();
        con.setAutoCommit(true);
    }
","    @SuppressWarnings(""unchecked"")
    protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception {
        File transformationFile = new File(xslBase, ""file-info.xsl"");
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.putAll(request.getParameterMap());
        params.put(""{"" + Definitions.CONFIGURATION_NAMESPACE + ""}configuration"", configuration);
        params.put(""{"" + Definitions.REQUEST_NAMESPACE + ""}request"", request);
        params.put(""{"" + Definitions.RESPONSE_NAMESPACE + ""}response"", response);
        params.put(""{"" + Definitions.SESSION_NAMESPACE + ""}session"", request.getSession());
        params.put(""{"" + Definitions.INFOFUZE_NAMESPACE + ""}development-mode"", new Boolean(Config.getInstance().isDevelopmentMode()));
        Transformer transformer = new Transformer();
        transformer.setTransformationFile(transformationFile);
        transformer.setParams(params);
        transformer.setTransformMode(TransformMode.NORMAL);
        transformer.setConfiguration(configuration);
        transformer.setErrorListener(new TransformationErrorListener(response));
        transformer.setLogInfo(false);
        DataSourceIf dataSource = new NullSource();
        Document fileInfoDoc = XmlUtils.getEmptyDOM();
        DOMResult result = new DOMResult(fileInfoDoc);
        transformer.transform((Source) dataSource, result);
        Element documentElement = fileInfoDoc.getDocumentElement();
        if (documentElement.getLocalName().equals(""null"")) {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }
        InputStream is = null;
        try {
            XPath xpath = XPathFactory.newInstance().newXPath();
            String sourceType = XPathUtils.getStringValue(xpath, ""source-type"", documentElement, null);
            String location = XPathUtils.getStringValue(xpath, ""location"", documentElement, null);
            String fileName = XPathUtils.getStringValue(xpath, ""file-name"", documentElement, null);
            String mimeType = XPathUtils.getStringValue(xpath, ""mime-type"", documentElement, null);
            String encoding = XPathUtils.getStringValue(xpath, ""encoding"", documentElement, null);
            if (StringUtils.equals(sourceType, ""cifsSource"")) {
                String domain = XPathUtils.getStringValue(xpath, ""domain"", documentElement, null);
                String userName = XPathUtils.getStringValue(xpath, ""username"", documentElement, null);
                String password = XPathUtils.getStringValue(xpath, ""password"", documentElement, null);
                URI uri = new URI(location);
                if (StringUtils.isNotBlank(userName)) {
                    String userInfo = """";
                    if (StringUtils.isNotBlank(domain)) {
                        userInfo = userInfo + domain + "";"";
                    }
                    userInfo = userInfo + userName;
                    if (StringUtils.isNotBlank(password)) {
                        userInfo = userInfo + "":"" + password;
                    }
                    uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment());
                }
                SmbFile smbFile = new SmbFile(uri.toURL());
                is = new SmbFileInputStream(smbFile);
            } else if (StringUtils.equals(sourceType, ""localFileSystemSource"")) {
                File file = new File(location);
                is = new FileInputStream(file);
            } else {
                logger.error(""Source type \"""" + ((sourceType != null) ? sourceType : """") + ""\"" not supported"");
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                return;
            }
            if (StringUtils.isBlank(mimeType) && StringUtils.isBlank(encoding)) {
                response.setContentType(Definitions.MIMETYPE_BINARY);
            } else if (StringUtils.isBlank(encoding)) {
                response.setContentType(mimeType);
            } else {
                response.setContentType(mimeType + "";charset="" + encoding);
            }
            if (request.getParameterMap().containsKey(Definitions.REQUEST_PARAMNAME_DOWNLOAD)) {
                response.setHeader(""Content-Disposition"", ""attachment; filename="" + fileName);
            }
            IOUtils.copy(new BufferedInputStream(is), response.getOutputStream());
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
"
"    @RequestMapping(value = ""/privatefiles/{file_name}"")
    public void getFile(@PathVariable(""file_name"") String fileName, HttpServletResponse response, Principal principal) {
        try {
            Boolean validUser = false;
            final String currentUser = principal.getName();
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            if (!auth.getPrincipal().equals(new String(""anonymousUser""))) {
                MetabolightsUser metabolightsUser = (MetabolightsUser) auth.getPrincipal();
                if (metabolightsUser != null && metabolightsUser.isCurator()) validUser = true;
            }
            if (currentUser != null) {
                Study study = studyService.getBiiStudy(fileName, true);
                Collection<User> users = study.getUsers();
                Iterator<User> iter = users.iterator();
                while (iter.hasNext()) {
                    User user = iter.next();
                    if (user.getUserName().equals(currentUser)) {
                        validUser = true;
                        break;
                    }
                }
            }
            if (!validUser) throw new RuntimeException(PropertyLookup.getMessage(""Entry.notAuthorised""));
            try {
                InputStream is = new FileInputStream(privateFtpDirectory + fileName + "".zip"");
                response.setContentType(""application/zip"");
                IOUtils.copy(is, response.getOutputStream());
            } catch (Exception e) {
                throw new RuntimeException(PropertyLookup.getMessage(""Entry.fileMissing""));
            }
            response.flushBuffer();
        } catch (IOException ex) {
            logger.info(""Error writing file to output stream. Filename was '"" + fileName + ""'"");
            throw new RuntimeException(""IOError writing file to output stream"");
        }
    }
","    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReader.getAudioInputStream(URL): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        URLConnection conn = url.openConnection();
        boolean isShout = false;
        int toRead = 4;
        byte[] head = new byte[toRead];
        conn.setRequestProperty(""Icy-Metadata"", ""1"");
        BufferedInputStream bInputStream = new BufferedInputStream(conn.getInputStream());
        bInputStream.mark(toRead);
        int read = bInputStream.read(head, 0, toRead);
        if ((read > 2) && (((head[0] == 'I') | (head[0] == 'i')) && ((head[1] == 'C') | (head[1] == 'c')) && ((head[2] == 'Y') | (head[2] == 'y')))) isShout = true;
        bInputStream.reset();
        InputStream inputStream = null;
        if (isShout == true) {
            IcyInputStream icyStream = new IcyInputStream(bInputStream);
            icyStream.addTagParseListener(IcyListener.getInstance());
            inputStream = icyStream;
        } else {
            String metaint = conn.getHeaderField(""icy-metaint"");
            if (metaint != null) {
                IcyInputStream icyStream = new IcyInputStream(bInputStream, metaint);
                icyStream.addTagParseListener(IcyListener.getInstance());
                inputStream = icyStream;
            } else {
                inputStream = bInputStream;
            }
        }
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReader.getAudioInputStream(URL): end"");
        }
        return audioInputStream;
    }
"
"    public void googleImageSearch(String start) {
        try {
            String u = ""http://images.google.com/images?q="" + custom + start;
            if (u.contains("" "")) {
                u = u.replace("" "", ""+"");
            }
            URL url = new URL(u);
            HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
            httpcon.addRequestProperty(""User-Agent"", ""Mozilla/4.76"");
            BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));
            googleImages.clear();
            String text = """";
            String lin = """";
            while ((lin = readIn.readLine()) != null) {
                text += lin;
            }
            readIn.close();
            if (text.contains(""\n"")) {
                text = text.replace(""\n"", """");
            }
            String[] array = text.split(""\\Qhref=\""/imgres?imgurl=\\E"");
            for (String s : array) {
                if (s.startsWith(""http://"") || s.startsWith(""https://"") && s.contains(""&amp;"")) {
                    String s1 = s.substring(0, s.indexOf(""&amp;""));
                    googleImages.add(s1);
                }
            }
        } catch (Exception ex4) {
            MusicBoxView.showErrorDialog(ex4);
        }
        jButton4.setEnabled(true);
        jButton2.setEnabled(true);
        getContentPane().remove(jLabel1);
        ImageIcon icon;
        try {
            icon = new ImageIcon(new URL(googleImages.elementAt(googleImageLocation)));
            int h = icon.getIconHeight();
            int w = icon.getIconWidth();
            jLabel1.setSize(w, h);
            jLabel1.setIcon(icon);
            add(jLabel1, BorderLayout.CENTER);
        } catch (MalformedURLException ex) {
            MusicBoxView.showErrorDialog(ex);
            jLabel1.setIcon(MusicBoxView.noImage);
        }
        add(jPanel1, BorderLayout.PAGE_END);
        pack();
    }
","    @Override
    public int updateStatus(UserInfo userInfo, String status) throws Exception {
        OAuthConsumer consumer = SnsConstant.getOAuthConsumer(SnsConstant.SOHU);
        consumer.setTokenWithSecret(userInfo.getAccessToken(), userInfo.getAccessSecret());
        try {
            URL url = new URL(SnsConstant.SOHU_UPDATE_STATUS_URL);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            request.setDoOutput(true);
            request.setRequestMethod(""POST"");
            HttpParameters para = new HttpParameters();
            para.put(""status"", StringUtils.utf8Encode(status).replaceAll(""\\+"", ""%20""));
            consumer.setAdditionalParameters(para);
            consumer.sign(request);
            OutputStream ot = request.getOutputStream();
            ot.write((""status="" + URLEncoder.encode(status, ""utf-8"")).replaceAll(""\\+"", ""%20"").getBytes());
            ot.flush();
            ot.close();
            System.out.println(""Sending request..."");
            request.connect();
            System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
            BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
            String b = null;
            while ((b = reader.readLine()) != null) {
                System.out.println(b);
            }
            return SnsConstant.SOHU_UPDATE_STATUS_SUCC_WHAT;
        } catch (Exception e) {
            SnsConstant.SOHU_OPERATOR_FAIL_REASON = processException(e.getMessage());
            return SnsConstant.SOHU_UPDATE_STATUS_FAIL_WHAT;
        }
    }
"
"    public void copyToZip(ZipOutputStream zout, String entryName) throws IOException {
        close();
        ZipEntry entry = new ZipEntry(entryName);
        zout.putNextEntry(entry);
        if (!isEmpty() && this.tmpFile.exists()) {
            InputStream in = new FileInputStream(this.tmpFile);
            IOUtils.copyTo(in, zout);
            in.close();
        }
        zout.flush();
        zout.closeEntry();
        delete();
    }
","    private List<String> getTaxaList() {
        List<String> taxa = new Vector<String>();
        String domain = m_domain.getStringValue();
        String id = """";
        if (domain.equalsIgnoreCase(""Eukaryota"")) id = ""eukaryota"";
        try {
            URL url = new URL(""http://www.ebi.ac.uk/genomes/"" + id + "".details.txt"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String link = """";
            String key = """";
            String name = """";
            int counter = 0;
            String line = """";
            reader.readLine();
            while ((line = reader.readLine()) != null) {
                String[] st = line.split(""\t"");
                ena_details ena = new ena_details(st[0], st[1], st[2], st[3], st[4]);
                ENADataHolder.instance().put(ena.desc, ena);
                taxa.add(ena.desc);
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return taxa;
    }
"
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    protected String contentString() {
        String result = null;
        URL url;
        String encoding = null;
        try {
            url = url();
            URLConnection connection = url.openConnection();
            connection.setDoInput(true);
            connection.setDoOutput(false);
            connection.setUseCaches(false);
            for (Enumeration e = bindingKeys().objectEnumerator(); e.hasMoreElements(); ) {
                String key = (String) e.nextElement();
                if (key.startsWith(""?"")) {
                    connection.setRequestProperty(key.substring(1), valueForBinding(key).toString());
                }
            }
            if (connection.getContentEncoding() != null) {
                encoding = connection.getContentEncoding();
            }
            if (encoding == null) {
                encoding = (String) valueForBinding(""encoding"");
            }
            if (encoding == null) {
                encoding = ""UTF-8"";
            }
            InputStream stream = connection.getInputStream();
            byte bytes[] = ERXFileUtilities.bytesFromInputStream(stream);
            stream.close();
            result = new String(bytes, encoding);
        } catch (IOException ex) {
            throw NSForwardException._runtimeExceptionForThrowable(ex);
        }
        return result;
    }
"
"    private int writeTraceFile(final File destination_file, final String trace_file_name, final String trace_file_path) {
        URL url = null;
        BufferedInputStream is = null;
        FileOutputStream fo = null;
        BufferedOutputStream os = null;
        int b = 0;
        if (destination_file == null) {
            return 0;
        }
        try {
            url = new URL(""http://"" + trace_file_path + ""/"" + trace_file_name);
            is = new BufferedInputStream(url.openStream());
            fo = new FileOutputStream(destination_file);
            os = new BufferedOutputStream(fo);
            while ((b = is.read()) != -1) {
                os.write(b);
            }
            os.flush();
            is.close();
            os.close();
        } catch (Exception e) {
            System.err.println(url.toString());
            Utilities.unexpectedException(e, this, CONTACT);
            return 0;
        }
        return 1;
    }
","    public void readData() throws IOException {
        i = 0;
        j = 0;
        URL url = getClass().getResource(""resources/tuneGridMaster.dat"");
        InputStream is = url.openStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        s = br.readLine();
        StringTokenizer st = new StringTokenizer(s);
        tune_x[i][j] = Double.parseDouble(st.nextToken());
        gridmin = tune_x[i][j];
        temp_prev = tune_x[i][j];
        tune_y[i][j] = Double.parseDouble(st.nextToken());
        kd[i][j] = Double.parseDouble(st.nextToken());
        kfs[i][j] = Double.parseDouble(st.nextToken());
        kfl[i][j] = Double.parseDouble(st.nextToken());
        kdee[i][j] = Double.parseDouble(st.nextToken());
        kdc[i][j] = Double.parseDouble(st.nextToken());
        kfc[i][j] = Double.parseDouble(st.nextToken());
        j++;
        int k = 0;
        while ((s = br.readLine()) != null) {
            st = new StringTokenizer(s);
            temp_new = Double.parseDouble(st.nextToken());
            if (temp_new != temp_prev) {
                temp_prev = temp_new;
                i++;
                j = 0;
            }
            tune_x[i][j] = temp_new;
            tune_y[i][j] = Double.parseDouble(st.nextToken());
            kd[i][j] = Double.parseDouble(st.nextToken());
            kfs[i][j] = Double.parseDouble(st.nextToken());
            kfl[i][j] = Double.parseDouble(st.nextToken());
            kdee[i][j] = Double.parseDouble(st.nextToken());
            kdc[i][j] = Double.parseDouble(st.nextToken());
            kfc[i][j] = Double.parseDouble(st.nextToken());
            imax = i;
            jmax = j;
            j++;
            k++;
        }
        gridmax = tune_x[i][j - 1];
    }
"
"        public IStatus runInUIThread(IProgressMonitor monitor) {
            monitor.beginTask(Strings.MSG_CONNECT_SERVER, 3);
            InputStream in = null;
            try {
                URL url = createOpenUrl(resource, pref);
                if (url != null) {
                    URLConnection con = url.openConnection();
                    monitor.worked(1);
                    monitor.setTaskName(Strings.MSG_WAIT_FOR_SERVER);
                    con.connect();
                    in = con.getInputStream();
                    in.read();
                    monitor.worked(1);
                    monitor.setTaskName(NLS.bind(Strings.MSG_OPEN_URL, url));
                    open(url, resource.getProject(), pref);
                    monitor.worked(1);
                }
            } catch (ConnectException con) {
                if (count < 3) {
                    ConnectAndOpenJob job = new ConnectAndOpenJob(resource, pref, ++count);
                    job.schedule(1000L);
                } else {
                    Activator.log(con);
                }
            } catch (Exception e) {
                Activator.log(e);
            } finally {
                Streams.close(in);
                monitor.done();
            }
            return Status.OK_STATUS;
        }
","    private InputStream loadSource(String url) throws ClientProtocolException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        httpclient.getParams().setParameter(HTTP.USER_AGENT, ""Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 6.0)"");
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();
        return entity.getContent();
    }
"
"        private String generateUniqueIdMD5(String workgroupIdString, String runIdString) {
            String passwordUnhashed = workgroupIdString + ""-"" + runIdString;
            MessageDigest m = null;
            try {
                m = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
            m.update(passwordUnhashed.getBytes(), 0, passwordUnhashed.length());
            String uniqueIdMD5 = new BigInteger(1, m.digest()).toString(16);
            return uniqueIdMD5;
        }
","    public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException {
        if (username == null) username = ""anonymous"".toCharArray();
        if (password == null) password = ""anonymous"".toCharArray();
        try {
            final FTPClient client = new FTPClient();
            String key = FtpFileSystemConfigBuilder.getInstance().getEntryParser(fileSystemOptions);
            if (key != null) {
                FTPClientConfig config = new FTPClientConfig(key);
                String serverLanguageCode = FtpFileSystemConfigBuilder.getInstance().getServerLanguageCode(fileSystemOptions);
                if (serverLanguageCode != null) config.setServerLanguageCode(serverLanguageCode);
                String defaultDateFormat = FtpFileSystemConfigBuilder.getInstance().getDefaultDateFormat(fileSystemOptions);
                if (defaultDateFormat != null) config.setDefaultDateFormatStr(defaultDateFormat);
                String recentDateFormat = FtpFileSystemConfigBuilder.getInstance().getRecentDateFormat(fileSystemOptions);
                if (recentDateFormat != null) config.setRecentDateFormatStr(recentDateFormat);
                String serverTimeZoneId = FtpFileSystemConfigBuilder.getInstance().getServerTimeZoneId(fileSystemOptions);
                if (serverTimeZoneId != null) config.setServerTimeZoneId(serverTimeZoneId);
                String[] shortMonthNames = FtpFileSystemConfigBuilder.getInstance().getShortMonthNames(fileSystemOptions);
                if (shortMonthNames != null) {
                    StringBuffer shortMonthNamesStr = new StringBuffer(40);
                    for (int i = 0; i < shortMonthNames.length; i++) {
                        if (shortMonthNamesStr.length() > 0) shortMonthNamesStr.append(""|"");
                        shortMonthNamesStr.append(shortMonthNames[i]);
                    }
                    config.setShortMonthNames(shortMonthNamesStr.toString());
                }
                client.configure(config);
            }
            FTPFileEntryParserFactory myFactory = FtpFileSystemConfigBuilder.getInstance().getEntryParserFactory(fileSystemOptions);
            if (myFactory != null) client.setParserFactory(myFactory);
            try {
                client.connect(hostname, port);
                int reply = client.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) throw new FileSystemException(""vfs.provider.ftp/connect-rejected.error"", hostname);
                if (!client.login(UserAuthenticatorUtils.toString(username), UserAuthenticatorUtils.toString(password))) throw new FileSystemException(""vfs.provider.ftp/login.error"", new Object[] { hostname, UserAuthenticatorUtils.toString(username) }, null);
                if (!client.setFileType(FTP.BINARY_FILE_TYPE)) throw new FileSystemException(""vfs.provider.ftp/set-binary.error"", hostname);
                Integer dataTimeout = FtpFileSystemConfigBuilder.getInstance().getDataTimeout(fileSystemOptions);
                if (dataTimeout != null) client.setDataTimeout(dataTimeout.intValue());
                try {
                    FtpFileSystemConfigBuilder.getInstance().setHomeDir(fileSystemOptions, client.printWorkingDirectory());
                } catch (IOException ex) {
                    throw new FileSystemException(""Error obtaining working directory!"");
                }
                Boolean userDirIsRoot = FtpFileSystemConfigBuilder.getInstance().getUserDirIsRoot(fileSystemOptions);
                if (workingDirectory != null && (userDirIsRoot == null || !userDirIsRoot.booleanValue())) if (!client.changeWorkingDirectory(workingDirectory)) throw new FileSystemException(""vfs.provider.ftp/change-work-directory.error"", workingDirectory);
                Boolean passiveMode = FtpFileSystemConfigBuilder.getInstance().getPassiveMode(fileSystemOptions);
                if (passiveMode != null && passiveMode.booleanValue()) client.enterLocalPassiveMode();
            } catch (final IOException e) {
                if (client.isConnected()) client.disconnect();
                throw e;
            }
            return client;
        } catch (final Exception exc) {
            throw new FileSystemException(""vfs.provider.ftp/connect.error"", new Object[] { hostname }, exc);
        }
    }
"
"    public static byte[] post(String path, Map<String, String> params, String encode) throws Exception {
        StringBuilder parambuilder = new StringBuilder("""");
        if (params != null && !params.isEmpty()) {
            for (Map.Entry<String, String> entry : params.entrySet()) {
                parambuilder.append(entry.getKey()).append(""="").append(URLEncoder.encode(entry.getValue(), encode)).append(""&"");
            }
            parambuilder.deleteCharAt(parambuilder.length() - 1);
        }
        byte[] data = parambuilder.toString().getBytes();
        URL url = new URL(path);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setDoOutput(true);
        conn.setUseCaches(false);
        conn.setConnectTimeout(5 * 1000);
        conn.setRequestMethod(""POST"");
        conn.setRequestProperty(""Accept"", ""image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*"");
        conn.setRequestProperty(""Accept-Language"", ""zh-CN"");
        conn.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)"");
        conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        conn.setRequestProperty(""Content-Length"", String.valueOf(data.length));
        conn.setRequestProperty(""Connection"", ""Keep-Alive"");
        DataOutputStream outStream = new DataOutputStream(conn.getOutputStream());
        outStream.write(data);
        outStream.flush();
        outStream.close();
        if (conn.getResponseCode() == 200) {
            return StreamTool.readInputStream(conn.getInputStream());
        }
        return null;
    }
","    protected void setRankOrder() {
        this.rankOrder = new int[values.length];
        for (int i = 0; i < rankOrder.length; i++) {
            rankOrder[i] = i;
            assert (!Double.isNaN(values[i]));
        }
        for (int i = rankOrder.length - 1; i >= 0; i--) {
            boolean swapped = false;
            for (int j = 0; j < i; j++) if (values[rankOrder[j]] < values[rankOrder[j + 1]]) {
                int r = rankOrder[j];
                rankOrder[j] = rankOrder[j + 1];
                rankOrder[j + 1] = r;
            }
        }
    }
"
"    private static void download(String urlString) throws IOException {
        URL url = new URL(urlString);
        url = handleRedirectUrl(url);
        URLConnection cn = url.openConnection();
        Utils.setHeader(cn);
        long fileLength = cn.getContentLength();
        Statics.getInstance().setFileLength(fileLength);
        long packageLength = fileLength / THREAD_COUNT;
        long leftLength = fileLength % THREAD_COUNT;
        String fileName = Utils.decodeURLFileName(url);
        RandomAccessFile file = new RandomAccessFile(fileName, ""rw"");
        System.out.println(""File: "" + fileName + "", Size: "" + Utils.calSize(fileLength));
        CountDownLatch latch = new CountDownLatch(THREAD_COUNT + 1);
        long pos = 0;
        for (int i = 0; i < THREAD_COUNT; i++) {
            long endPos = pos + packageLength;
            if (leftLength > 0) {
                endPos++;
                leftLength--;
            }
            new Thread(new DownloadThread(latch, url, file, pos, endPos)).start();
            pos = endPos;
        }
        new Thread(new MoniterThread(latch)).start();
        try {
            latch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
","	private File download(String filename, URL url) {
		int size = -1;
		int received = 0;
		try {
			fireDownloadStarted(filename);
			File file = createFile(filename);
			BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));
			System.out.println(""下载资源："" + filename + "", url="" + url);
			// BufferedInputStream bis = new
			// BufferedInputStream(url.openStream());
			InputStream bis = url.openStream();
			byte[] buf = new byte[1024];
			int count = 0;
			long lastUpdate = 0;
			size = bis.available();
			while ((count = bis.read(buf)) != -1) {
				bos.write(buf, 0, count);
				received += count;
				long now = System.currentTimeMillis();
				if (now - lastUpdate > 500) {
					fireDownloadUpdate(filename, size, received);
					lastUpdate = now;
				}
			}
			bos.close();
			System.out.println(""资源下载完毕："" + filename);
			fireDownloadCompleted(filename);
			return file;
		} catch (IOException e) {
			System.out.println(""下载资源失败："" + filename + "", error="" + e.getMessage());
			fireDownloadInterrupted(filename);
			if (!(e instanceof FileNotFoundException)) {
				e.printStackTrace();
			}
		}
		return null;
	}
"
"    public String getMd5CodeOf16(String str) {
        StringBuffer buf = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte b[] = md.digest();
            int i;
            buf = new StringBuffer("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append(""0"");
                buf.append(Integer.toHexString(i));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } finally {
            return buf.toString().substring(8, 24);
        }
    }
","    public void run() {
        Pair p = null;
        try {
            while ((p = queue.pop()) != null) {
                GetMethod get = new GetMethod(p.getRemoteUri());
                try {
                    get.setFollowRedirects(true);
                    get.setRequestHeader(""Mariner-Application"", ""prerenderer"");
                    get.setRequestHeader(""Mariner-DeviceName"", deviceName);
                    int iGetResultCode = httpClient.executeMethod(get);
                    if (iGetResultCode != 200) {
                        throw new IOException(""Got response code "" + iGetResultCode + "" for a request for "" + p.getRemoteUri());
                    }
                    InputStream is = get.getResponseBodyAsStream();
                    File localFile = new File(deviceFile, p.getLocalUri());
                    localFile.getParentFile().mkdirs();
                    OutputStream os = new FileOutputStream(localFile);
                    IOUtils.copy(is, os);
                    os.close();
                } finally {
                    get.releaseConnection();
                }
            }
        } catch (Exception ex) {
            result = ex;
        }
    }
"
"    public void schema(final Row row, TestResults testResults) throws Exception {
        String urlString = row.text(1);
        String schemaBase = null;
        if (row.cellExists(2)) {
            schemaBase = row.text(2);
        }
        try {
            StreamSource schemaSource;
            if (urlString.startsWith(CLASS_PREFIX)) {
                InputStream schema = XmlValidator.class.getClassLoader().getResourceAsStream(urlString.substring(CLASS_PREFIX.length()));
                schemaSource = new StreamSource(schema);
            } else {
                URL url = new URL(urlString);
                URLConnection urlConnection = url.openConnection();
                urlConnection.connect();
                InputStream inputStream = urlConnection.getInputStream();
                schemaSource = new StreamSource(inputStream);
            }
            SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            if (schemaBase != null) {
                DefaultLSResourceResolver resolver = new DefaultLSResourceResolver(schemaBase);
                factory.setResourceResolver(resolver);
            }
            factory.newSchema(new URL(urlString));
            Validator validator = factory.newSchema(schemaSource).newValidator();
            StreamSource source = new StreamSource(new StringReader(xml));
            validator.validate(source);
            row.pass(testResults);
        } catch (SAXException e) {
            Loggers.SERVICE_LOG.warn(""schema error"", e);
            throw new FitFailureException(e.getMessage());
        } catch (IOException e) {
            Loggers.SERVICE_LOG.warn(""schema error"", e);
            throw new FitFailureException(e.getMessage());
        }
    }
","    public static String getURLContent(String href) throws BuildException {
        URL url = null;
        String content;
        try {
            URL context = new URL(""file:"" + System.getProperty(""user.dir"") + ""/"");
            url = new URL(context, href);
            InputStream is = url.openStream();
            InputStreamReader isr = new InputStreamReader(is);
            StringBuffer stringBuffer = new StringBuffer();
            char[] buffer = new char[1024];
            int len;
            while ((len = isr.read(buffer, 0, 1024)) > 0) stringBuffer.append(buffer, 0, len);
            content = stringBuffer.toString();
            isr.close();
        } catch (Exception ex) {
            throw new BuildException(""Cannot get content of URL "" + href + "": "" + ex);
        }
        return content;
    }
"
"    public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        registroActualizado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
            DateFormat sss = new SimpleDateFormat(""S"");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            ms = conn.prepareStatement(SENTENCIA_UPDATE);
            if (fechaOficio != null && !fechaOficio.equals("""")) {
                if (fechaOficio.matches(""\\d{8}"")) {
                    ms.setInt(1, Integer.parseInt(fechaOficio));
                } else {
                    int fzafent = 0;
                    try {
                        fechaTest = dateF.parse(fechaOficio);
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(fechaTest);
                        DateFormat date1 = new SimpleDateFormat(""yyyyMMdd"");
                        fzafent = Integer.parseInt(date1.format(fechaTest));
                    } catch (Exception e) {
                    }
                    ms.setInt(1, fzafent);
                }
            } else {
                ms.setInt(1, 0);
            }
            ms.setString(2, descripcion);
            ms.setInt(3, Integer.parseInt(anoSalida));
            ms.setInt(4, Integer.parseInt(oficinaSalida));
            ms.setInt(5, Integer.parseInt(numeroSalida));
            ms.setString(6, nulo);
            ms.setString(7, motivosNulo);
            ms.setString(8, usuarioNulo);
            if (fechaNulo != null && !fechaNulo.equals("""")) {
                int fzafent = 0;
                try {
                    fechaTest = dateF.parse(fechaNulo);
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(fechaTest);
                    DateFormat date1 = new SimpleDateFormat(""yyyyMMdd"");
                    fzafent = Integer.parseInt(date1.format(fechaTest));
                } catch (Exception e) {
                }
                ms.setInt(9, fzafent);
            } else {
                ms.setInt(9, 0);
            }
            if (fechaEntrada != null && !fechaEntrada.equals("""")) {
                int fzafent = 0;
                try {
                    fechaTest = dateF.parse(fechaEntrada);
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(fechaTest);
                    DateFormat date1 = new SimpleDateFormat(""yyyyMMdd"");
                    fzafent = Integer.parseInt(date1.format(fechaTest));
                } catch (Exception e) {
                }
                ms.setInt(10, fzafent);
            } else {
                ms.setInt(10, 0);
            }
            ms.setString(11, descartadoEntrada);
            ms.setString(12, usuarioEntrada);
            ms.setString(13, motivosDescarteEntrada);
            ms.setInt(14, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ms.setInt(15, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ms.setInt(16, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            ms.setInt(17, anoOficio != null ? Integer.parseInt(anoOficio) : 0);
            ms.setInt(18, oficinaOficio != null ? Integer.parseInt(oficinaOficio) : 0);
            ms.setInt(19, numeroOficio != null ? Integer.parseInt(numeroOficio) : 0);
            int afectados = ms.executeUpdate();
            if (afectados > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            conn.commit();
        } catch (Exception ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha actualitzat la taula de gestió dels ofici de remissió."", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
","    public static Builder fromURL(URL url) {
        try {
            InputStream in = null;
            try {
                in = url.openStream();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                int read = -1;
                byte[] buf = new byte[4096];
                while ((read = in.read(buf)) >= 0) {
                    if (read > 0) {
                        baos.write(buf, 0, read);
                    }
                }
                StreamBuilder b = (StreamBuilder) fromMemory(baos.toByteArray());
                try {
                    b.setSystemId(url.toURI().toString());
                } catch (URISyntaxException use) {
                    b.setSystemId(url.toString());
                }
                return b;
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (IOException ex) {
            throw new XMLUnitException(ex);
        }
    }
"
"    private static ImageIcon tryLoadImageIconFromResource(String filename, String path, int width, int height) {
        ImageIcon icon = null;
        try {
            URL url = cl.getResource(path + pathSeparator + fixFilename(filename));
            if (url != null && url.openStream() != null) {
                icon = new ImageIcon(url);
            }
        } catch (Exception e) {
        }
        if (icon == null) {
            return null;
        }
        if ((icon.getIconWidth() == width) && (icon.getIconHeight() == height)) {
            return icon;
        } else {
            return new ImageIcon(icon.getImage().getScaledInstance(width, height, java.awt.Image.SCALE_SMOOTH));
        }
    }
","    private static Long statusSWGCraftTime() {
        long current = System.currentTimeMillis() / 1000L;
        if (current < (previousStatusCheck + SWGCraft.STATUS_CHECK_DELAY)) return previousStatusTime;
        URL url = null;
        try {
            synchronized (previousStatusTime) {
                if (current >= previousStatusCheck + SWGCraft.STATUS_CHECK_DELAY) {
                    url = SWGCraft.getStatusTextURL();
                    String statusTime = ZReader.read(url.openStream());
                    previousStatusTime = Long.valueOf(statusTime);
                    previousStatusCheck = current;
                }
                return previousStatusTime;
            }
        } catch (UnknownHostException e) {
            SWGCraft.showUnknownHostDialog(url, e);
        } catch (Throwable e) {
            SWGAide.printDebug(""cmgr"", 1, ""SWGResourceManager:statusSWGCraftTime:"", e.toString());
        }
        return Long.valueOf(0);
    }
"
"    public boolean onStart() {
        log(""Starting up, this may take a minute..."");
        gui = new ApeAtollGUI();
        gui.setVisible(true);
        while (waitGUI) {
            sleep(100);
        }
        URLConnection url = null;
        BufferedReader in = null;
        BufferedWriter out = null;
        if (checkUpdates) {
            try {
                url = new URL(""http://www.voltrex.be/rsbot/VoltrexApeAtollVERSION.txt"").openConnection();
                in = new BufferedReader(new InputStreamReader(url.getInputStream()));
                if (Double.parseDouble(in.readLine()) > properties.version()) {
                    if (JOptionPane.showConfirmDialog(null, ""Update found. Do you want to update?"") == 0) {
                        JOptionPane.showMessageDialog(null, ""Please choose 'VoltrexApeAtoll.java' in your scripts/sources folder."");
                        JFileChooser fc = new JFileChooser();
                        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                            url = new URL(""http://www.voltrex.be/rsbot/VoltrexApeAtoll.java"").openConnection();
                            in = new BufferedReader(new InputStreamReader(url.getInputStream()));
                            out = new BufferedWriter(new FileWriter(fc.getSelectedFile().getPath()));
                            String inp;
                            while ((inp = in.readLine()) != null) {
                                out.write(inp);
                                out.newLine();
                                out.flush();
                            }
                            log(""Script successfully downloaded. Please recompile."");
                            return false;
                        } else log(""Update canceled"");
                    } else log(""Update canceled"");
                } else log(""You have the latest version."");
                if (in != null) in.close();
                if (out != null) out.close();
            } catch (IOException e) {
                log(""Problem getting version. Please report this bug!"");
            }
        }
        try {
            BKG = ImageIO.read(new URL(""http://i54.tinypic.com/2egcfaw.jpg""));
        } catch (final java.io.IOException e) {
            e.printStackTrace();
        }
        try {
            final URL cursorURL = new URL(""http://imgur.com/i7nMG.png"");
            final URL cursor80URL = new URL(""http://imgur.com/8k9op.png"");
            normal = ImageIO.read(cursorURL);
            clicked = ImageIO.read(cursor80URL);
        } catch (MalformedURLException e) {
            log.info(""Unable to buffer cursor."");
        } catch (IOException e) {
            log.info(""Unable to open cursor image."");
        }
        scriptStartTime = System.currentTimeMillis();
        mouse.setSpeed(MouseSpeed);
        camera.setPitch(true);
        log(""You are using Voltrex Ape Atoll agility course."");
        return true;
    }
","    private static byte[] gerarHash(String frase) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(frase.getBytes());
            return md.digest();
        } catch (Exception e) {
            return null;
        }
    }
"
"    public String getRec(String attribute, String url) {
        String arr[] = new String[3];
        String[] subarr = new String[6];
        String mdPrefix = """";
        String mdPrefixValue = """";
        String iden = """";
        String idenValue = """";
        String s = """";
        String arguments = attribute.substring(attribute.indexOf(""?"") + 1);
        System.out.println(""attributes"" + arguments);
        java.util.StringTokenizer st = new java.util.StringTokenizer(arguments, ""&"");
        int i = 0;
        int j = 0;
        int count = 0;
        int argCount = 0;
        java.util.Vector v1 = new java.util.Vector(1, 1);
        java.util.Vector v901 = new java.util.Vector(1, 1);
        java.util.Vector v902 = new java.util.Vector(1, 1);
        java.util.Vector v903 = new java.util.Vector(1, 1);
        java.util.Vector v904 = new java.util.Vector(1, 1);
        java.util.Vector v905 = new java.util.Vector(1, 1);
        java.util.Vector v906 = new java.util.Vector(1, 1);
        java.util.Vector v907 = new java.util.Vector(1, 1);
        java.util.Vector v908 = new java.util.Vector(1, 1);
        java.util.Vector v3 = new java.util.Vector(1, 1);
        java.util.Vector vData = new java.util.Vector(1, 1);
        java.util.Vector vSet = new java.util.Vector(1, 1);
        java.util.Vector v856 = new java.util.Vector(1, 1);
        Resdate dt = new Resdate();
        try {
            while (st.hasMoreElements()) {
                arr[i] = st.nextElement().toString();
                java.util.StringTokenizer subSt = new java.util.StringTokenizer(arr[i], ""="");
                while (subSt.hasMoreElements()) {
                    subarr[j] = subSt.nextElement().toString();
                    System.out.println("" arga are... "" + subarr[j]);
                    j++;
                }
                i++;
                count++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        Namespace oains = Namespace.getNamespace(""http://www.openarchives.org/OAI/2.0/"");
        Element root = new Element(""OAI-PMH"", oains);
        Namespace xsi = Namespace.getNamespace(""xsi"", ""http://www.w3.org/2001/XMLSchema-instance"");
        Attribute schemaLocation = new Attribute(""schemaLocation"", ""http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd"", xsi);
        root.setAttribute(schemaLocation);
        root.addNamespaceDeclaration(xsi);
        Document doc = new Document(root);
        Element responseDate = new Element(""responseDate"", oains);
        root.addContent(responseDate);
        responseDate.setText(dt.getDate());
        Element request = new Element(""request"", oains);
        request.setAttribute(""verb"", ""GetRecord"");
        int idenCount = 0, mdfCount = 0;
        for (int k = 2; k < j; k += 2) {
            System.out.println("" arg key "" + subarr[k]);
            if (subarr[k].equals(""metadataPrefix"")) {
                mdPrefix = ""metadataPrefix"";
                mdfCount++;
                mdPrefixValue = subarr[k + 1];
                request.setAttribute(mdPrefix, mdPrefixValue);
                System.out.println(subarr[k] + ""="");
                System.out.println(mdPrefixValue);
                argCount++;
            } else if (subarr[k].equals(""identifier"")) {
                iden = ""identifier"";
                idenCount++;
                idenValue = subarr[k + 1];
                request.setAttribute(iden, idenValue);
                System.out.println(subarr[k] + ""="");
                System.out.println(idenValue);
                argCount++;
            }
        }
        request.setText(url);
        root.addContent(request);
        System.out.println(""count"" + argCount);
        if (mdfCount == 1 && idenCount == 1 && (mdPrefixValue.equals(""marc21"") || mdPrefixValue.equals(""oai_dc"") || mdPrefixValue.equals(""mods""))) {
            try {
                v1 = ((ejb.bprocess.OAIPMH.ListGetRecordsHome) ejb.bprocess.util.HomeFactory.getInstance().getRemoteHome(""ListGetRecords"")).create().getRecord(idenValue, mdPrefixValue);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            if (v1.size() == 0) {
                System.out.println(""vector size is empty"");
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(3, attribute, url, ""GetRecord"");
                root.addContent(errorXML);
            } else {
                Element GetRecord = new Element(""GetRecord"", oains);
                root.addContent(GetRecord);
                Element Record = new Element(""record"", oains);
                Element metadata = new Element(""metadata"", oains);
                Element head = new Element(""header"", oains);
                System.out.println(""size i  s "" + v1.size());
                for (int v = 0; v < v1.size(); v = v + 13) {
                    vSet = (java.util.Vector) v1.elementAt(v + 1);
                    Element ident = new Element(""identifier"", oains);
                    ident.setText(idenValue);
                    head.addContent(ident);
                    Element dates = new Element(""datestamp"", oains);
                    dates.setText(v1.elementAt(v).toString().substring(0, 10));
                    head.addContent(dates);
                    for (int t = 0; t < vSet.size(); t++) {
                        Element setSpec = new Element(""setSpec"", oains);
                        System.out.println(""set elem"" + vSet.elementAt(t).toString());
                        setSpec.setText(vSet.elementAt(t).toString());
                        head.addContent(setSpec);
                    }
                    Element marcroot = new Element(""record"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                    Namespace xsimarc = Namespace.getNamespace(""xsi"", ""http://www.w3.org/2001/XMLSchema-instance"");
                    marcroot.addNamespaceDeclaration(xsimarc);
                    Attribute schemaLocationmarc = new Attribute(""schemaLocation"", ""http://www.loc.gov/MARC21/slim http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd"", xsimarc);
                    marcroot.setAttribute(schemaLocationmarc);
                    marcroot.setAttribute(""type"", ""Bibliographic"");
                    v3 = (java.util.Vector) v1.elementAt(v + 10);
                    java.util.Vector vL = (java.util.Vector) v3.elementAt(0);
                    org.jdom.Element lead = new org.jdom.Element(""leader"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                    lead.setText(vL.elementAt(0).toString());
                    marcroot.addContent(lead);
                    java.util.Vector vC = (java.util.Vector) v3.elementAt(1);
                    for (int u = 0; u < vC.size(); u = u + 2) {
                        org.jdom.Element ct = new org.jdom.Element(""controlfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        ct.setAttribute(""tag"", vC.elementAt(u).toString());
                        ct.setText(vC.elementAt(u + 1).toString());
                        marcroot.addContent(ct);
                    }
                    v901 = (java.util.Vector) v1.elementAt(v + 2);
                    for (int k = 0; k < v901.size(); k++) {
                        org.jdom.Element datafield = new org.jdom.Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        datafield.setAttribute(""tag"", ""901"");
                        datafield.setAttribute(""ind1"", ""0"");
                        datafield.setAttribute(""ind2"", ""0"");
                        java.util.Vector vecSub = new java.util.Vector(1, 1);
                        vecSub = (java.util.Vector) v901.elementAt(k);
                        System.out.println(""in getrec sub "");
                        System.out.println(""sub 901 size"" + vecSub.size());
                        for (int k1 = 0; k1 < vecSub.size(); k1 = k1 + 2) {
                            org.jdom.Element subfield = new org.jdom.Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                            subfield.setAttribute(""code"", vecSub.elementAt(k1).toString());
                            subfield.setText(vecSub.elementAt(k1 + 1).toString());
                            datafield.addContent(subfield);
                        }
                        marcroot.addContent(datafield);
                    }
                    v902 = (java.util.Vector) v1.elementAt(v + 3);
                    for (int l = 0; l < v902.size(); l++) {
                        Element datafield1 = new Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        datafield1.setAttribute(""tag"", ""902"");
                        datafield1.setAttribute(""ind1"", ""0"");
                        datafield1.setAttribute(""ind2"", ""0"");
                        java.util.Vector vecSub1 = new java.util.Vector(1, 1);
                        vecSub1 = (java.util.Vector) v902.elementAt(l);
                        for (int b = 0; b < vecSub1.size(); b = b + 2) {
                            Element subfield = new Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                            subfield.setAttribute(""code"", vecSub1.elementAt(b).toString());
                            subfield.setText(vecSub1.elementAt(b + 1).toString());
                            datafield1.addContent(subfield);
                        }
                        marcroot.addContent(datafield1);
                    }
                    v903 = (java.util.Vector) v1.elementAt(v + 4);
                    Element datafield1 = new Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                    datafield1.setAttribute(""tag"", ""903"");
                    datafield1.setAttribute(""ind1"", ""0"");
                    datafield1.setAttribute(""ind2"", ""0"");
                    for (int l = 0; l < v903.size(); l++) {
                        Element subfield = new Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        subfield.setAttribute(""code"", ""a"");
                        subfield.setText(v903.elementAt(l).toString());
                        datafield1.addContent(subfield);
                    }
                    marcroot.addContent(datafield1);
                    v904 = (java.util.Vector) v1.elementAt(v + 5);
                    Element datafield21 = new Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                    datafield21.setAttribute(""tag"", ""904"");
                    datafield21.setAttribute(""ind1"", ""0"");
                    datafield21.setAttribute(""ind2"", ""0"");
                    for (int l = 0; l < v904.size(); l++) {
                        Element subfield = new Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        subfield.setAttribute(""code"", ""a"");
                        subfield.setText(v904.elementAt(l).toString());
                        datafield21.addContent(subfield);
                    }
                    marcroot.addContent(datafield21);
                    v905 = (java.util.Vector) v1.elementAt(v + 6);
                    Element datafield31 = new Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                    datafield31.setAttribute(""tag"", ""905"");
                    datafield31.setAttribute(""ind1"", ""0"");
                    datafield31.setAttribute(""ind2"", ""0"");
                    for (int l = 0; l < v905.size(); l++) {
                        Element subfield = new Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        subfield.setAttribute(""code"", ""a"");
                        subfield.setText(v905.elementAt(l).toString());
                        datafield31.addContent(subfield);
                    }
                    marcroot.addContent(datafield31);
                    v906 = (java.util.Vector) v1.elementAt(v + 7);
                    Element datafield4 = new Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                    datafield4.setAttribute(""tag"", ""906"");
                    datafield4.setAttribute(""ind1"", ""0"");
                    datafield4.setAttribute(""ind2"", ""0"");
                    for (int l = 0; l < v906.size(); l++) {
                        Element subfield = new Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        subfield.setAttribute(""code"", ""a"");
                        subfield.setText(v906.elementAt(l).toString());
                        datafield4.addContent(subfield);
                    }
                    marcroot.addContent(datafield4);
                    v907 = (java.util.Vector) v1.elementAt(v + 8);
                    for (int l = 0; l < v907.size(); l++) {
                        Element datafield5 = new Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        datafield5.setAttribute(""tag"", ""907"");
                        datafield5.setAttribute(""ind1"", ""0"");
                        datafield5.setAttribute(""ind2"", ""0"");
                        java.util.Vector vecSub1 = new java.util.Vector(1, 1);
                        vecSub1 = (java.util.Vector) v907.elementAt(l);
                        for (int b = 0; b < vecSub1.size(); b = b + 2) {
                            Element subfield = new Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                            subfield.setAttribute(""code"", vecSub1.elementAt(b).toString());
                            subfield.setText(vecSub1.elementAt(b + 1).toString());
                            datafield5.addContent(subfield);
                        }
                        marcroot.addContent(datafield5);
                    }
                    v908 = (java.util.Vector) v1.elementAt(v + 9);
                    for (int l = 0; l < v908.size(); l++) {
                        Element datafield6 = new Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        datafield6.setAttribute(""tag"", ""908"");
                        datafield6.setAttribute(""ind1"", ""0"");
                        datafield6.setAttribute(""ind2"", ""0"");
                        java.util.Vector vecSub1 = new java.util.Vector(1, 1);
                        vecSub1 = (java.util.Vector) v908.elementAt(l);
                        for (int b = 0; b < vecSub1.size(); b = b + 2) {
                            Element subfield = new Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                            subfield.setAttribute(""code"", vecSub1.elementAt(b).toString());
                            subfield.setText(vecSub1.elementAt(b + 1).toString());
                            datafield6.addContent(subfield);
                        }
                        marcroot.addContent(datafield6);
                    }
                    vData = (java.util.Vector) v1.elementAt(v + 11);
                    for (int m = 0; m < vData.size(); m = m + 2) {
                        Element datafield2 = new Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        datafield2.setAttribute(""tag"", vData.elementAt(m).toString());
                        datafield2.setAttribute(""ind1"", ""0"");
                        datafield2.setAttribute(""ind2"", ""0"");
                        java.util.Vector vSub = new java.util.Vector(1, 1);
                        vSub = (java.util.Vector) vData.elementAt(m + 1);
                        for (int n = 0; n < vSub.size(); n = n + 2) {
                            Element subfield = new Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                            subfield.setAttribute(""code"", vSub.elementAt(n).toString());
                            subfield.setText(vSub.elementAt(n + 1).toString());
                            datafield2.addContent(subfield);
                        }
                        marcroot.addContent(datafield2);
                    }
                    v856 = (java.util.Vector) v1.elementAt(v + 12);
                    for (int l = 0; l < v856.size(); l = l + 2) {
                        Element datafield3 = new Element(""datafield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        datafield3.setAttribute(""tag"", ""856"");
                        datafield3.setAttribute(""ind1"", ""0"");
                        datafield3.setAttribute(""ind2"", ""0"");
                        Element subfield1 = new Element(""subfield"", ""marc"", ""http://www.loc.gov/MARC21/slim"");
                        subfield1.setAttribute(""code"", v856.elementAt(l).toString());
                        subfield1.setText(v856.elementAt(l + 1).toString());
                        datafield3.addContent(subfield1);
                        marcroot.addContent(datafield3);
                    }
                    if (mdPrefixValue.equals(""oai_dc"")) {
                        try {
                            Transformer transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(ejb.bprocess.util.NewGenLibRoot.getRoot() + java.io.File.separator + ""StyleSheets"" + java.io.File.separator + ""MARC21slim2OAIDC.xsl""));
                            Document docmarc = new Document(marcroot);
                            JDOMSource in = new JDOMSource(docmarc);
                            JDOMResult out = new JDOMResult();
                            transformer.transform(in, out);
                            Document doc2 = out.getDocument();
                            org.jdom.output.XMLOutputter out1 = new org.jdom.output.XMLOutputter();
                            out1.setTextTrim(true);
                            out1.setIndent(""  "");
                            out1.setNewlines(true);
                            String s1 = out1.outputString(doc2);
                            System.out.println(""dublin core is"" + s1);
                            Element dcroot1 = doc2.getRootElement();
                            Namespace xsi1 = Namespace.getNamespace(""xsi"", ""http://www.w3.org/2001/XMLSchema-instance"");
                            Namespace oainsdc = Namespace.getNamespace(""http://www.openarchives.org/OAI/2.0/oai_dc/"");
                            Element dcroot = new Element(""dc"", ""oai_dc"", ""http://www.openarchives.org/OAI/2.0/oai_dc/"");
                            Namespace dcns = Namespace.getNamespace(""dc"", ""http://purl.org/dc/elements/1.1/"");
                            dcroot.addNamespaceDeclaration(dcns);
                            dcroot.addNamespaceDeclaration(xsi1);
                            Attribute schemaLocationdc = new Attribute(""schemaLocation"", ""http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd"", xsi1);
                            dcroot.setAttribute(schemaLocationdc);
                            java.util.List dcList = doc2.getRootElement().getChildren();
                            for (int g = 0; g < dcList.size(); g++) {
                                Element dcElem1 = (org.jdom.Element) dcList.get(g);
                                Element dcElem = new Element(dcElem1.getName(), ""dc"", ""http://purl.org/dc/elements/1.1/"");
                                dcElem.setText(dcElem1.getText());
                                dcroot.addContent(dcElem);
                            }
                            metadata.addContent(dcroot);
                        } catch (TransformerException e) {
                            e.printStackTrace();
                        }
                    } else if (mdPrefixValue.equals(""mods"")) {
                        try {
                            java.util.Properties systemSettings = System.getProperties();
                            java.util.prefs.Preferences prefs = java.util.prefs.Preferences.systemRoot();
                            if (prefs.getBoolean(""useproxy"", false)) {
                                systemSettings.put(""proxySet"", ""true"");
                                systemSettings.put(""proxyHost"", prefs.get(""proxyservername"", """"));
                                systemSettings.put(""proxyPort"", prefs.get(""proxyport"", """"));
                                systemSettings.put(""http.proxyHost"", prefs.get(""proxyservername"", """"));
                                systemSettings.put(""http.proxyPort"", prefs.get(""proxyport"", """"));
                            }
                            String urltext = """";
                            Transformer transformer = null;
                            urltext = ""http://www.loc.gov/standards/mods/v3/MARC21slim2MODS3.xsl"";
                            java.net.URL url1 = new java.net.URL(urltext);
                            java.net.URLConnection urlconn = url1.openConnection();
                            urlconn.setDoInput(true);
                            transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(urlconn.getInputStream()));
                            Document docmarc = new Document(marcroot);
                            JDOMSource in = new JDOMSource(docmarc);
                            JDOMResult out = new JDOMResult();
                            transformer.transform(in, out);
                            Document doc2 = out.getDocument();
                            org.jdom.output.XMLOutputter out1 = new org.jdom.output.XMLOutputter();
                            out1.setTextTrim(true);
                            out1.setIndent(""  "");
                            out1.setNewlines(true);
                            String s1 = out1.outputString(doc2);
                            Namespace xsi1 = Namespace.getNamespace(""xlink"", ""http://www.w3.org/1999/xlink"");
                            Namespace oainsdc = Namespace.getNamespace(""http://www.openarchives.org/OAI/2.0/oai_dc/"");
                            Element mroot = new Element(""mods"", ""http://www.loc.gov/mods/v3"");
                            Namespace dcns = Namespace.getNamespace(""http://www.loc.gov/mods/v3"");
                            mroot.addNamespaceDeclaration(xsi1);
                            Attribute schemaLocationdc = new Attribute(""schemaLocation"", ""http://www.loc.gov/mods/v3 http://www.loc.gov/standards/mods/v3/mods-3-0.xsd"", xsi1);
                            mroot.setAttribute(schemaLocationdc);
                            java.util.List dcList = doc2.getRootElement().getChildren();
                            for (int g = 0; g < dcList.size(); g++) {
                                Element mElem1 = (org.jdom.Element) dcList.get(g);
                                Element mElem = new Element(mElem1.getName(), ""http://www.loc.gov/mods/v3"");
                                if (mElem1.hasChildren()) {
                                    java.util.List mList1 = mElem1.getChildren();
                                    for (int f = 0; f < mList1.size(); f++) {
                                        Element mElem2 = (org.jdom.Element) mList1.get(f);
                                        Element mElem3 = new Element(mElem2.getName(), ""http://www.loc.gov/mods/v3"");
                                        if (mElem2.hasChildren()) {
                                            java.util.List mList2 = mElem2.getChildren();
                                            for (int h = 0; h < mList2.size(); h++) {
                                                Element mElem4 = (org.jdom.Element) mList1.get(h);
                                                Element mElem5 = new Element(mElem4.getName(), ""http://www.loc.gov/mods/v3"");
                                                mElem5.setText(mElem4.getText());
                                                mElem3.addContent(mElem5);
                                            }
                                        }
                                        if (mElem2.hasChildren() == false) {
                                            mElem3.setText(mElem2.getText());
                                        }
                                        mElem.addContent(mElem3);
                                    }
                                }
                                if (mElem1.hasChildren() == false) {
                                    mElem.setText(mElem1.getText());
                                }
                                mroot.addContent(mElem);
                            }
                            metadata.addContent(mroot);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (mdPrefixValue.equals(""marc21"")) {
                        metadata.addContent(marcroot);
                    } else if (mdPrefixValue.equals(""oai_dc"")) {
                    }
                }
                Record.addContent(head);
                Record.addContent(metadata);
                GetRecord.addContent(Record);
            }
        } else if (argCount <= 2) {
            if (idenCount < 1 && mdfCount < 1) {
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(2, ""missing arguments: identifier,metadataprefix"", url, ""GetRecord"");
                root.addContent(errorXML);
            } else if (idenCount < 1) {
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(2, ""missing argument: identifier"", url, ""GetRecord"");
                root.addContent(errorXML);
            } else if (mdfCount < 1) {
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(2, ""missing argument: metadataprefix"", url, ""GetRecord"");
                root.addContent(errorXML);
            } else if (argCount > 2) {
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(2, ""more number of arguments"", url, ""GetRecord"");
                root.addContent(errorXML);
            } else {
                System.out.println(""no format"");
                Errors e1 = new Errors();
                Element errorXML = e1.describeError(6, """", url, ""GetRecord"");
                root.addContent(errorXML);
            }
        }
        XMLOutputter out = new XMLOutputter();
        out.setIndent("" "");
        out.setNewlines(true);
        s = out.outputString(doc);
        return s;
    }
","    public static void main(String argv[]) {
        Matrix A, B, C, Z, O, I, R, S, X, SUB, M, T, SQ, DEF, SOL;
        int errorCount = 0;
        int warningCount = 0;
        double tmp, s;
        double[] columnwise = { 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12. };
        double[] rowwise = { 1., 4., 7., 10., 2., 5., 8., 11., 3., 6., 9., 12. };
        double[][] avals = { { 1., 4., 7., 10. }, { 2., 5., 8., 11. }, { 3., 6., 9., 12. } };
        double[][] rankdef = avals;
        double[][] tvals = { { 1., 2., 3. }, { 4., 5., 6. }, { 7., 8., 9. }, { 10., 11., 12. } };
        double[][] subavals = { { 5., 8., 11. }, { 6., 9., 12. } };
        double[][] rvals = { { 1., 4., 7. }, { 2., 5., 8., 11. }, { 3., 6., 9., 12. } };
        double[][] pvals = { { 4., 1., 1. }, { 1., 2., 3. }, { 1., 3., 6. } };
        double[][] ivals = { { 1., 0., 0., 0. }, { 0., 1., 0., 0. }, { 0., 0., 1., 0. } };
        double[][] evals = { { 0., 1., 0., 0. }, { 1., 0., 2.e-7, 0. }, { 0., -2.e-7, 0., 1. }, { 0., 0., 1., 0. } };
        double[][] square = { { 166., 188., 210. }, { 188., 214., 240. }, { 210., 240., 270. } };
        double[][] sqSolution = { { 13. }, { 15. } };
        double[][] condmat = { { 1., 3. }, { 7., 9. } };
        int rows = 3, cols = 4;
        int invalidld = 5;
        int raggedr = 0;
        int raggedc = 4;
        int validld = 3;
        int nonconformld = 4;
        int ib = 1, ie = 2, jb = 1, je = 3;
        int[] rowindexset = { 1, 2 };
        int[] badrowindexset = { 1, 3 };
        int[] columnindexset = { 1, 2, 3 };
        int[] badcolumnindexset = { 1, 2, 4 };
        double columnsummax = 33.;
        double rowsummax = 30.;
        double sumofdiagonals = 15;
        double sumofsquares = 650;
        print(""\nTesting constructors and constructor-like methods...\n"");
        try {
            A = new Matrix(columnwise, invalidld);
            errorCount = try_failure(errorCount, ""Catch invalid length in packed constructor... "", ""exception not thrown for invalid input"");
        } catch (IllegalArgumentException e) {
            try_success(""Catch invalid length in packed constructor... "", e.getMessage());
        }
        try {
            A = new Matrix(rvals);
            tmp = A.get(raggedr, raggedc);
        } catch (IllegalArgumentException e) {
            try_success(""Catch ragged input to default constructor... "", e.getMessage());
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""Catch ragged input to constructor... "", ""exception not thrown in construction...ArrayIndexOutOfBoundsException thrown later"");
        }
        try {
            A = Matrix.constructWithCopy(rvals);
            tmp = A.get(raggedr, raggedc);
        } catch (IllegalArgumentException e) {
            try_success(""Catch ragged input to constructWithCopy... "", e.getMessage());
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""Catch ragged input to constructWithCopy... "", ""exception not thrown in construction...ArrayIndexOutOfBoundsException thrown later"");
        }
        A = new Matrix(columnwise, validld);
        B = new Matrix(avals);
        tmp = B.get(0, 0);
        avals[0][0] = 0.0;
        C = B.minus(A);
        avals[0][0] = tmp;
        B = Matrix.constructWithCopy(avals);
        tmp = B.get(0, 0);
        avals[0][0] = 0.0;
        if ((tmp - B.get(0, 0)) != 0.0) {
            errorCount = try_failure(errorCount, ""constructWithCopy... "", ""copy not effected... data visible outside"");
        } else {
            try_success(""constructWithCopy... "", """");
        }
        avals[0][0] = columnwise[0];
        I = new Matrix(ivals);
        try {
            check(I, Matrix.identity(3, 4));
            try_success(""identity... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""identity... "", ""identity Matrix not successfully created"");
        }
        print(""\nTesting access methods...\n"");
        B = new Matrix(avals);
        if (B.getRowDimension() != rows) {
            errorCount = try_failure(errorCount, ""getRowDimension... "", """");
        } else {
            try_success(""getRowDimension... "", """");
        }
        if (B.getColumnDimension() != cols) {
            errorCount = try_failure(errorCount, ""getColumnDimension... "", """");
        } else {
            try_success(""getColumnDimension... "", """");
        }
        B = new Matrix(avals);
        double[][] barray = B.getArray();
        if (barray != avals) {
            errorCount = try_failure(errorCount, ""getArray... "", """");
        } else {
            try_success(""getArray... "", """");
        }
        barray = B.getArrayCopy();
        if (barray == avals) {
            errorCount = try_failure(errorCount, ""getArrayCopy... "", ""data not (deep) copied"");
        }
        try {
            check(barray, avals);
            try_success(""getArrayCopy... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""getArrayCopy... "", ""data not successfully (deep) copied"");
        }
        double[] bpacked = B.getColumnPackedCopy();
        try {
            check(bpacked, columnwise);
            try_success(""getColumnPackedCopy... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""getColumnPackedCopy... "", ""data not successfully (deep) copied by columns"");
        }
        bpacked = B.getRowPackedCopy();
        try {
            check(bpacked, rowwise);
            try_success(""getRowPackedCopy... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""getRowPackedCopy... "", ""data not successfully (deep) copied by rows"");
        }
        try {
            tmp = B.get(B.getRowDimension(), B.getColumnDimension() - 1);
            errorCount = try_failure(errorCount, ""get(int,int)... "", ""OutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                tmp = B.get(B.getRowDimension() - 1, B.getColumnDimension());
                errorCount = try_failure(errorCount, ""get(int,int)... "", ""OutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""get(int,int)... OutofBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""get(int,int)... "", ""OutOfBoundsException expected but not thrown"");
        }
        try {
            if (B.get(B.getRowDimension() - 1, B.getColumnDimension() - 1) != avals[B.getRowDimension() - 1][B.getColumnDimension() - 1]) {
                errorCount = try_failure(errorCount, ""get(int,int)... "", ""Matrix entry (i,j) not successfully retreived"");
            } else {
                try_success(""get(int,int)... "", """");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""get(int,int)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        SUB = new Matrix(subavals);
        try {
            M = B.getMatrix(ib, ie + B.getRowDimension() + 1, jb, je);
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(ib, ie, jb, je + B.getColumnDimension() + 1);
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int,int,int,int)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(ib, ie, jb, je);
            try {
                check(SUB, M);
                try_success(""getMatrix(int,int,int,int)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int,int)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            M = B.getMatrix(ib, ie, badcolumnindexset);
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(ib, ie + B.getRowDimension() + 1, columnindexset);
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int,int,int[])... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(ib, ie, columnindexset);
            try {
                check(SUB, M);
                try_success(""getMatrix(int,int,int[])... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int,int,int[])... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            M = B.getMatrix(badrowindexset, jb, je);
            errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(rowindexset, jb, je + B.getColumnDimension() + 1);
                errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int[],int,int)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(rowindexset, jb, je);
            try {
                check(SUB, M);
                try_success(""getMatrix(int[],int,int)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int,int)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            M = B.getMatrix(badrowindexset, columnindexset);
            errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                M = B.getMatrix(rowindexset, badcolumnindexset);
                errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""getMatrix(int[],int[])... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            M = B.getMatrix(rowindexset, columnindexset);
            try {
                check(SUB, M);
                try_success(""getMatrix(int[],int[])... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""submatrix not successfully retreived"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            errorCount = try_failure(errorCount, ""getMatrix(int[],int[])... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.set(B.getRowDimension(), B.getColumnDimension() - 1, 0.);
            errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""OutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.set(B.getRowDimension() - 1, B.getColumnDimension(), 0.);
                errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""OutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""set(int,int,double)... OutofBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""OutOfBoundsException expected but not thrown"");
        }
        try {
            B.set(ib, jb, 0.);
            tmp = B.get(ib, jb);
            try {
                check(tmp, 0.);
                try_success(""set(int,int,double)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""Matrix element not successfully set"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""set(int,int,double)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        M = new Matrix(2, 3, 0.);
        try {
            B.setMatrix(ib, ie + B.getRowDimension() + 1, jb, je, M);
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(ib, ie, jb, je + B.getColumnDimension() + 1, M);
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int,int,int,int,Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(ib, ie, jb, je, M);
            try {
                check(M.minus(B.getMatrix(ib, ie, jb, je)), M);
                try_success(""setMatrix(int,int,int,int,Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""submatrix not successfully set"");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int,int,Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.setMatrix(ib, ie + B.getRowDimension() + 1, columnindexset, M);
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(ib, ie, badcolumnindexset, M);
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int,int,int[],Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(ib, ie, columnindexset, M);
            try {
                check(M.minus(B.getMatrix(ib, ie, columnindexset)), M);
                try_success(""setMatrix(int,int,int[],Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""submatrix not successfully set"");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int,int,int[],Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.setMatrix(rowindexset, jb, je + B.getColumnDimension() + 1, M);
            errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(badrowindexset, jb, je, M);
                errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int[],int,int,Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(rowindexset, jb, je, M);
            try {
                check(M.minus(B.getMatrix(rowindexset, jb, je)), M);
                try_success(""setMatrix(int[],int,int,Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""submatrix not successfully set"");
            }
            B.setMatrix(ib, ie, jb, je, SUB);
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int,int,Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        try {
            B.setMatrix(rowindexset, badcolumnindexset, M);
            errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            try {
                B.setMatrix(badrowindexset, columnindexset, M);
                errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
            } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
                try_success(""setMatrix(int[],int[],Matrix)... ArrayIndexOutOfBoundsException... "", """");
            }
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""ArrayIndexOutOfBoundsException expected but not thrown"");
        }
        try {
            B.setMatrix(rowindexset, columnindexset, M);
            try {
                check(M.minus(B.getMatrix(rowindexset, columnindexset)), M);
                try_success(""setMatrix(int[],int[],Matrix)... "", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""submatrix not successfully set"");
            }
        } catch (java.lang.ArrayIndexOutOfBoundsException e1) {
            errorCount = try_failure(errorCount, ""setMatrix(int[],int[],Matrix)... "", ""Unexpected ArrayIndexOutOfBoundsException"");
        }
        print(""\nTesting array-like methods...\n"");
        S = new Matrix(columnwise, nonconformld);
        R = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        A = R;
        try {
            S = A.minus(S);
            errorCount = try_failure(errorCount, ""minus conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""minus conformance check... "", """");
        }
        if (A.minus(R).norm1() != 0.) {
            errorCount = try_failure(errorCount, ""minus... "", ""(difference of identical Matrices is nonzero,\nSubsequent use of minus should be suspect)"");
        } else {
            try_success(""minus... "", """");
        }
        A = R.copy();
        A.minusEquals(R);
        Z = new Matrix(A.getRowDimension(), A.getColumnDimension());
        try {
            A.minusEquals(S);
            errorCount = try_failure(errorCount, ""minusEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""minusEquals conformance check... "", """");
        }
        if (A.minus(Z).norm1() != 0.) {
            errorCount = try_failure(errorCount, ""minusEquals... "", ""(difference of identical Matrices is nonzero,\nSubsequent use of minus should be suspect)"");
        } else {
            try_success(""minusEquals... "", """");
        }
        A = R.copy();
        B = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        C = A.minus(B);
        try {
            S = A.plus(S);
            errorCount = try_failure(errorCount, ""plus conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""plus conformance check... "", """");
        }
        try {
            check(C.plus(B), A);
            try_success(""plus... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""plus... "", ""(C = A - B, but C + B != A)"");
        }
        C = A.minus(B);
        C.plusEquals(B);
        try {
            A.plusEquals(S);
            errorCount = try_failure(errorCount, ""plusEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""plusEquals conformance check... "", """");
        }
        try {
            check(C, A);
            try_success(""plusEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""plusEquals... "", ""(C = A - B, but C = C + B != A)"");
        }
        A = R.uminus();
        try {
            check(A.plus(R), Z);
            try_success(""uminus... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""uminus... "", ""(-A + A != zeros)"");
        }
        A = R.copy();
        O = new Matrix(A.getRowDimension(), A.getColumnDimension(), 1.0);
        C = A.arrayLeftDivide(R);
        try {
            S = A.arrayLeftDivide(S);
            errorCount = try_failure(errorCount, ""arrayLeftDivide conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayLeftDivide conformance check... "", """");
        }
        try {
            check(C, O);
            try_success(""arrayLeftDivide... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayLeftDivide... "", ""(M.\\M != ones)"");
        }
        try {
            A.arrayLeftDivideEquals(S);
            errorCount = try_failure(errorCount, ""arrayLeftDivideEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayLeftDivideEquals conformance check... "", """");
        }
        A.arrayLeftDivideEquals(R);
        try {
            check(A, O);
            try_success(""arrayLeftDivideEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayLeftDivideEquals... "", ""(M.\\M != ones)"");
        }
        A = R.copy();
        try {
            A.arrayRightDivide(S);
            errorCount = try_failure(errorCount, ""arrayRightDivide conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayRightDivide conformance check... "", """");
        }
        C = A.arrayRightDivide(R);
        try {
            check(C, O);
            try_success(""arrayRightDivide... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayRightDivide... "", ""(M./M != ones)"");
        }
        try {
            A.arrayRightDivideEquals(S);
            errorCount = try_failure(errorCount, ""arrayRightDivideEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayRightDivideEquals conformance check... "", """");
        }
        A.arrayRightDivideEquals(R);
        try {
            check(A, O);
            try_success(""arrayRightDivideEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayRightDivideEquals... "", ""(M./M != ones)"");
        }
        A = R.copy();
        B = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        try {
            S = A.arrayTimes(S);
            errorCount = try_failure(errorCount, ""arrayTimes conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayTimes conformance check... "", """");
        }
        C = A.arrayTimes(B);
        try {
            check(C.arrayRightDivideEquals(B), A);
            try_success(""arrayTimes... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayTimes... "", ""(A = R, C = A.*B, but C./B != A)"");
        }
        try {
            A.arrayTimesEquals(S);
            errorCount = try_failure(errorCount, ""arrayTimesEquals conformance check... "", ""nonconformance not raised"");
        } catch (IllegalArgumentException e) {
            try_success(""arrayTimesEquals conformance check... "", """");
        }
        A.arrayTimesEquals(B);
        try {
            check(A.arrayRightDivideEquals(B), R);
            try_success(""arrayTimesEquals... "", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""arrayTimesEquals... "", ""(A = R, A = A.*B, but A./B != R)"");
        }
        print(""\nTesting I/O methods...\n"");
        try {
            DecimalFormat fmt = new DecimalFormat(""0.0000E00"");
            fmt.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
            PrintWriter FILE = new PrintWriter(new FileOutputStream(""JamaTestMatrix.out""));
            A.print(FILE, fmt, 10);
            FILE.close();
            R = Matrix.read(new BufferedReader(new FileReader(""JamaTestMatrix.out"")));
            if (A.minus(R).norm1() < .001) {
                try_success(""print()/read()..."", """");
            } else {
                errorCount = try_failure(errorCount, ""print()/read()..."", ""Matrix read from file does not match Matrix printed to file"");
            }
        } catch (java.io.IOException ioe) {
            warningCount = try_warning(warningCount, ""print()/read()..."", ""unexpected I/O error, unable to run print/read test;  check write permission in current directory and retry"");
        } catch (Exception e) {
            try {
                e.printStackTrace(System.out);
                warningCount = try_warning(warningCount, ""print()/read()..."", ""Formatting error... will try JDK1.1 reformulation..."");
                DecimalFormat fmt = new DecimalFormat(""0.0000"");
                PrintWriter FILE = new PrintWriter(new FileOutputStream(""JamaTestMatrix.out""));
                A.print(FILE, fmt, 10);
                FILE.close();
                R = Matrix.read(new BufferedReader(new FileReader(""JamaTestMatrix.out"")));
                if (A.minus(R).norm1() < .001) {
                    try_success(""print()/read()..."", """");
                } else {
                    errorCount = try_failure(errorCount, ""print()/read() (2nd attempt) ..."", ""Matrix read from file does not match Matrix printed to file"");
                }
            } catch (java.io.IOException ioe) {
                warningCount = try_warning(warningCount, ""print()/read()..."", ""unexpected I/O error, unable to run print/read test;  check write permission in current directory and retry"");
            }
        }
        R = Matrix.random(A.getRowDimension(), A.getColumnDimension());
        String tmpname = ""TMPMATRIX.serial"";
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(tmpname));
            out.writeObject(R);
            ObjectInputStream sin = new ObjectInputStream(new FileInputStream(tmpname));
            A = (Matrix) sin.readObject();
            try {
                check(A, R);
                try_success(""writeObject(Matrix)/readObject(Matrix)..."", """");
            } catch (java.lang.RuntimeException e) {
                errorCount = try_failure(errorCount, ""writeObject(Matrix)/readObject(Matrix)..."", ""Matrix not serialized correctly"");
            }
        } catch (java.io.IOException ioe) {
            warningCount = try_warning(warningCount, ""writeObject()/readObject()..."", ""unexpected I/O error, unable to run serialization test;  check write permission in current directory and retry"");
        } catch (Exception e) {
            errorCount = try_failure(errorCount, ""writeObject(Matrix)/readObject(Matrix)..."", ""unexpected error in serialization test"");
        }
        print(""\nTesting linear algebra methods...\n"");
        A = new Matrix(columnwise, 3);
        T = new Matrix(tvals);
        T = A.transpose();
        try {
            check(A.transpose(), T);
            try_success(""transpose..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""transpose()..."", ""transpose unsuccessful"");
        }
        A.transpose();
        try {
            check(A.norm1(), columnsummax);
            try_success(""norm1..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""norm1()..."", ""incorrect norm calculation"");
        }
        try {
            check(A.normInf(), rowsummax);
            try_success(""normInf()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""normInf()..."", ""incorrect norm calculation"");
        }
        try {
            check(A.normF(), Math.sqrt(sumofsquares));
            try_success(""normF..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""normF()..."", ""incorrect norm calculation"");
        }
        try {
            check(A.trace(), sumofdiagonals);
            try_success(""trace()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""trace()..."", ""incorrect trace calculation"");
        }
        try {
            check(A.getMatrix(0, A.getRowDimension() - 1, 0, A.getRowDimension() - 1).det(), 0.);
            try_success(""det()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""det()..."", ""incorrect determinant calculation"");
        }
        SQ = new Matrix(square);
        try {
            check(A.times(A.transpose()), SQ);
            try_success(""times(Matrix)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""times(Matrix)..."", ""incorrect Matrix-Matrix product calculation"");
        }
        try {
            check(A.times(0.), Z);
            try_success(""times(double)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""times(double)..."", ""incorrect Matrix-scalar product calculation"");
        }
        A = new Matrix(columnwise, 4);
        QRDecomposition QR = A.qr();
        R = QR.getR();
        try {
            check(A, QR.getQ().times(R));
            try_success(""QRDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""QRDecomposition..."", ""incorrect QR decomposition calculation"");
        }
        SingularValueDecomposition SVD = A.svd();
        try {
            check(A, SVD.getU().times(SVD.getS().times(SVD.getV().transpose())));
            try_success(""SingularValueDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""SingularValueDecomposition..."", ""incorrect singular value decomposition calculation"");
        }
        DEF = new Matrix(rankdef);
        try {
            check(DEF.rank(), Math.min(DEF.getRowDimension(), DEF.getColumnDimension()) - 1);
            try_success(""rank()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""rank()..."", ""incorrect rank calculation"");
        }
        B = new Matrix(condmat);
        SVD = B.svd();
        double[] singularvalues = SVD.getSingularValues();
        try {
            check(B.cond(), singularvalues[0] / singularvalues[Math.min(B.getRowDimension(), B.getColumnDimension()) - 1]);
            try_success(""cond()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""cond()..."", ""incorrect condition number calculation"");
        }
        int n = A.getColumnDimension();
        A = A.getMatrix(0, n - 1, 0, n - 1);
        A.set(0, 0, 0.);
        LUDecomposition LU = A.lu();
        try {
            check(A.getMatrix(LU.getPivot(), 0, n - 1), LU.getL().times(LU.getU()));
            try_success(""LUDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""LUDecomposition..."", ""incorrect LU decomposition calculation"");
        }
        X = A.inverse();
        try {
            check(A.times(X), Matrix.identity(3, 3));
            try_success(""inverse()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""inverse()..."", ""incorrect inverse calculation"");
        }
        O = new Matrix(SUB.getRowDimension(), 1, 1.0);
        SOL = new Matrix(sqSolution);
        SQ = SUB.getMatrix(0, SUB.getRowDimension() - 1, 0, SUB.getRowDimension() - 1);
        try {
            check(SQ.solve(SOL), O);
            try_success(""solve()..."", """");
        } catch (java.lang.IllegalArgumentException e1) {
            errorCount = try_failure(errorCount, ""solve()..."", e1.getMessage());
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""solve()..."", e.getMessage());
        }
        A = new Matrix(pvals);
        CholeskyDecomposition Chol = A.chol();
        Matrix L = Chol.getL();
        try {
            check(A, L.times(L.transpose()));
            try_success(""CholeskyDecomposition..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""CholeskyDecomposition..."", ""incorrect Cholesky decomposition calculation"");
        }
        X = Chol.solve(Matrix.identity(3, 3));
        try {
            check(A.times(X), Matrix.identity(3, 3));
            try_success(""CholeskyDecomposition solve()..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""CholeskyDecomposition solve()..."", ""incorrect Choleskydecomposition solve calculation"");
        }
        EigenvalueDecomposition Eig = A.eig();
        Matrix D = Eig.getD();
        Matrix V = Eig.getV();
        try {
            check(A.times(V), V.times(D));
            try_success(""EigenvalueDecomposition (symmetric)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""EigenvalueDecomposition (symmetric)..."", ""incorrect symmetric Eigenvalue decomposition calculation"");
        }
        A = new Matrix(evals);
        Eig = A.eig();
        D = Eig.getD();
        V = Eig.getV();
        try {
            check(A.times(V), V.times(D));
            try_success(""EigenvalueDecomposition (nonsymmetric)..."", """");
        } catch (java.lang.RuntimeException e) {
            errorCount = try_failure(errorCount, ""EigenvalueDecomposition (nonsymmetric)..."", ""incorrect nonsymmetric Eigenvalue decomposition calculation"");
        }
        print(""\nTestMatrix completed.\n"");
        print(""Total errors reported: "" + Integer.toString(errorCount) + ""\n"");
        print(""Total warnings reported: "" + Integer.toString(warningCount) + ""\n"");
    }
"
"    @Override
    public void run() {
        while (run) {
            try {
                URL url = new URL(""http://"" + server.getIp() + ""/"" + tomcat.getName() + ""/ui/pva/version.jsp?RT="" + System.currentTimeMillis());
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), Charset.forName(""UTF-8"")));
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    if (inputLine.contains(""currentversion"")) {
                        String s = inputLine.substring(inputLine.indexOf(""="") + 1, inputLine.length());
                        tomcat.setDetailInfo(s.trim());
                    }
                }
                in.close();
                tomcat.setIsAlive(true);
            } catch (Exception e) {
                tomcat.setIsAlive(false);
            }
            try {
                Thread.sleep(60000);
            } catch (InterruptedException e) {
            }
        }
    }
","                    public void run() {
                        try {
                            HttpPost httpPostRequest = new HttpPost(Feesh.device_URL);
                            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
                            nameValuePairs.add(new BasicNameValuePair(""c"", ""feed""));
                            nameValuePairs.add(new BasicNameValuePair(""amount"", String.valueOf(foodAmount)));
                            nameValuePairs.add(new BasicNameValuePair(""type"", String.valueOf(foodType)));
                            httpPostRequest.setEntity(new UrlEncodedFormEntity(nameValuePairs));
                            HttpResponse httpResponse = (HttpResponse) new DefaultHttpClient().execute(httpPostRequest);
                            HttpEntity entity = httpResponse.getEntity();
                            String resultString = """";
                            if (entity != null) {
                                InputStream instream = entity.getContent();
                                resultString = convertStreamToString(instream);
                                instream.close();
                            }
                            Message msg_toast = new Message();
                            msg_toast.obj = resultString;
                            toast_handler.sendMessage(msg_toast);
                        } catch (UnsupportedEncodingException e) {
                            e.printStackTrace();
                        } catch (ClientProtocolException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
"
"    public String hmacSHA256(String message, byte[] key) {
        MessageDigest sha256 = null;
        try {
            sha256 = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException e) {
            throw new java.lang.AssertionError(this.getClass().getName() + "".hmacSHA256(): SHA-256 algorithm not found!"");
        }
        if (key.length > 64) {
            sha256.update(key);
            key = sha256.digest();
            sha256.reset();
        }
        byte block[] = new byte[64];
        for (int i = 0; i < key.length; ++i) block[i] = key[i];
        for (int i = key.length; i < block.length; ++i) block[i] = 0;
        for (int i = 0; i < 64; ++i) block[i] ^= 0x36;
        sha256.update(block);
        try {
            sha256.update(message.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new java.lang.AssertionError(""ITunesU.hmacSH256(): UTF-8 encoding not supported!"");
        }
        byte[] hash = sha256.digest();
        sha256.reset();
        for (int i = 0; i < 64; ++i) block[i] ^= (0x36 ^ 0x5c);
        sha256.update(block);
        sha256.update(hash);
        hash = sha256.digest();
        char[] hexadecimals = new char[hash.length * 2];
        for (int i = 0; i < hash.length; ++i) {
            for (int j = 0; j < 2; ++j) {
                int value = (hash[i] >> (4 - 4 * j)) & 0xf;
                char base = (value < 10) ? ('0') : ('a' - 10);
                hexadecimals[i * 2 + j] = (char) (base + value);
            }
        }
        return new String(hexadecimals);
    }
","    public static void main(String[] args) throws Exception {
        long start = System.currentTimeMillis();
        XSLTBuddy buddy = new XSLTBuddy();
        buddy.parseArgs(args);
        XSLTransformer transformer = new XSLTransformer();
        if (buddy.templateDir != null) {
            transformer.setTemplateDir(buddy.templateDir);
        }
        FileReader xslReader = new FileReader(buddy.xsl);
        Templates xslTemplate = transformer.getXSLTemplate(buddy.xsl, xslReader);
        for (Enumeration e = buddy.params.keys(); e.hasMoreElements(); ) {
            String key = (String) e.nextElement();
            transformer.addParam(key, buddy.params.get(key));
        }
        Reader reader = null;
        if (buddy.src == null) {
            reader = new StringReader(XSLTBuddy.BLANK_XML);
        } else {
            reader = new FileReader(buddy.src);
        }
        if (buddy.out == null) {
            String result = transformer.doTransform(reader, xslTemplate, buddy.xsl);
            buddy.getLogger().info(""\n\nXSLT Result:\n\n"" + result + ""\n"");
        } else {
            File file = new File(buddy.out);
            File dir = file.getParentFile();
            if (dir != null) {
                dir.mkdirs();
            }
            FileWriter writer = new FileWriter(buddy.out);
            transformer.doTransform(reader, xslTemplate, buddy.xsl, writer);
            writer.flush();
            writer.close();
        }
        buddy.getLogger().info(""Transform done successfully in "" + (System.currentTimeMillis() - start) + "" milliseconds"");
    }
"
"    private static String getDigest(String srcStr, String alg) {
        Assert.notNull(srcStr);
        Assert.notNull(alg);
        try {
            MessageDigest alga = MessageDigest.getInstance(alg);
            alga.update(srcStr.getBytes());
            byte[] digesta = alga.digest();
            return byte2hex(digesta);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public void displayItems() throws IOException {
        URL url = new URL(SNIPPETS_FEED + ""?bq="" + URLEncoder.encode(QUERY, ""UTF-8"") + ""&key="" + DEVELOPER_KEY);
        HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
        InputStream inputStream = httpConnection.getInputStream();
        int ch;
        while ((ch = inputStream.read()) > 0) {
            System.out.print((char) ch);
        }
    }
"
"    protected void copyFile(File source, File destination) throws ApplicationException {
        try {
            OutputStream out = new FileOutputStream(destination);
            DataInputStream in = new DataInputStream(new FileInputStream(source));
            byte[] buf = new byte[8192];
            for (int nread = in.read(buf); nread > 0; nread = in.read(buf)) {
                out.write(buf, 0, nread);
            }
            in.close();
            out.close();
        } catch (IOException e) {
            throw new ApplicationException(""Can't copy file "" + source + "" to "" + destination);
        }
    }
","    public SCFFile(URL url) throws IOException {
        URLConnection connection = url.openConnection();
        byte[] content = new byte[connection.getContentLength()];
        DataInputStream dis = new DataInputStream(connection.getInputStream());
        dis.readFully(content);
        dis.close();
        dis = new DataInputStream(new ByteArrayInputStream(content));
        header = new SCFHeader(dis);
        if (!header.magicNumber.equals("".scf"")) throw new RuntimeException(url + "" is not an SCF file"");
        A = new int[header.samples];
        C = new int[header.samples];
        G = new int[header.samples];
        T = new int[header.samples];
        max = Integer.MIN_VALUE;
        dis.reset();
        dis.skipBytes(header.samplesOffset);
        if (header.sampleSize == 1) {
            if (header.version < 3.00) {
                for (int i = 0; i < header.samples; ++i) {
                    A[i] = dis.readUnsignedByte();
                    if (A[i] > max) max = A[i];
                    C[i] = dis.readUnsignedByte();
                    if (C[i] > max) max = C[i];
                    G[i] = dis.readUnsignedByte();
                    if (G[i] > max) max = G[i];
                    T[i] = dis.readUnsignedByte();
                    if (T[i] > max) max = T[i];
                }
            } else {
                for (int i = 0; i < header.samples; ++i) {
                    A[i] = dis.readUnsignedByte();
                    if (A[i] > max) max = A[i];
                }
                for (int i = 0; i < header.samples; ++i) {
                    C[i] = dis.readUnsignedByte();
                    if (C[i] > max) max = C[i];
                }
                for (int i = 0; i < header.samples; ++i) {
                    G[i] = dis.readUnsignedByte();
                    if (G[i] > max) max = G[i];
                }
                for (int i = 0; i < header.samples; ++i) {
                    T[i] = dis.readUnsignedByte();
                    if (T[i] > max) max = T[i];
                }
            }
        } else if (header.sampleSize == 2) {
            if (header.version < 3.00) {
                for (int i = 0; i < header.samples; ++i) {
                    A[i] = dis.readUnsignedShort();
                    if (A[i] > max) max = A[i];
                    C[i] = dis.readUnsignedShort();
                    if (C[i] > max) max = C[i];
                    G[i] = dis.readUnsignedShort();
                    if (G[i] > max) max = G[i];
                    T[i] = dis.readUnsignedShort();
                    if (T[i] > max) max = T[i];
                }
            } else {
                for (int i = 0; i < header.samples; ++i) {
                    A[i] = dis.readUnsignedShort();
                    if (A[i] > max) max = A[i];
                }
                for (int i = 0; i < header.samples; ++i) {
                    C[i] = dis.readUnsignedShort();
                    if (C[i] > max) max = C[i];
                }
                for (int i = 0; i < header.samples; ++i) {
                    G[i] = dis.readUnsignedShort();
                    if (G[i] > max) max = G[i];
                }
                for (int i = 0; i < header.samples; ++i) {
                    T[i] = dis.readUnsignedShort();
                    if (T[i] > max) max = T[i];
                }
            }
        }
        centers = new int[header.bases];
        byte[] buf = new byte[header.bases];
        dis.reset();
        dis.skipBytes(header.basesOffset);
        if (header.version < 3.00) {
            for (int i = 0; i < header.bases; ++i) {
                centers[i] = dis.readInt();
                dis.skipBytes(4);
                buf[i] = dis.readByte();
                dis.skipBytes(3);
            }
        } else {
            for (int i = 0; i < header.bases; ++i) centers[i] = dis.readInt();
            dis.skipBytes(4 * header.bases);
            dis.readFully(buf);
        }
        sequence = new String(buf);
        dis.close();
    }
"
"    public Model read(String uri, String base, String lang) {
        try {
            URL url = new URL(uri);
            return read(url.openStream(), base, lang);
        } catch (IOException e) {
            throw new OntologyException(""I/O error while reading from uri "" + uri);
        }
    }
","    public static ObjectID[] sortDecending(ObjectID[] oids) {
        for (int i = 1; i < oids.length; i++) {
            ObjectID iId = oids[i];
            for (int j = 0; j < oids.length - i; j++) {
                if (oids[j].getTypePrefix() > oids[j + 1].getTypePrefix()) {
                    ObjectID temp = oids[j];
                    oids[j] = oids[j + 1];
                    oids[j + 1] = temp;
                }
            }
        }
        return oids;
    }
"
"    static void reopen(MJIEnv env, int objref) throws IOException {
        int fd = env.getIntField(objref, ""fd"");
        long off = env.getLongField(objref, ""off"");
        if (content.get(fd) == null) {
            int mode = env.getIntField(objref, ""mode"");
            int fnRef = env.getReferenceField(objref, ""fileName"");
            String fname = env.getStringObject(fnRef);
            if (mode == FD_READ) {
                FileInputStream fis = new FileInputStream(fname);
                FileChannel fc = fis.getChannel();
                fc.position(off);
                content.set(fd, fis);
            } else if (mode == FD_WRITE) {
                FileOutputStream fos = new FileOutputStream(fname);
                FileChannel fc = fos.getChannel();
                fc.position(off);
                content.set(fd, fos);
            } else {
                env.throwException(""java.io.IOException"", ""illegal mode: "" + mode);
            }
        }
    }
","    private void auth() throws IOException {
        authorized = false;
        seqNumber = 0;
        DatagramSocket ds = new DatagramSocket();
        ds.setSoTimeout(UDPHID_DEFAULT_TIMEOUT);
        ds.connect(addr, port);
        DatagramPacket p = new DatagramPacket(buffer.array(), buffer.capacity());
        for (int i = 0; i < UDPHID_DEFAULT_ATTEMPTS; i++) {
            buffer.clear();
            buffer.put((byte) REQ_CHALLENGE);
            buffer.put(htons((short) UDPHID_PROTO));
            buffer.put(name.getBytes());
            ds.send(new DatagramPacket(buffer.array(), buffer.position()));
            buffer.clear();
            try {
                ds.receive(p);
            } catch (SocketTimeoutException e) {
                continue;
            }
            switch(buffer.get()) {
                case ANS_CHALLENGE:
                    break;
                case ANS_FAILURE:
                    throw new IOException(""REQ_FAILURE"");
                default:
                    throw new IOException(""invalid packet"");
            }
            byte challenge_id = buffer.get();
            int challenge_len = (int) buffer.get();
            byte[] challenge = new byte[challenge_len];
            buffer.get(challenge, 0, p.getLength() - buffer.position());
            byte[] response;
            try {
                MessageDigest md = MessageDigest.getInstance(""MD5"");
                md.update(challenge_id);
                md.update(password.getBytes(), 0, password.length());
                md.update(challenge, 0, challenge.length);
                response = md.digest();
            } catch (NoSuchAlgorithmException e) {
                throw new IOException(""NoSuchAlgorithmException: "" + e.toString());
            }
            buffer.clear();
            buffer.put((byte) REQ_RESPONSE);
            buffer.put(challenge_id);
            buffer.put((byte) response.length);
            buffer.put(response);
            buffer.put(login.getBytes());
            ds.send(new DatagramPacket(buffer.array(), buffer.position()));
            buffer.clear();
            try {
                ds.receive(p);
            } catch (SocketTimeoutException e) {
                continue;
            }
            switch(buffer.get()) {
                case ANS_SUCCESS:
                    int sidLength = buffer.get();
                    sid = new byte[sidLength];
                    buffer.get(sid, 0, sidLength);
                    authorized = true;
                    return;
                case ANS_FAILURE:
                    throw new IOException(""access deny"");
                default:
                    throw new IOException(""invalid packet"");
            }
        }
        throw new IOException(""operation time out"");
    }
"
"    public void setKey(String key) {
        MessageDigest md5;
        byte[] mdKey = new byte[32];
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.update(key.getBytes());
            byte[] digest = md5.digest();
            System.arraycopy(digest, 0, mdKey, 0, 16);
            System.arraycopy(digest, 0, mdKey, 16, 16);
        } catch (Exception e) {
            System.out.println(""MD5 not implemented, can't generate key out of string!"");
            System.exit(1);
        }
        setKey(mdKey);
    }
","    public static String getWebPage(URL urlObj) {
        try {
            String content = """";
            InputStreamReader is = new InputStreamReader(urlObj.openStream());
            BufferedReader reader = new BufferedReader(is);
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            return content;
        } catch (IOException e) {
            throw new Error(""The page "" + quote(urlObj.toString()) + ""could not be retrieved."" + ""\nThis is could be caused by a number of things:"" + ""\n"" + ""\n  - the computer hosting the web page you want is down, or has returned an error"" + ""\n  - your computer does not have Internet access"" + ""\n  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
"
"    private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) {
        BufferedReader buffReader = null;
        BufferedOutputStream buffOS = null;
        URLConnection urlconnection = null;
        char flagChar = '0';
        boolean flag = true;
        try {
            urlconnection = url.openConnection();
            urlconnection.setDoOutput(true);
            urlconnection.setDoInput(true);
            urlconnection.setUseCaches(false);
            urlconnection.setRequestProperty(""Content-type"", ""application/octet-stream"");
            buffOS = new BufferedOutputStream(urlconnection.getOutputStream());
            buffOS.write((byte[]) typeFlag.getBytes());
            buffOS.write(arrByte);
            buffOS.flush();
            if (Config.DEBUG) System.out.println(""Applet output file successfully! "");
            buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()));
            StringBuffer stringBuff = new StringBuffer();
            String serReturnMess = buffReader.readLine();
            if (Config.DEBUG) System.out.println(""Applet check status successfully! "" + serReturnMess);
            flagChar = '2';
            if (serReturnMess != null) {
                stringBuff.append(serReturnMess);
                serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2';
                flagChar = serReturnMess.charAt(0);
            }
            while ((serReturnMess = buffReader.readLine()) != null) {
                if (serReturnMess.length() <= 0) break;
            }
        } catch (Throwable e) {
            e.printStackTrace();
            return false;
        } finally {
            try {
                if (buffOS != null) buffOS.close();
                if (buffReader != null) buffReader.close();
            } catch (Throwable e) {
                e.printStackTrace();
            }
            if (flagChar == '2' || flagChar == '3') flag = true; else flag = false;
        }
        return flag;
    }
","    private byte[] getFileFromFtp(String remote) throws Exception {
        ftp = new FTPClient();
        int reply;
        ftp.connect(ftpServer);
        reply = ftp.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            ftp.disconnect();
            throw new Exception(""FTP server refused connection."");
        }
        if (!ftp.login(ftpUsername, ftpPassword)) {
            ftp.logout();
            throw new Exception(""Cann't login to ftp."");
        }
        ftp.enterLocalPassiveMode();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ftp.retrieveFile(remote, baos);
        ftp.logout();
        if (ftp.isConnected()) {
            try {
                ftp.disconnect();
            } catch (IOException f) {
            }
        }
        return baos.toByteArray();
    }
"
"    @Test
    public void test20_badSmtp() throws Exception {
        Db db = DbConnection.defaultCieDbRW();
        try {
            db.begin();
            oldSmtp = Config.getProperty(db, ""com.entelience.mail.MailHelper.hostName"", ""localhost"");
            oldSupport = Config.getProperty(db, ""com.entelience.esis.feature.SupportNotifier"", false);
            Config.setProperty(db, ""com.entelience.mail.MailHelper.hostName"", ""127.0.10.1"", 1);
            Config.setProperty(db, ""com.entelience.esis.feature.SupportNotifier"", ""true"", 1);
            PreparedStatement pst = db.prepareStatement(""DELETE FROM t_client_errors"");
            db.executeUpdate(pst);
            db.commit();
        } catch (Exception e) {
            db.rollback();
        } finally {
            db.safeClose();
        }
    }
","    protected void sort(double[] a) throws Exception {
        for (int i = a.length - 1; i >= 0; i--) {
            boolean swapped = false;
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    double d = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = d;
                    swapped = true;
                }
            }
            if (!swapped) return;
        }
    }
"
"    public static InputStream call(String serviceUrl, Map parameters) throws IOException, RestException {
        StringBuffer urlString = new StringBuffer(serviceUrl);
        String query = RestClient.buildQueryString(parameters);
        HttpURLConnection conn;
        if ((urlString.length() + query.length() + 1) > MAX_URI_LENGTH_FOR_GET) {
            URL url = new URL(urlString.toString());
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestProperty(""User-Agent"", USER_AGENT_STRING);
            conn.setRequestMethod(""POST"");
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            conn.setDoOutput(true);
            conn.getOutputStream().write(query.getBytes());
        } else {
            if (query.length() > 0) {
                urlString.append(""?"").append(query);
            }
            URL url = new URL(urlString.toString());
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestProperty(""User-Agent"", USER_AGENT_STRING);
            conn.setRequestMethod(""GET"");
        }
        int responseCode = conn.getResponseCode();
        if (HttpURLConnection.HTTP_OK != responseCode) {
            ByteArrayOutputStream errorBuffer = new ByteArrayOutputStream();
            int read;
            byte[] readBuffer = new byte[ERROR_READ_BUFFER_SIZE];
            InputStream errorStream = conn.getErrorStream();
            while (-1 != (read = errorStream.read(readBuffer))) {
                errorBuffer.write(readBuffer, 0, read);
            }
            throw new RestException(""Request failed, HTTP "" + responseCode + "": "" + conn.getResponseMessage(), errorBuffer.toByteArray());
        }
        return conn.getInputStream();
    }
","    private void updateSystem() throws IOException {
          String stringUrl=""http://code.google.com/p/senai-pe-cronos/downloads/list"";
        try {
            url = new URL(stringUrl);
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }
        InputStream is = url.openStream();   
InputStreamReader isr = new InputStreamReader(is);   
BufferedReader br = new BufferedReader(isr);   
  
String linha = br.readLine();  
  
while (linha != null) { 
    linha = br.readLine();  
   
   if(linha.contains(""/files/updateCronos-0-"")){
   String[] s=linha.split(""-"");
   String[] v=s[4].split("".exe"");
   versao=v[0];
   println(""----""+versao);
  
  break;
}   

}
      
stringUrl=""http://senai-pe-cronos.googlecode.com/files/updateCronos-0-""+versao+"".exe"";
UpdateCronos update=new UpdateCronos();
        try {
            url = new URL(stringUrl);
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }       
System.out.println(""versão:""+versao);
         if(Integer.parseInt(versao)>version){
              
             File f = update.gravaArquivoDeURL(url,System.getProperty(""user.dir""),String.valueOf(version),versao);
            
             
            
             if(update.isS()) {
                 Runtime.getRuntime().exec(location+""\\update.exe"");
                 System.exit(0);
         }
         }

          
    }
"
"    public void addGames(List<Game> games) throws StadiumException, SQLException {
        Connection conn = ConnectionManager.getManager().getConnection();
        conn.setAutoCommit(false);
        PreparedStatement stm = null;
        ResultSet rs = null;
        try {
            for (Game game : games) {
                stm = conn.prepareStatement(Statements.SELECT_STADIUM);
                stm.setString(1, game.getStadiumName());
                stm.setString(2, game.getStadiumCity());
                rs = stm.executeQuery();
                int stadiumId = -1;
                while (rs.next()) {
                    stadiumId = rs.getInt(""stadiumID"");
                }
                if (stadiumId == -1) throw new StadiumException(""No such stadium"");
                stm = conn.prepareStatement(Statements.INSERT_GAME);
                stm.setInt(1, stadiumId);
                stm.setDate(2, game.getGameDate());
                stm.setTime(3, game.getGameTime());
                stm.setString(4, game.getTeamA());
                stm.setString(5, game.getTeamB());
                stm.executeUpdate();
                int gameId = getMaxId();
                List<SectorPrice> sectorPrices = game.getSectorPrices();
                for (SectorPrice price : sectorPrices) {
                    stm = conn.prepareStatement(Statements.INSERT_TICKET_PRICE);
                    stm.setInt(1, gameId);
                    stm.setInt(2, price.getSectorId());
                    stm.setInt(3, price.getPrice());
                    stm.executeUpdate();
                }
            }
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            rs.close();
            stm.close();
        }
        conn.commit();
        conn.setAutoCommit(true);
    }
","    public void getZipFiles(String filename) {
        try {
            String destinationname = ""c:\\mods\\peu\\"";
            byte[] buf = new byte[1024];
            ZipInputStream zipinputstream = null;
            ZipEntry zipentry;
            zipinputstream = new ZipInputStream(new FileInputStream(filename));
            zipentry = zipinputstream.getNextEntry();
            while (zipentry != null) {
                String entryName = zipentry.getName();
                System.out.println(""entryname "" + entryName);
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(entryName);
                String directory = newFile.getParent();
                if (directory == null) {
                    if (newFile.isDirectory()) break;
                }
                fileoutputstream = new FileOutputStream(destinationname + entryName);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
                zipentry = zipinputstream.getNextEntry();
            }
            zipinputstream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
"
"    public static void getGPX(String gpxURL, String fName) {
        try {
            URL url = new URL(gpxURL);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setRequestMethod(""GET"");
            urlConnection.setDoOutput(true);
            urlConnection.connect();
            File storage = mContext.getExternalFilesDir(null);
            File file = new File(storage, fName);
            FileOutputStream os = new FileOutputStream(file);
            InputStream is = urlConnection.getInputStream();
            byte[] buffer = new byte[1024];
            int bufferLength = 0;
            while ((bufferLength = is.read(buffer)) > 0) {
                os.write(buffer, 0, bufferLength);
            }
            os.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","        @Override
        public void executeInterruptible() {
            encodingTerminated = false;
            File destinationFile = null;
            try {
                Runtime runtime = Runtime.getRuntime();
                IconAndFileListElement element;
                while ((element = getNextFileElement()) != null) {
                    File origFile = element.getFile();
                    destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName());
                    if (!destinationFile.getParentFile().exists()) {
                        destinationFile.getParentFile().mkdirs();
                    }
                    actualFileLabel.setText(origFile.getName());
                    actualFileModel.setMaximum((int) origFile.length());
                    actualFileModel.setValue(0);
                    int bitrate;
                    synchronized (bitratePattern) {
                        Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue());
                        bitrateMatcher.find();
                        bitrate = Integer.parseInt(bitrateMatcher.group(1));
                    }
                    List<String> command = new LinkedList<String>();
                    command.add(encoderFile.getCanonicalPath());
                    command.add(""--mp3input"");
                    command.add(""-m"");
                    command.add(""j"");
                    String sampleFreq = Settings.getSetting(""encode.sample.freq"");
                    if (Util.isNotEmpty(sampleFreq)) {
                        command.add(""--resample"");
                        command.add(sampleFreq);
                    }
                    QualityElement quality = (QualityElement) ((JComboBox) encodeFileCard.getQuality().getValueComponent()).getSelectedItem();
                    command.add(""-q"");
                    command.add(Integer.toString(quality.getValue()));
                    command.add(""-b"");
                    command.add(Integer.toString(bitrate));
                    command.add(""--cbr"");
                    command.add(""-"");
                    command.add(destinationFile.getCanonicalPath());
                    if (LOG.isDebugEnabled()) {
                        StringBuilder commandLine = new StringBuilder();
                        boolean first = true;
                        for (String part : command) {
                            if (!first) commandLine.append("" "");
                            commandLine.append(part);
                            first = false;
                        }
                        LOG.debug(""Command line: "" + commandLine.toString());
                    }
                    encodingProcess = runtime.exec(command.toArray(new String[0]));
                    lastPosition = 0l;
                    InputStream fileStream = null;
                    try {
                        fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this);
                        IOUtils.copy(fileStream, encodingProcess.getOutputStream());
                        encodingProcess.getOutputStream().close();
                    } finally {
                        IOUtils.closeQuietly(fileStream);
                        if (LOG.isDebugEnabled()) {
                            InputStream processOut = null;
                            try {
                                processOut = encodingProcess.getInputStream();
                                StringWriter sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug(""Process output stream:\n"" + sw);
                                IOUtils.closeQuietly(processOut);
                                processOut = encodingProcess.getErrorStream();
                                sw = new StringWriter();
                                IOUtils.copy(processOut, sw);
                                LOG.debug(""Process error stream:\n"" + sw);
                            } finally {
                                IOUtils.closeQuietly(processOut);
                            }
                        }
                    }
                    int result = encodingProcess.waitFor();
                    encodingProcess = null;
                    if (result != 0) {
                        LOG.warn(""Encoder process returned error code "" + result);
                    }
                    if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) {
                        MP3File mp3Input = new MP3File(origFile);
                        MP3File mp3Output = new MP3File(destinationFile);
                        boolean write = false;
                        if (mp3Input.hasID3v2tag()) {
                            ID3v2Tag id3v2Tag = new ID3v2Tag();
                            for (ID3v2Frame frame : mp3Input.getID3v2tag().getAllframes()) {
                                id3v2Tag.addFrame(frame);
                            }
                            mp3Output.setID3v2tag(id3v2Tag);
                            write = true;
                        }
                        if (mp3Input.hasID3v11tag()) {
                            mp3Output.setID3v11tag(mp3Input.getID3v11tag());
                            write = true;
                        }
                        if (write) mp3Output.write();
                    }
                }
                actualFileLabel.setText(Messages.getString(""operations.file.encode.execute.actualfile.terminated""));
                actualFileModel.setValue(actualFileModel.getMaximum());
            } catch (Exception e) {
                LOG.error(""Cannot encode files"", e);
                if (!(e instanceof IOException && encodingTerminated)) MainWindowInterface.showError(e);
                if (destinationFile != null) destinationFile.delete();
            }
        }
"
"    public <T extends FetionResponse> T executeAction(FetionAction<T> fetionAction) throws IOException {
        URL url = new URL(fetionAction.getProtocol().name().toLowerCase() + ""://"" + fetionUrl + fetionAction.getRequestData());
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        byte[] buffer = new byte[10240];
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        int read = 0;
        while ((read = in.read(buffer)) > 0) {
            bout.write(buffer, 0, read);
        }
        return fetionAction.processResponse(parseRawResponse(bout.toByteArray()));
    }
","    public int[] sort() {
        int i, tmp;
        int[] newIndex = new int[nrows];
        for (i = 0; i < nrows; i++) {
            newIndex[i] = i;
        }
        boolean change = true;
        if (this.ascending) {
            if (data[0][column] instanceof Comparable) {
                while (change) {
                    change = false;
                    for (i = 0; i < nrows - 1; i++) {
                        if (((Comparable) data[newIndex[i]][column]).compareTo((Comparable) data[newIndex[i + 1]][column]) > 0) {
                            tmp = newIndex[i];
                            newIndex[i] = newIndex[i + 1];
                            newIndex[i + 1] = tmp;
                            change = true;
                        }
                    }
                }
                return newIndex;
            }
            if (data[0][column] instanceof String || data[0][column] instanceof ClassLabel) {
                while (change) {
                    change = false;
                    for (i = 0; i < nrows - 1; i++) {
                        if ((data[newIndex[i]][column].toString()).compareTo(data[newIndex[i + 1]][column].toString()) > 0) {
                            tmp = newIndex[i];
                            newIndex[i] = newIndex[i + 1];
                            newIndex[i + 1] = tmp;
                            change = true;
                        }
                    }
                }
            }
            return newIndex;
        }
        if (!this.ascending) {
            if (data[0][column] instanceof Comparable) {
                while (change) {
                    change = false;
                    for (i = 0; i < nrows - 1; i++) {
                        if (((Comparable) data[newIndex[i]][column]).compareTo((Comparable) data[newIndex[i + 1]][column]) < 0) {
                            tmp = newIndex[i];
                            newIndex[i] = newIndex[i + 1];
                            newIndex[i + 1] = tmp;
                            change = true;
                        }
                    }
                }
                return newIndex;
            }
            if (data[0][column] instanceof String || data[0][column] instanceof ClassLabel) {
                while (change) {
                    change = false;
                    for (i = 0; i < nrows - 1; i++) {
                        if ((data[newIndex[i]][column].toString()).compareTo(data[newIndex[i + 1]][column].toString()) < 0) {
                            tmp = newIndex[i];
                            newIndex[i] = newIndex[i + 1];
                            newIndex[i + 1] = tmp;
                            change = true;
                        }
                    }
                }
            }
            return newIndex;
        } else return newIndex;
    }
"
"    protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) {
        String annotClass = par.annotation.getType().substring(1, par.annotation.getType().length() - 1).replace('/', '.');
        String methodName = getMethodName(par);
        String hashKey = annotClass + CLASS_SIG_SEPARATOR_STRING + methodName;
        PredicateAnnotationRecord gr = _generatedPredicateRecords.get(hashKey);
        if (gr != null) {
            _sharedAddData.cacheInfo.incCombinePredicateCacheHit();
            return gr;
        } else {
            _sharedAddData.cacheInfo.incCombinePredicateCacheMiss();
        }
        String predicateClass = ((_predicatePackage.length() > 0) ? (_predicatePackage + ""."") : """") + annotClass + ""Pred"";
        ClassFile predicateCF = null;
        File clonedFile = new File(_predicatePackageDir, annotClass.replace('.', '/') + ""Pred.class"");
        if (clonedFile.exists() && clonedFile.isFile() && clonedFile.canRead()) {
            try {
                predicateCF = new ClassFile(new FileInputStream(clonedFile));
            } catch (IOException ioe) {
                throw new ThreadCheckException(""Could not open predicate class file, source="" + clonedFile, ioe);
            }
        } else {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                _templatePredicateClassFile.write(baos);
                predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray()));
            } catch (IOException ioe) {
                throw new ThreadCheckException(""Could not open predicate template class file"", ioe);
            }
        }
        clonedFile.getParentFile().mkdirs();
        final ArrayList<String> paramNames = new ArrayList<String>();
        final HashMap<String, String> paramTypes = new HashMap<String, String>();
        performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() {

            public Object apply(String param1, String param2, AAnnotationsAttributeInfo.Annotation.AMemberValue param3) {
                paramNames.add(param1);
                paramTypes.put(param1, param2);
                return null;
            }
        }, """");
        ArrayList<PredicateAnnotationRecord> memberPARs = new ArrayList<PredicateAnnotationRecord>();
        for (String key : par.combinedPredicates.keySet()) {
            for (PredicateAnnotationRecord memberPAR : par.combinedPredicates.get(key)) {
                if ((memberPAR.predicateClass != null) && (memberPAR.predicateMI != null)) {
                    memberPARs.add(memberPAR);
                } else {
                    memberPARs.add(generatePredicateAnnotationRecord(memberPAR, miDescriptor));
                }
            }
        }
        AUTFPoolInfo predicateClassNameItem = new ASCIIPoolInfo(predicateClass.replace('.', '/'), predicateCF.getConstantPool());
        int[] l = predicateCF.addConstantPoolItems(new APoolInfo[] { predicateClassNameItem });
        predicateClassNameItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null);
        ClassPoolInfo predicateClassItem = new ClassPoolInfo(predicateClassNameItem, predicateCF.getConstantPool());
        l = predicateCF.addConstantPoolItems(new APoolInfo[] { predicateClassItem });
        predicateClassItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckClassVisitor.singleton(), null);
        predicateCF.setThisClass(predicateClassItem);
        StringBuilder sb = new StringBuilder();
        sb.append(""(Ljava/lang/Object;"");
        if (par.passArguments) {
            sb.append(""[Ljava/lang/Object;"");
        }
        for (String key : paramNames) {
            sb.append(paramTypes.get(key));
        }
        sb.append("")Z"");
        String methodDesc = sb.toString();
        MethodInfo templateMI = null;
        MethodInfo predicateMI = null;
        for (MethodInfo mi : predicateCF.getMethods()) {
            if ((mi.getName().toString().equals(methodName)) && (mi.getDescriptor().toString().equals(methodDesc))) {
                predicateMI = mi;
                break;
            } else if ((mi.getName().toString().equals(""template"")) && (mi.getDescriptor().toString().startsWith(""("")) && (mi.getDescriptor().toString().endsWith("")Z""))) {
                templateMI = mi;
            }
        }
        if ((templateMI == null) && (predicateMI == null)) {
            throw new ThreadCheckException(""Could not find template predicate method in class file"");
        }
        if (predicateMI == null) {
            AUTFPoolInfo namecpi = new ASCIIPoolInfo(methodName, predicateCF.getConstantPool());
            l = predicateCF.addConstantPoolItems(new APoolInfo[] { namecpi });
            namecpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null);
            AUTFPoolInfo descpi = new ASCIIPoolInfo(methodDesc, predicateCF.getConstantPool());
            l = predicateCF.addConstantPoolItems(new APoolInfo[] { descpi });
            descpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null);
            ArrayList<AAttributeInfo> list = new ArrayList<AAttributeInfo>();
            for (AAttributeInfo a : templateMI.getAttributes()) {
                try {
                    AAttributeInfo clonedA = (AAttributeInfo) a.clone();
                    list.add(clonedA);
                } catch (CloneNotSupportedException e) {
                    throw new InstrumentorException(""Could not clone method attributes"");
                }
            }
            predicateMI = new MethodInfo(templateMI.getAccessFlags(), namecpi, descpi, list.toArray(new AAttributeInfo[] {}));
            predicateCF.getMethods().add(predicateMI);
            CodeAttributeInfo.CodeProperties props = predicateMI.getCodeAttributeInfo().getProperties();
            props.maxLocals += paramTypes.size() + 1 + (par.passArguments ? 1 : 0);
            InstructionList il = new InstructionList(predicateMI.getCodeAttributeInfo().getCode());
            if ((par.combineMode == Combine.Mode.OR) || (par.combineMode == Combine.Mode.XOR) || (par.combineMode == Combine.Mode.IMPLIES)) {
                il.insertInstr(new GenericInstruction(Opcode.ICONST_0), predicateMI.getCodeAttributeInfo());
            } else {
                il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
            }
            boolean res;
            res = il.advanceIndex();
            assert res == true;
            int accumVarIndex = props.maxLocals - 1;
            AInstruction loadAccumInstr;
            AInstruction storeAccumInstr;
            if (accumVarIndex < 256) {
                loadAccumInstr = new GenericInstruction(Opcode.ILOAD, (byte) accumVarIndex);
                storeAccumInstr = new GenericInstruction(Opcode.ISTORE, (byte) accumVarIndex);
            } else {
                byte[] bytes = new byte[] { Opcode.ILOAD, 0, 0 };
                Types.bytesFromShort((short) accumVarIndex, bytes, 1);
                loadAccumInstr = new WideInstruction(bytes);
                bytes[0] = Opcode.ISTORE;
                storeAccumInstr = new WideInstruction(bytes);
            }
            il.insertInstr(storeAccumInstr, predicateMI.getCodeAttributeInfo());
            res = il.advanceIndex();
            assert res == true;
            int maxStack = 0;
            int paramIndex = 1;
            int lvIndex = 1;
            if (par.passArguments) {
                lvIndex += 1;
            }
            int memberCount = 0;
            for (PredicateAnnotationRecord memberPAR : memberPARs) {
                ++memberCount;
                il.insertInstr(new GenericInstruction(Opcode.ALOAD_0), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                int curStack = 1;
                if (memberPAR.passArguments) {
                    if (par.passArguments) {
                        il.insertInstr(new GenericInstruction(Opcode.ALOAD_1), predicateMI.getCodeAttributeInfo());
                        res = il.advanceIndex();
                        assert res == true;
                        curStack += 1;
                    }
                }
                for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) {
                    String t = memberPAR.paramTypes.get(memberPAR.paramNames.get(paramNameIndex));
                    if (t.length() == 0) {
                        throw new ThreadCheckException(""Length of parameter type no. "" + paramIndex + "" string is 0 in "" + predicateMI.getName() + "" in class "" + predicateCF.getThisClassName());
                    }
                    byte opcode;
                    int nextLVIndex = lvIndex;
                    switch(t.charAt(0)) {
                        case 'I':
                        case 'B':
                        case 'C':
                        case 'S':
                        case 'Z':
                            opcode = Opcode.ILOAD;
                            nextLVIndex += 1;
                            curStack += 1;
                            break;
                        case 'F':
                            opcode = Opcode.FLOAD;
                            nextLVIndex += 1;
                            curStack += 1;
                            break;
                        case '[':
                        case 'L':
                            opcode = Opcode.ALOAD;
                            nextLVIndex += 1;
                            curStack += 1;
                            break;
                        case 'J':
                            opcode = Opcode.LLOAD;
                            nextLVIndex += 2;
                            curStack += 2;
                            break;
                        case 'D':
                            opcode = Opcode.DLOAD;
                            nextLVIndex += 2;
                            curStack += 2;
                            break;
                        default:
                            throw new ThreadCheckException(""Parameter type no. "" + paramIndex + "", "" + t + "", is unknown in "" + predicateMI.getName() + "" in class "" + predicateCF.getThisClassName());
                    }
                    AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex);
                    il.insertInstr(load, predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                    ++paramIndex;
                    lvIndex = nextLVIndex;
                }
                if (curStack > maxStack) {
                    maxStack = curStack;
                }
                ReferenceInstruction predicateCallInstr = new ReferenceInstruction(Opcode.INVOKESTATIC, (short) 0);
                int predicateCallIndex = predicateCF.addMethodToConstantPool(memberPAR.predicateClass.replace('.', '/'), memberPAR.predicateMI.getName().toString(), memberPAR.predicateMI.getDescriptor().toString());
                predicateCallInstr.setReference(predicateCallIndex);
                il.insertInstr(predicateCallInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                if ((par.combineMode == Combine.Mode.NOT) || ((par.combineMode == Combine.Mode.IMPLIES) && (memberCount == 1))) {
                    il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                    il.insertInstr(new GenericInstruction(Opcode.SWAP), predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                    il.insertInstr(new GenericInstruction(Opcode.ISUB), predicateMI.getCodeAttributeInfo());
                    res = il.advanceIndex();
                    assert res == true;
                }
                il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                if (par.combineMode == Combine.Mode.OR) {
                    il.insertInstr(new GenericInstruction(Opcode.IOR), predicateMI.getCodeAttributeInfo());
                } else if ((par.combineMode == Combine.Mode.AND) || (par.combineMode == Combine.Mode.NOT)) {
                    il.insertInstr(new GenericInstruction(Opcode.IAND), predicateMI.getCodeAttributeInfo());
                } else if (par.combineMode == Combine.Mode.XOR) {
                    il.insertInstr(new GenericInstruction(Opcode.IADD), predicateMI.getCodeAttributeInfo());
                } else if (par.combineMode == Combine.Mode.IMPLIES) {
                    il.insertInstr(new GenericInstruction(Opcode.IOR), predicateMI.getCodeAttributeInfo());
                } else {
                    assert false;
                }
                res = il.advanceIndex();
                assert res == true;
                il.insertInstr(storeAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
            }
            if (par.combineMode == Combine.Mode.XOR) {
                il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                il.insertInstr(new GenericInstruction(Opcode.ICONST_0), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                WideBranchInstruction br2 = new WideBranchInstruction(Opcode.GOTO_W, il.getIndex() + 1);
                il.insertInstr(br2, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                int jumpIndex = il.getIndex();
                il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
                res = il.rewindIndex(3);
                assert res == true;
                BranchInstruction br1 = new BranchInstruction(Opcode.IF_ICMPEQ, jumpIndex);
                il.insertInstr(br1, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex(4);
                assert res == true;
            } else {
                il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo());
                res = il.advanceIndex();
                assert res == true;
            }
            il.deleteInstr(predicateMI.getCodeAttributeInfo());
            predicateMI.getCodeAttributeInfo().setCode(il.getCode());
            props.maxStack = Math.max(maxStack, 2);
            predicateMI.getCodeAttributeInfo().setProperties(props.maxStack, props.maxLocals);
            try {
                FileOutputStream fos = new FileOutputStream(clonedFile);
                predicateCF.write(fos);
                fos.close();
            } catch (IOException e) {
                throw new ThreadCheckException(""Could not write cloned predicate class file, target="" + clonedFile);
            }
        }
        gr = new PredicateAnnotationRecord(par.annotation, predicateClass, predicateMI, paramNames, paramTypes, new ArrayList<AAnnotationsAttributeInfo.Annotation.AMemberValue>(), par.passArguments, null, new HashMap<String, ArrayList<PredicateAnnotationRecord>>());
        _generatedPredicateRecords.put(hashKey, gr);
        return gr;
    }
","    public static void main(String argv[]) {
        System.out.println(""Starting URL tests"");
        System.out.println(""Test 1: Simple URL test"");
        try {
            URL url = new URL(""http"", ""www.fsf.org"", 80, ""/"");
            if (!url.getProtocol().equals(""http"") || !url.getHost().equals(""www.fsf.org"") || url.getPort() != 80 || !url.getFile().equals(""/"")) System.out.println(""FAILED: Simple URL test"");
            System.out.println(""URL is: "" + url.toString());
            URLConnection uc = url.openConnection();
            if (uc instanceof HttpURLConnection) System.out.println(""Got the expected connection type"");
            HttpURLConnection hc = (HttpURLConnection) uc;
            hc.connect();
            System.out.flush();
            System.out.println(""Dumping response headers"");
            for (int i = 0; ; i++) {
                String key = hc.getHeaderFieldKey(i);
                if (key == null) break;
                System.out.println(key + "": "" + hc.getHeaderField(i));
            }
            System.out.flush();
            System.out.println(""Dumping contents"");
            BufferedReader br = new BufferedReader(new InputStreamReader(hc.getInputStream()));
            for (String str = br.readLine(); str != null; str = br.readLine()) {
                System.out.println(str);
            }
            System.out.flush();
            hc.disconnect();
            System.out.println(""Content Type: "" + hc.getContentType());
            System.out.println(""Content Encoding: "" + hc.getContentEncoding());
            System.out.println(""Content Length: "" + hc.getContentLength());
            System.out.println(""Date: "" + hc.getDate());
            System.out.println(""Expiration: "" + hc.getExpiration());
            System.out.println(""Last Modified: "" + hc.getLastModified());
            System.out.println(""PASSED: Simple URL test"");
        } catch (IOException e) {
            System.out.println(""FAILED: Simple URL test: "" + e);
        }
        System.out.println(""Test 2: URL parsing test"");
        try {
            URL url = new URL(""http://www.urbanophile.com/arenn/trans/trans.html#mis"");
            if (!url.toString().equals(""http://www.urbanophile.com/arenn/trans/trans.html#mis"")) System.out.println(""FAILED: Parse URL test: "" + url.toString()); else {
                System.out.println(""Parsed ok: "" + url.toString());
                url = new URL(""http://www.foo.com:8080/#"");
                if (!url.toString().equals(""http://www.foo.com:8080/#"")) System.out.println(""FAILED: Parse URL test: "" + url.toString()); else {
                    System.out.println(""Parsed ok: "" + url.toString());
                    url = new URL(""http://www.bar.com/test:file/"");
                    if (!url.toString().equals(""http://www.bar.com/test:file/"")) System.out.println(""FAILED: Parse URL test: "" + url.toString()); else {
                        System.out.println(""Parsed ok: "" + url.toString());
                        url = new URL(""http://www.gnu.org"");
                        if (!url.toString().equals(""http://www.gnu.org/"")) System.out.println(""FAILED: Parse URL test: "" + url.toString()); else {
                            System.out.println(""Parsed ok: "" + url.toString());
                            url = new URL(""HTTP://www.fsf.org/"");
                            if (!url.toString().equals(""http://www.fsf.org/"")) System.out.println(""FAILED: Parse URL test: "" + url.toString()); else {
                                System.out.println(""Parsed ok: "" + url.toString());
                                System.out.println(""PASSED: URL parse test"");
                            }
                        }
                    }
                }
            }
        } catch (IOException e) {
            System.out.println(""FAILED: URL parsing test: "" + e);
        }
        System.out.println(""Test 3: getContent test"");
        try {
            URL url = new URL(""http://localhost/~arenn/services.txt"");
            Object obj = url.getContent();
            System.out.println(""Object type is: "" + obj.getClass().getName());
            if (obj instanceof InputStream) {
                System.out.println(""Got InputStream, so dumping contents"");
                BufferedReader br = new BufferedReader(new InputStreamReader((InputStream) obj));
                for (String str = br.readLine(); str != null; str = br.readLine()) System.out.println(str);
                br.close();
            } else {
                System.out.println(""FAILED: Object is not an InputStream"");
            }
            System.out.println(""PASSED: getContent test"");
        } catch (IOException e) {
            System.out.println(""FAILED: getContent test: "" + e);
        }
        System.out.println(""URL test complete"");
    }
"
"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    public void delete(String user) throws FidoDatabaseException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                stmt.executeUpdate(""delete from Principals where PrincipalId = '"" + user + ""'"");
                stmt.executeUpdate(""delete from Roles where PrincipalId = '"" + user + ""'"");
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
"
"    public String generateKey(Message msg) {
        String text = msg.getDefaultMessage();
        String meaning = msg.getMeaning();
        if (text == null) {
            return null;
        }
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""Error initializing MD5"", e);
        }
        try {
            md5.update(text.getBytes(""UTF-8""));
            if (meaning != null) {
                md5.update(meaning.getBytes(""UTF-8""));
            }
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(""UTF-8 unsupported"", e);
        }
        return StringUtils.toHexString(md5.digest());
    }
","    public void copy(final File source, final File dest) throws IOException {
        final FileInputStream in = new FileInputStream(source);
        try {
            final FileOutputStream out = new FileOutputStream(dest);
            try {
                final FileChannel inChannel = in.getChannel();
                final FileChannel outChannel = out.getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
"
"    public void createPartControl(Composite parent) {
        FormToolkit toolkit;
        toolkit = new FormToolkit(parent.getDisplay());
        form = toolkit.createForm(parent);
        form.setText(""Apple Inc."");
        toolkit.decorateFormHeading(form);
        form.getBody().setLayout(new GridLayout());
        chart = createChart();
        final DateAxis dateAxis = new DateAxis();
        viewer = new GraphicalViewerImpl();
        viewer.setRootEditPart(new ScalableRootEditPart());
        viewer.setEditPartFactory(new ChartEditPartFactory(dateAxis));
        viewer.createControl(form.getBody());
        viewer.setContents(chart);
        viewer.setEditDomain(new EditDomain());
        viewer.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                System.err.println(""selectionChanged "" + event.getSelection());
            }
        });
        viewer.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                deleteAction.update();
            }
        });
        ActionRegistry actionRegistry = new ActionRegistry();
        createActions(actionRegistry);
        ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);
        viewer.setContextMenu(cmProvider);
        getSite().setSelectionProvider(viewer);
        deleteAction.setSelectionProvider(viewer);
        viewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {

            public void stackChanged(CommandStackEvent event) {
                undoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());
                redoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());
            }
        });
        Data data = Data.getData();
        chart.setInput(data);
        DateRange dateRange = new DateRange(0, 50);
        dateAxis.setDates(data.date);
        dateAxis.setSelectedRange(dateRange);
        slider = new Slider(form.getBody(), SWT.NONE);
        slider.setMinimum(0);
        slider.setMaximum(data.close.length - 1);
        slider.setSelection(dateRange.start);
        slider.setThumb(dateRange.length);
        slider.addListener(SWT.Selection, new Listener() {

            public void handleEvent(Event event) {
                DateRange r = new DateRange(slider.getSelection(), slider.getThumb());
                dateAxis.setSelectedRange(r);
            }
        });
        final Scale spinner = new Scale(form.getBody(), SWT.NONE);
        spinner.setMinimum(5);
        spinner.setMaximum(data.close.length - 1);
        spinner.setSelection(dateRange.length);
        spinner.addListener(SWT.Selection, new Listener() {

            public void handleEvent(Event event) {
                slider.setThumb(spinner.getSelection());
                DateRange r = new DateRange(slider.getSelection(), slider.getThumb());
                dateAxis.setSelectedRange(r);
            }
        });
        GridDataFactory.defaultsFor(viewer.getControl()).grab(true, true).align(GridData.FILL, GridData.FILL).applyTo(viewer.getControl());
        GridDataFactory.defaultsFor(slider).grab(true, false).align(GridData.FILL, GridData.FILL).grab(true, false).applyTo(slider);
        GridDataFactory.defaultsFor(spinner).grab(true, false).align(GridData.FILL, GridData.FILL).grab(true, false).applyTo(spinner);
        getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(this);
    }
","    @Override
    public synchronized HttpURLConnection getTileUrlConnection(int zoom, int tilex, int tiley) throws IOException {
        HttpURLConnection conn = null;
        try {
            String url = getTileUrl(zoom, tilex, tiley);
            conn = (HttpURLConnection) new URL(url).openConnection();
        } catch (IOException e) {
            throw e;
        } catch (Exception e) {
            log.error("""", e);
            throw new IOException(e);
        }
        try {
            i.set(""conn"", conn);
            i.eval(""addHeaders(conn);"");
        } catch (EvalError e) {
            String msg = e.getMessage();
            if (!AH_ERROR.equals(msg)) {
                log.error(e.getClass() + "": "" + e.getMessage(), e);
                throw new IOException(e);
            }
        }
        return conn;
    }
"
"    public static void uploadFile(File in, String out, String host, int port, String path, String login, String password, boolean renameIfExist) throws IOException {
        FTPClient ftp = null;
        try {
            m_logCat.info(""Uploading "" + in + "" to "" + host + "":"" + port + "" at "" + path);
            ftp = new FTPClient();
            int reply;
            ftp.connect(host, port);
            m_logCat.info(""Connected to "" + host + ""... Trying to authenticate"");
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                m_logCat.error(""FTP server "" + host + "" refused connection."");
                throw new IOException(""Cannot connect to the FTP Server: connection refused."");
            }
            if (!ftp.login(login, password)) {
                ftp.logout();
                throw new IOException(""Cannot connect to the FTP Server: login / password is invalid!"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            if (!ftp.changeWorkingDirectory(path)) {
                m_logCat.warn(""Remote working directory: "" + path + ""does not exist on the FTP Server ..."");
                m_logCat.info(""Trying to create remote directory: "" + path);
                if (!ftp.makeDirectory(path)) {
                    m_logCat.error(""Failed to create remote directory: "" + path);
                    throw new IOException(""Failed to store "" + in + "" in the remote directory: "" + path);
                }
                if (!ftp.changeWorkingDirectory(path)) {
                    m_logCat.error(""Failed to change directory. Unexpected error"");
                    throw new IOException(""Failed to change to remote directory : "" + path);
                }
            }
            if (out == null) {
                out = in.getName();
                if (out.startsWith(""/"")) {
                    out = out.substring(1);
                }
            }
            if (renameIfExist) {
                String[] files = ftp.listNames();
                String f = in + out;
                for (int i = 0; i < files.length; i++) {
                    if (files[i].equals(out)) {
                        m_logCat.debug(""Found existing file on the server: "" + out);
                        boolean rename_ok = false;
                        String bak = ""_bak"";
                        int j = 0;
                        String newExt = null;
                        while (!rename_ok) {
                            if (j == 0) newExt = bak; else newExt = bak + j;
                            if (ftp.rename(out, out + newExt)) {
                                m_logCat.info(out + "" renamed to "" + out + newExt);
                                rename_ok = true;
                            } else {
                                m_logCat.warn(""Renaming to "" + out + newExt + "" has failed!, trying again ..."");
                                j++;
                            }
                        }
                        break;
                    }
                }
            }
            InputStream input = new FileInputStream(in);
            m_logCat.info(""Starting transfert of "" + in);
            ftp.storeFile(out, input);
            m_logCat.info(in + "" uploaded successfully"");
            input.close();
            ftp.logout();
        } catch (FTPConnectionClosedException e) {
            m_logCat.error(""Server closed connection."", e);
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
    }
","    public void store(Component component, String componentName, int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""UPDATE component_prop "" + ""SET size_height = ?, size_width = ?, pos_x = ?, pos_y = ? "" + ""WHERE pilot_id = ? "" + ""AND component_name = ?"");
            psta.setInt(1, component.getHeight());
            psta.setInt(2, component.getWidth());
            Point point = component.getLocation();
            psta.setInt(3, point.x);
            psta.setInt(4, point.y);
            psta.setInt(5, currentPilot);
            psta.setString(6, componentName);
            int update = psta.executeUpdate();
            if (update == 0) {
                psta = jdbc.prepareStatement(""INSERT INTO component_prop "" + ""(size_height, size_width, pos_x, pos_y, pilot_id, component_name) "" + ""VALUES (?,?,?,?,?,?)"");
                psta.setInt(1, component.getHeight());
                psta.setInt(2, component.getWidth());
                psta.setInt(3, point.x);
                psta.setInt(4, point.y);
                psta.setInt(5, currentPilot);
                psta.setString(6, componentName);
                psta.executeUpdate();
            }
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
"
"    protected static List<Pattern> getBotPatterns() {
        List<Pattern> patterns = new ArrayList<Pattern>();
        try {
            Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(""META-INF/org/pustefixframework/http/bot-user-agents.txt"");
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                InputStream in = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));
                String line;
                while ((line = reader.readLine()) != null) {
                    line = line.trim();
                    if (!line.startsWith(""#"")) {
                        Pattern pattern = Pattern.compile(line);
                        patterns.add(pattern);
                    }
                }
                in.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(""Error reading bot user-agent configuration"", e);
        }
        return patterns;
    }
","    private HttpResponse executePutPost(HttpEntityEnclosingRequestBase request, String content) {
        try {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Content: {}"", content);
            }
            StringEntity e = new StringEntity(content, ""UTF-8"");
            e.setContentType(""application/json"");
            request.setEntity(e);
            return executeRequest(request);
        } catch (Exception e) {
            throw Exceptions.propagate(e);
        }
    }
"
"    private File unzipArchive(File zipArchive, File outDir, String nameInZipArchive) throws IOException {
        File mainFile = null;
        ZipEntry entry = null;
        ZipInputStream zis = new ZipInputStream(new FileInputStream((zipArchive)));
        FileOutputStream fos = null;
        byte buffer[] = new byte[4096];
        int bytesRead;
        while ((entry = zis.getNextEntry()) != null) {
            File outFile = new File(outDir, entry.getName());
            if (entry.getName().equals(nameInZipArchive)) mainFile = outFile;
            fos = new FileOutputStream(outFile);
            while ((bytesRead = zis.read(buffer)) != -1) fos.write(buffer, 0, bytesRead);
            fos.close();
        }
        zis.close();
        return mainFile;
    }
","    private List<Intrebare> citesteIntrebari() throws IOException {
        ArrayList<Intrebare> intrebari = new ArrayList<Intrebare>();
        try {
            URL url = new URL(getCodeBase(), ""../intrebari.txt"");
            BufferedReader reader = new BufferedReader(new InputStreamReader((url.openStream())));
            String intrebare;
            while ((intrebare = reader.readLine()) != null) {
                Collection<String> raspunsuri = new ArrayList<String>();
                Collection<String> predicate = new ArrayList<String>();
                String raspuns = """";
                while (!"""".equals(raspuns = reader.readLine())) {
                    raspunsuri.add(raspuns);
                    predicate.add(reader.readLine());
                }
                Intrebare i = new Intrebare(intrebare, raspunsuri.toArray(new String[raspunsuri.size()]), predicate.toArray(new String[predicate.size()]));
                intrebari.add(i);
            }
        } catch (ArgumentExcetpion e) {
            e.printStackTrace();
        }
        return intrebari;
    }
"
"    void startzm() {
        URL myzzurl;
        InputStream myzstream;
        byte zmemimage[];
        boolean joined;
        zmemimage = null;
        try {
            System.err.println(zcodefile);
            myzzurl = new URL(zcodefile);
            myzstream = myzzurl.openStream();
            zmemimage = suckstream(myzstream);
        } catch (MalformedURLException booga) {
            try {
                myzstream = new FileInputStream(zcodefile);
                zmemimage = suckstream(myzstream);
            } catch (IOException booga2) {
                add(""North"", new Label(""Malformed URL""));
                failed = true;
            }
        } catch (IOException booga) {
            add(""North"", new Label(""I/O Error""));
        }
        if (zmemimage != null) {
            switch(zmemimage[0]) {
                case 3:
                    zm = new ZMachine3(screen, status_line, zmemimage);
                    break;
                case 5:
                    remove(status_line);
                    zm = new ZMachine5(screen, zmemimage);
                    break;
                case 8:
                    remove(status_line);
                    zm = new ZMachine8(screen, zmemimage);
                    break;
                default:
                    add(""North"", new Label(""Not a valid V3,V5, or V8 story file""));
            }
            if (zm != null) zm.start();
        }
        joined = false;
        if (zmemimage != null) {
            while (!joined) {
                try {
                    zm.join();
                    joined = true;
                } catch (InterruptedException booga) {
                }
            }
        }
        System.exit(0);
    }
","    public static ArrayList<String> remoteCall(Map<String, String> dataDict) {
        ArrayList<String> result = new ArrayList<String>();
        String encodedData = """";
        for (String key : dataDict.keySet()) {
            String encodedSegment = """";
            String value = dataDict.get(key);
            if (value == null) continue;
            try {
                encodedSegment = key + ""="" + URLEncoder.encode(value, ""UTF-8"");
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            if (encodedData.length() > 0) {
                encodedData += ""&"";
            }
            encodedData += encodedSegment;
        }
        try {
            URL url = new URL(baseURL + encodedData);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                result.add(line);
                System.out.println(""GOT: "" + line);
            }
            reader.close();
            result.remove(0);
            if (result.size() != 0) {
                if (!result.get(result.size() - 1).equals(""DONE"")) {
                    result.clear();
                } else {
                    result.remove(result.size() - 1);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return result;
    }
"
"    public void bubbleSort(int[] arr) {
        boolean swapped = true;
        int j = 0;
        int tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < arr.length - j; i++) {
                if (arr[i] > arr[i + 1]) {
                    tmp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
    }
","    public int getHttpStatus(ProxyInfo proxyInfo, String sUrl, String cookie, String host) {
        HttpURLConnection connection = null;
        try {
            if (proxyInfo == null) {
                URL url = new URL(sUrl);
                connection = (HttpURLConnection) url.openConnection();
            } else {
                InetSocketAddress addr = new InetSocketAddress(proxyInfo.getPxIp(), proxyInfo.getPxPort());
                Proxy proxy = new Proxy(Proxy.Type.HTTP, addr);
                URL url = new URL(sUrl);
                connection = (HttpURLConnection) url.openConnection(proxy);
            }
            if (!isStringNull(host)) setHttpInfo(connection, cookie, host, """");
            connection.setConnectTimeout(90 * 1000);
            connection.setReadTimeout(90 * 1000);
            connection.connect();
            connection.getInputStream();
            return connection.getResponseCode();
        } catch (IOException e) {
            log.info(proxyInfo + "" getHTTPConent Error "");
            return 0;
        } catch (Exception e) {
            log.info(proxyInfo + "" getHTTPConent Error "");
            return 0;
        }
    }
"
"    private void createIDocPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName, String pluginNameJCo) throws CoreException, IOException {
        monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));
        final Map<String, byte[]> files = readArchiveFile(sourceFileName);
        monitor.worked(10);
        IProject project = workspaceRoot.getProject(pluginName);
        if (project.exists()) {
            project.delete(true, true, new SubProgressMonitor(monitor, 5));
        } else {
            monitor.worked(5);
        }
        project.create(new SubProgressMonitor(monitor, 5));
        project.open(new SubProgressMonitor(monitor, 5));
        IProjectDescription description = project.getDescription();
        description.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });
        project.setDescription(description, new SubProgressMonitor(monitor, 5));
        IJavaProject javaProject = JavaCore.create(project);
        IFolder binDir = project.getFolder(""bin"");
        IPath binPath = binDir.getFullPath();
        javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));
        project.getFile(""sapidoc3.jar"").create(new ByteArrayInputStream(files.get(""sapidoc3.jar"")), true, new SubProgressMonitor(monitor, 15));
        IFolder metaInfFolder = project.getFolder(""META-INF"");
        metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));
        StringBuilder manifest = new StringBuilder();
        manifest.append(""Manifest-Version: 1.0\n"");
        manifest.append(""Bundle-ManifestVersion: 2\n"");
        manifest.append(""Bundle-Name: SAP IDoc Library v3\n"");
        manifest.append(MessageFormat.format(""Bundle-SymbolicName: {0}\n"", pluginName));
        manifest.append(""Bundle-Version: 7.11.0\n"");
        manifest.append(""Bundle-ClassPath: bin/,\n"");
        manifest.append("" sapidoc3.jar\n"");
        manifest.append(""Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\n"");
        manifest.append(""Bundle-RequiredExecutionEnvironment: J2SE-1.5\n"");
        manifest.append(""Export-Package: com.sap.conn.idoc,\n"");
        manifest.append("" com.sap.conn.idoc.jco,\n"");
        manifest.append("" com.sap.conn.idoc.rt.cp,\n"");
        manifest.append("" com.sap.conn.idoc.rt.record,\n"");
        manifest.append("" com.sap.conn.idoc.rt.record.impl,\n"");
        manifest.append("" com.sap.conn.idoc.rt.trace,\n"");
        manifest.append("" com.sap.conn.idoc.rt.util,\n"");
        manifest.append("" com.sap.conn.idoc.rt.xml\n"");
        manifest.append(""Bundle-ActivationPolicy: lazy\n"");
        manifest.append(MessageFormat.format(""Require-Bundle: {0}\n"", pluginNameJCo));
        writeTextFile(monitor, manifest, metaInfFolder.getFile(""MANIFEST.MF""));
        final IPath jcoPath = new Path(MessageFormat.format(""/{0}/sapidoc3.jar"", pluginName));
        IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);
        javaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry }, new SubProgressMonitor(monitor, 5));
        StringBuilder buildProperties = new StringBuilder();
        buildProperties.append(""bin.includes = META-INF/,\\\n"");
        buildProperties.append(""               sapidoc3.jar,\\\n"");
        buildProperties.append(""               .\n"");
        writeTextFile(monitor, buildProperties, project.getFile(""build.properties""));
        exportableBundles.add(modelManager.findModel(project));
    }
","    public String hash(String password) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException ex) {
            log.info(""No sha-256 available"");
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException e) {
                log.fatal(""sha-1 is not available"", e);
                throw new RuntimeException(""Couldn't get a hash algorithm from Java"");
            }
        }
        try {
            digest.reset();
            digest.update((salt + password).getBytes(""UTF-8""));
            byte hash[] = digest.digest();
            return new String(Base64.encodeBase64(hash, false));
        } catch (Throwable t) {
            throw new RuntimeException(""Couldn't hash password"");
        }
    }
"
"    public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_CONTACT""));
            pst.setString(1, contact.getName());
            pst.setString(2, contact.getFirstname());
            pst.setString(3, contact.getPhone());
            pst.setString(4, contact.getEmail());
            if (contact.getAccount() == 0) {
                pst.setNull(5, java.sql.Types.INTEGER);
            } else {
                pst.setInt(5, contact.getAccount());
            }
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id) from contact"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }
","    public static double[][] getCurrency() throws IOException {
        URL url = new URL(""http://hk.finance.yahoo.com/currency"");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""big5""));
        double currency[][] = new double[11][11];
        while (true) {
            String line = in.readLine();
            String reg = ""<td\\s((align=\""right\""\\sclass=\""yfnc_tabledata1\"")"" + ""|(class=\""yfnc_tabledata1\""\\salign=\""right\""))>"" + ""([\\d|\\.]+)</td>"";
            Matcher m = Pattern.compile(reg).matcher(line);
            int i = 0, j = 0;
            boolean isfound = false;
            while (m.find()) {
                isfound = true;
                currency[i][j] = Double.parseDouble(m.group(4));
                if (j == 10) {
                    j = 0;
                    i++;
                } else j++;
            }
            if (isfound) break;
        }
        return currency;
    }
"
"    protected IRunnableWithProgress getProjectCreationRunnable() {
        return new IRunnableWithProgress() {

            public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                int remainingWorkUnits = 10;
                monitor.beginTask(""New Modulo Project Creation"", remainingWorkUnits);
                IWorkspace ws = ResourcesPlugin.getWorkspace();
                newProject = fMainPage.getProjectHandle();
                IProjectDescription description = ws.newProjectDescription(newProject.getName());
                String[] natures = { JavaCore.NATURE_ID, ModuloLauncherPlugin.NATURE_ID };
                description.setNatureIds(natures);
                ICommand command = description.newCommand();
                command.setBuilderName(JavaCore.BUILDER_ID);
                ICommand[] commands = { command };
                description.setBuildSpec(commands);
                IJavaProject jproject = JavaCore.create(newProject);
                ModuloProject modProj = new ModuloProject();
                modProj.setJavaProject(jproject);
                try {
                    newProject.create(description, new SubProgressMonitor(monitor, 1));
                    newProject.open(new SubProgressMonitor(monitor, 1));
                    IFolder srcFolder = newProject.getFolder(""src"");
                    IFolder javaFolder = srcFolder.getFolder(""java"");
                    IFolder buildFolder = newProject.getFolder(""build"");
                    IFolder classesFolder = buildFolder.getFolder(""classes"");
                    modProj.createFolder(srcFolder);
                    modProj.createFolder(javaFolder);
                    modProj.createFolder(buildFolder);
                    modProj.createFolder(classesFolder);
                    IPath buildPath = newProject.getFolder(""build/classes"").getFullPath();
                    jproject.setOutputLocation(buildPath, new SubProgressMonitor(monitor, 1));
                    IClasspathEntry[] entries = new IClasspathEntry[] { JavaCore.newSourceEntry(newProject.getFolder(""src/java"").getFullPath()), JavaCore.newContainerEntry(new Path(JavaRuntime.JRE_CONTAINER)), JavaCore.newContainerEntry(new Path(ModuloClasspathContainer.CONTAINER_ID)) };
                    jproject.setRawClasspath(entries, new SubProgressMonitor(monitor, 1));
                    ModuleDefinition definition = new ModuleDefinition();
                    definition.setId(fModuloPage.getPackageName());
                    definition.setVersion(new VersionNumber(1, 0, 0));
                    definition.setMetaName(fModuloPage.getModuleName());
                    definition.setMetaDescription(""The "" + fModuloPage.getModuleName() + "" Module."");
                    definition.setModuleClassName(fModuloPage.getPackageName() + ""."" + fModuloPage.getModuleClassName());
                    if (fModuloPage.isConfigSelectioned()) definition.setConfigurationClassName(fModuloPage.getPackageName() + ""."" + fModuloPage.getConfigClassName());
                    if (fModuloPage.isStatSelectioned()) definition.setStatisticsClassName(fModuloPage.getPackageName() + ""."" + fModuloPage.getStatClassName());
                    modProj.setDefinition(definition);
                    modProj.createPackage();
                    modProj.createModuleXML();
                    modProj.createMainClass();
                    if (fModuloPage.isConfigSelectioned()) modProj.createConfigClass();
                    if (fModuloPage.isStatSelectioned()) modProj.createStatClass();
                    modProj.createModuleProperties();
                    modProj.createMessagesProperties();
                    IFolder binFolder = newProject.getFolder(""bin"");
                    binFolder.delete(true, new SubProgressMonitor(monitor, 1));
                } catch (CoreException e) {
                    e.printStackTrace();
                } finally {
                    monitor.done();
                }
            }
        };
    }
","    @Override
    public void saveStructure(long userId, TreeStructureInfo info, List<TreeStructureNode> structure) throws DatabaseException {
        if (info == null) throw new NullPointerException(""info"");
        if (structure == null) throw new NullPointerException(""structure"");
        try {
            getConnection().setAutoCommit(false);
        } catch (SQLException e) {
            LOGGER.warn(""Unable to set autocommit off"", e);
        }
        PreparedStatement insertInfoSt = null, insSt = null;
        try {
            insertInfoSt = getConnection().prepareStatement(INSERT_INFO);
            insertInfoSt.setLong(1, userId);
            insertInfoSt.setString(2, info.getDescription() != null ? info.getDescription() : """");
            insertInfoSt.setString(3, info.getBarcode());
            insertInfoSt.setString(4, info.getName());
            insertInfoSt.setString(5, info.getInputPath());
            insertInfoSt.setString(6, info.getModel());
            insertInfoSt.executeUpdate();
            PreparedStatement seqSt = getConnection().prepareStatement(INFO_VALUE);
            ResultSet rs = seqSt.executeQuery();
            int key = -1;
            while (rs.next()) {
                key = rs.getInt(1);
            }
            if (key == -1) {
                getConnection().rollback();
                throw new DatabaseException(""Unable to obtain new id from DB when executing query: "" + insertInfoSt);
            }
            int total = 0;
            for (TreeStructureNode node : structure) {
                insSt = getConnection().prepareStatement(INSERT_NODE);
                insSt.setLong(1, key);
                insSt.setString(2, node.getPropId());
                insSt.setString(3, node.getPropParent());
                insSt.setString(4, node.getPropName());
                insSt.setString(5, node.getPropPicture());
                insSt.setString(6, node.getPropType());
                insSt.setString(7, node.getPropTypeId());
                insSt.setString(8, node.getPropPageType());
                insSt.setString(9, node.getPropDateIssued());
                insSt.setString(10, node.getPropAltoPath());
                insSt.setString(11, node.getPropOcrPath());
                insSt.setBoolean(12, node.getPropExist());
                total += insSt.executeUpdate();
            }
            if (total != structure.size()) {
                getConnection().rollback();
                throw new DatabaseException(""Unable to insert _ALL_ nodes: "" + total + "" nodes were inserted of "" + structure.size());
            }
            getConnection().commit();
        } catch (SQLException e) {
            LOGGER.error(""Queries: \"""" + insertInfoSt + ""\"" and \"""" + insSt + ""\"""", e);
        } finally {
            closeConnection();
        }
    }
"
"    private InputStream connectURL(String aurl) throws IOException {
        InputStream in = null;
        int response = -1;
        URL url = new URL(aurl);
        URLConnection conn = url.openConnection();
        if (!(conn instanceof HttpURLConnection)) throw new IOException(""Not an HTTP connection."");
        HttpURLConnection httpConn = (HttpURLConnection) conn;
        response = getResponse(httpConn);
        if (response == HttpURLConnection.HTTP_OK) {
            in = httpConn.getInputStream();
        } else throw new IOException(""Response Code: "" + response);
        return in;
    }
","    public String encrypt(String pwd) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            System.out.println(""Error"");
        }
        try {
            md5.update(pwd.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, ""That is not a valid encrpytion type"");
        }
        byte raw[] = md5.digest();
        String empty = """";
        String hash = """";
        for (byte b : raw) {
            String tmp = empty + Integer.toHexString(b & 0xff);
            if (tmp.length() == 1) {
                tmp = 0 + tmp;
            }
            hash += tmp;
        }
        return hash;
    }
"
"    public static void copyFile(File dst, File src, boolean append) throws FileNotFoundException, IOException {
        dst.createNewFile();
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        long startAt = 0;
        if (append) startAt = out.size();
        in.transferTo(startAt, in.size(), out);
        out.close();
        in.close();
    }
","    public static String md5encrypt(String toEncrypt) {
        if (toEncrypt == null) {
            throw new IllegalArgumentException(""null is not a valid password to encrypt"");
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(toEncrypt.getBytes());
            byte[] hash = md.digest();
            return new String(dumpBytes(hash));
        } catch (NoSuchAlgorithmException nsae) {
            return toEncrypt;
        }
    }
"
"    public void retrieveChallenge() throws MalformedURLException, IOException, FBConnectionException, FBErrorException {
        URL url = new URL(getHost() + getPath());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestProperty(""X-FB-User"", getUser());
        conn.setRequestProperty(""X-FB-Mode"", ""GetChallenge"");
        conn.connect();
        Element fbresponse;
        try {
            fbresponse = readXML(conn);
        } catch (FBConnectionException fbce) {
            error = true;
            throw fbce;
        } catch (FBErrorException fbee) {
            error = true;
            throw fbee;
        } catch (Exception e) {
            error = true;
            FBConnectionException fbce = new FBConnectionException(""XML parsing failed"");
            fbce.attachSubException(e);
            throw fbce;
        }
        NodeList nl = fbresponse.getElementsByTagName(""GetChallengeResponse"");
        for (int i = 0; i < nl.getLength(); i++) {
            if (nl.item(i) instanceof Element && hasError((Element) nl.item(i))) {
                error = true;
                FBErrorException e = new FBErrorException();
                e.setErrorCode(errorcode);
                e.setErrorText(errortext);
                throw e;
            }
        }
        NodeList challenge = fbresponse.getElementsByTagName(""Challenge"");
        for (int i = 0; i < challenge.getLength(); i++) {
            NodeList children = challenge.item(i).getChildNodes();
            for (int j = 0; j < children.getLength(); j++) {
                if (children.item(j) instanceof Text) {
                    challenges.offer(children.item(j).getNodeValue());
                }
            }
        }
    }
","    public void render(Map model, HttpServletRequest request, HttpServletResponse response) throws Exception {
        response.setContentType(s_contentType);
        response.setHeader(""Cache-control"", ""no-cache"");
        InputStream graphStream = getGraphStream(request);
        OutputStream out = getOutputStream(response);
        IOUtils.copy(graphStream, out);
        out.flush();
    }
"
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public void initGet() throws Exception {
        cl = new DefaultHttpClient();
        GetAuthPromter hp = new GetAuthPromter();
        cl.setCredentialsProvider(hp);
        get = new HttpGet(getURL());
        get.setHeader(""User-Agent"", ""test"");
        get.setHeader(""Accept"", ""*/*"");
        get.setHeader(""Range"", ""bytes="" + getPosition() + ""-"" + getRangeEnd());
        HttpResponse resp = cl.execute(get);
        ent = resp.getEntity();
        setInputStream(ent.getContent());
    }
"
"    public static String makeMD5(String pin) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(pin.getBytes());
            byte[] hash = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                hexString.append(Integer.toHexString(0xFF & hash[i]));
            }
            return hexString.toString();
        } catch (Exception e) {
            return null;
        }
    }
","    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""DELETE_CONTACT""));
            pst.setInt(1, contact.getId());
            delete = pst.executeUpdate();
            if (delete <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (delete > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return delete;
    }
"
"    public InlineImageChunk(URL url) {
        super();
        this.url = url;
        try {
            URLConnection urlConn = url.openConnection();
            urlConn.setReadTimeout(15000);
            ImageInputStream iis = ImageIO.createImageInputStream(urlConn.getInputStream());
            Iterator<ImageReader> readers = ImageIO.getImageReaders(iis);
            if (readers.hasNext()) {
                ImageReader reader = readers.next();
                reader.setInput(iis, true);
                this.width = reader.getWidth(0);
                this.ascent = reader.getHeight(0);
                this.descent = 0;
                reader.dispose();
            } else System.err.println(""cannot read width and height of image "" + url + "" - no suitable reader!"");
        } catch (Exception exc) {
            System.err.println(""cannot read width and height of image "" + url + "" due to exception:"");
            System.err.println(exc);
            exc.printStackTrace(System.err);
        }
    }
","    private void readFromObjectInput(String filename) {
        try {
            URL url = new URL(getCodeBase(), filename);
            InputStream stream = url.openStream();
            ObjectInput input = new ObjectInputStream(stream);
            fDrawing.release();
            fDrawing = (Drawing) input.readObject();
            view().setDrawing(fDrawing);
        } catch (IOException e) {
            initDrawing();
            showStatus(""Error: "" + e);
        } catch (ClassNotFoundException e) {
            initDrawing();
            showStatus(""Class not found: "" + e);
        }
    }
"
"    public String digestResponse() {
        String digest = null;
        if (null == nonce) return null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(username.getBytes());
            md.update("":"".getBytes());
            md.update(realm.getBytes());
            md.update("":"".getBytes());
            md.update(password.getBytes());
            byte[] d = md.digest();
            if (null != algorithm && -1 != (algorithm.toLowerCase()).indexOf(""md5-sess"")) {
                md = MessageDigest.getInstance(""MD5"");
                md.update(d);
                md.update("":"".getBytes());
                md.update(nonce.getBytes());
                md.update("":"".getBytes());
                md.update(cnonce.getBytes());
                d = md.digest();
            }
            byte[] a1 = bytesToHex(d);
            md = MessageDigest.getInstance(""MD5"");
            md.update(method.getBytes());
            md.update("":"".getBytes());
            md.update(uri.getBytes());
            d = md.digest();
            byte[] a2 = bytesToHex(d);
            md = MessageDigest.getInstance(""MD5"");
            md.update(a1);
            md.update("":"".getBytes());
            md.update(nonce.getBytes());
            md.update("":"".getBytes());
            if (null != qop) {
                md.update(nonceCount.getBytes());
                md.update("":"".getBytes());
                md.update(cnonce.getBytes());
                md.update("":"".getBytes());
                md.update(qop.getBytes());
                md.update("":"".getBytes());
            }
            md.update(a2);
            d = md.digest();
            byte[] r = bytesToHex(d);
            digest = new String(r);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return digest;
    }
","    public static void concatenateToDestFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            if (!destFile.createNewFile()) {
                throw new IllegalArgumentException(""Could not create destination file:"" + destFile.getName());
            }
        }
        BufferedOutputStream bufferedOutputStream = null;
        BufferedInputStream bufferedInputStream = null;
        byte[] buffer = new byte[1024];
        try {
            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(destFile, true));
            bufferedInputStream = new BufferedInputStream(new FileInputStream(sourceFile));
            while (true) {
                int readByte = bufferedInputStream.read(buffer, 0, buffer.length);
                if (readByte == -1) {
                    break;
                }
                bufferedOutputStream.write(buffer, 0, readByte);
            }
        } finally {
            if (bufferedOutputStream != null) {
                bufferedOutputStream.close();
            }
            if (bufferedInputStream != null) {
                bufferedInputStream.close();
            }
        }
    }
"
"    public User createUser(Map userData) throws HamboFatalException {
        DBConnection con = null;
        try {
            con = DBServiceManager.allocateConnection();
            con.setAutoCommit(false);
            String userId = (String) userData.get(HamboUser.USER_ID);
            String sql = ""insert into user_UserAccount "" + ""(userid,firstname,lastname,street,zipcode,city,"" + ""province,country,email,cellph,gender,password,"" + ""language,timezn,birthday,datecreated,lastlogin,"" + ""disabled,wapsigned,ldapInSync,offerings,firstcb) "" + ""values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, userId);
            ps.setString(2, (String) userData.get(HamboUser.FIRST_NAME));
            ps.setString(3, (String) userData.get(HamboUser.LAST_NAME));
            ps.setString(4, (String) userData.get(HamboUser.STREET_ADDRESS));
            ps.setString(5, (String) userData.get(HamboUser.ZIP_CODE));
            ps.setString(6, (String) userData.get(HamboUser.CITY));
            ps.setString(7, (String) userData.get(HamboUser.STATE));
            ps.setString(8, (String) userData.get(HamboUser.COUNTRY));
            ps.setString(9, (String) userData.get(HamboUser.EXTERNAL_EMAIL_ADDRESS));
            ps.setString(10, (String) userData.get(HamboUser.MOBILE_NUMBER));
            ps.setString(11, (String) userData.get(HamboUser.GENDER));
            ps.setString(12, (String) userData.get(HamboUser.PASSWORD));
            ps.setString(13, (String) userData.get(HamboUser.LANGUAGE));
            ps.setString(14, (String) userData.get(HamboUser.TIME_ZONE));
            java.sql.Date date = (java.sql.Date) userData.get(HamboUser.BIRTHDAY);
            if (date != null) ps.setDate(15, date); else ps.setNull(15, Types.DATE);
            date = (java.sql.Date) userData.get(HamboUser.CREATED);
            if (date != null) ps.setDate(16, date); else ps.setNull(16, Types.DATE);
            date = (java.sql.Date) userData.get(HamboUser.LAST_LOGIN);
            if (date != null) ps.setDate(17, date); else ps.setNull(17, Types.DATE);
            Boolean bool = (Boolean) userData.get(HamboUser.DISABLED);
            if (bool != null) ps.setBoolean(18, bool.booleanValue()); else ps.setBoolean(18, UserAccountInfo.DEFAULT_DISABLED);
            bool = (Boolean) userData.get(HamboUser.WAP_ACCOUNT);
            if (bool != null) ps.setBoolean(19, bool.booleanValue()); else ps.setBoolean(19, UserAccountInfo.DEFAULT_WAP_ACCOUNT);
            bool = (Boolean) userData.get(HamboUser.LDAP_IN_SYNC);
            if (bool != null) ps.setBoolean(20, bool.booleanValue()); else ps.setBoolean(20, UserAccountInfo.DEFAULT_LDAP_IN_SYNC);
            bool = (Boolean) userData.get(HamboUser.OFFERINGS);
            if (bool != null) ps.setBoolean(21, bool.booleanValue()); else ps.setBoolean(21, UserAccountInfo.DEFAULT_OFFERINGS);
            ps.setString(22, (String) userData.get(HamboUser.COBRANDING_ID));
            con.executeUpdate(ps, null);
            ps = con.prepareStatement(DBUtil.getQueryCurrentOID(con, ""user_UserAccount"", ""newoid""));
            ResultSet rs = con.executeQuery(ps, null);
            if (rs.next()) {
                OID newOID = new OID(rs.getBigDecimal(""newoid"").doubleValue());
                userData.put(HamboUser.OID, newOID);
            }
            con.commit();
        } catch (Exception ex) {
            if (con != null) try {
                con.rollback();
            } catch (SQLException sqlex) {
            }
            throw new HamboFatalException(MSG_INSERT_FAILED, ex);
        } finally {
            if (con != null) try {
                con.reset();
            } catch (SQLException ex) {
            }
            if (con != null) con.release();
        }
        return buildUser(userData);
    }
","    @Override
    public void connect() throws IOException {
        URL url = getLocator().getURL();
        if (url.getProtocol().equals(""file"")) {
            final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm());
            if (newUrlStr != null) {
                if (!newUrlStr.toString().equals(url.toExternalForm())) {
                    logger.warning(""Changing file URL to absolute for URL.openConnection, from "" + url.toExternalForm() + "" to "" + newUrlStr);
                    url = new URL(newUrlStr);
                }
            }
        }
        conn = url.openConnection();
        if (!url.getProtocol().equals(""ftp"") && conn.getURL().getProtocol().equals(""ftp"")) {
            logger.warning(""URL.openConnection() morphed "" + url + "" to "" + conn.getURL());
            throw new IOException(""URL.openConnection() returned an FTP connection for a non-ftp url: "" + url);
        }
        if (conn instanceof HttpURLConnection) {
            final HttpURLConnection huc = (HttpURLConnection) conn;
            huc.connect();
            final int code = huc.getResponseCode();
            if (!(code >= 200 && code < 300)) {
                huc.disconnect();
                throw new IOException(""HTTP response code: "" + code);
            }
            logger.finer(""URL: "" + url);
            logger.finer(""Response code: "" + code);
            logger.finer(""Full content type: "" + conn.getContentType());
            boolean contentTypeSet = false;
            if (stripTrailer(conn.getContentType()).equals(""text/plain"")) {
                final String ext = PathUtils.extractExtension(url.getPath());
                if (ext != null) {
                    final String result = MimeManager.getMimeType(ext);
                    if (result != null) {
                        contentTypeStr = ContentDescriptor.mimeTypeToPackageName(result);
                        contentTypeSet = true;
                        logger.fine(""Received content type "" + conn.getContentType() + ""; overriding based on extension, to: "" + result);
                    }
                }
            }
            if (!contentTypeSet) contentTypeStr = ContentDescriptor.mimeTypeToPackageName(stripTrailer(conn.getContentType()));
        } else {
            conn.connect();
            contentTypeStr = ContentDescriptor.mimeTypeToPackageName(conn.getContentType());
        }
        contentType = new ContentDescriptor(contentTypeStr);
        sources = new URLSourceStream[1];
        sources[0] = new URLSourceStream();
        connected = true;
    }
"
"    private static List<CountryEntry> retrieveCountries() throws IOException {
        URL url = new URL(""http://"" + ISO_3166_HOST + ISO_3166_TXT_FILE_PATH);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        List<CountryEntry> countries = new LinkedList<CountryEntry>();
        boolean parsing = false;
        int trCount = 0;
        int tdCount = 0;
        CountryEntry current = new CountryEntry();
        String nextLine = input.readLine();
        while (nextLine != null) {
            if (nextLine.startsWith(""<table"")) {
                parsing = true;
            }
            if (nextLine.startsWith(""</table>"")) {
                break;
            }
            if (parsing) {
                if (nextLine.startsWith(""<tr"")) {
                    trCount++;
                } else {
                    if ((trCount > 1 && nextLine.startsWith(""<td""))) {
                        tdCount++;
                        String data = pullData(nextLine);
                        switch(tdCount) {
                            case 1:
                                current.setName(getCountryName(data));
                                break;
                            case 2:
                                current.setNumber(data);
                                break;
                            case 3:
                                current.setAlpha3(data);
                                break;
                            case 4:
                                current.setAlpha2(data);
                                break;
                            case 5:
                                countries.add(current);
                                current = new CountryEntry();
                                tdCount = 0;
                                break;
                            default:
                                String msg = ""Parsing error.  Unexpected column: ["" + data + ""]"";
                                throw new IllegalStateException(msg);
                        }
                    }
                }
            }
            nextLine = input.readLine();
        }
        input.close();
        return countries;
    }
","    public void runTask(HashMap pjobParms) throws Exception {
        FTPClient lftpClient = null;
        FileInputStream lfisSourceFile = null;
        JBJFPluginDefinition lpluginCipher = null;
        IJBJFPluginCipher theCipher = null;
        try {
            JBJFFTPDefinition lxmlFTP = null;
            if (getFTPDefinition() != null) {
                lxmlFTP = getFTPDefinition();
                this.mstrSourceDirectory = lxmlFTP.getSourceDirectory();
                this.mstrTargetDirectory = lxmlFTP.getTargetDirectory();
                this.mstrFilename = lxmlFTP.getFilename();
                this.mstrRemoteServer = lxmlFTP.getServer();
                if (getResources().containsKey(""plugin-cipher"")) {
                    lpluginCipher = (JBJFPluginDefinition) getResources().get(""plugin-cipher"");
                }
                if (lpluginCipher != null) {
                    theCipher = getTaskPlugins().getCipherPlugin(lpluginCipher.getPluginId());
                }
                if (theCipher != null) {
                    this.mstrServerUsr = theCipher.decryptString(lxmlFTP.getUser());
                    this.mstrServerPwd = theCipher.decryptString(lxmlFTP.getPass());
                } else {
                    this.mstrServerUsr = lxmlFTP.getUser();
                    this.mstrServerPwd = lxmlFTP.getPass();
                }
            } else {
                throw new Exception(""Work unit [ "" + SHORT_NAME + "" ] is missing an FTP Definition.  Please check"" + "" your JBJF Batch Definition file an make sure"" + "" this work unit has a <resource> element added"" + "" within the <task> element."");
            }
            lfisSourceFile = new FileInputStream(mstrSourceDirectory + File.separator + mstrFilename);
            lftpClient = new FTPClient();
            lftpClient.connect(mstrRemoteServer);
            lftpClient.setFileType(lxmlFTP.getFileTransferType());
            if (!FTPReply.isPositiveCompletion(lftpClient.getReplyCode())) {
                throw new Exception(""FTP server [ "" + mstrRemoteServer + "" ] refused connection."");
            }
            if (!lftpClient.login(mstrServerUsr, mstrServerPwd)) {
                throw new Exception(""Unable to login to server [ "" + mstrTargetDirectory + "" ]."");
            }
            if (!lftpClient.changeWorkingDirectory(mstrTargetDirectory)) {
                throw new Exception(""Unable to change to remote directory [ "" + mstrTargetDirectory + ""]"");
            }
            lftpClient.enterLocalPassiveMode();
            if (!lftpClient.storeFile(mstrFilename, lfisSourceFile)) {
                throw new Exception(""Unable to upload [ "" + mstrSourceDirectory + ""/"" + mstrFilename + "" ]"" + "" to "" + mstrTargetDirectory + File.separator + mstrFilename + "" to "" + mstrRemoteServer);
            }
            lfisSourceFile.close();
            lftpClient.logout();
        } catch (Exception e) {
            throw e;
        } finally {
            if (lftpClient != null && lftpClient.isConnected()) {
                try {
                    lftpClient.disconnect();
                } catch (IOException ioe) {
                }
            }
            if (lfisSourceFile != null) {
                try {
                    lfisSourceFile.close();
                } catch (Exception e) {
                }
            }
        }
    }
"
"    public synchronized void download(URL url, File file) throws IOException {
        reset();
        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        InputStream in = url.openConnection(proxy).getInputStream();
        byte[] buffer = new byte[2048];
        BufferedOutputStream bos = file == null ? null : new BufferedOutputStream(new FileOutputStream(file), buffer.length);
        try {
            int size;
            while ((size = in.read(buffer, 0, buffer.length)) != -1) {
                if (this.isCancelled()) break;
                if (bos != null) bos.write(buffer, 0, size);
                if (size > 0) {
                    digest.update(buffer, 0, size);
                    this.length += size;
                    progress();
                }
            }
        } finally {
            if (bos != null) {
                bos.flush();
                bos.close();
            }
        }
        if (!cancelled) this.checkSum = CheckSum.toString(digest.digest());
    }
","    public static String getWikiPage(String city) throws MalformedURLException, IOException, ParserConfigurationException, SAXException {
        String url = ""http://api.geonames.org/wikipediaSearch?q="" + city + ""&maxRows=1&lang=it&username=lorenzo.abram"";
        URLConnection conn = new URL(url).openConnection();
        InputStream response = conn.getInputStream();
        GeonamesHandler handler = new GeonamesHandler();
        SAXParserFactory factory = SAXParserFactory.newInstance();
        SAXParser parser = factory.newSAXParser();
        parser.parse(response, handler);
        return handler.getUrl();
    }
"
"    @Override
    public String fetchURL(String urlString) throws ServiceException {
        try {
            URL url = new URL(urlString);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String content = """";
            String line;
            while ((line = reader.readLine()) != null) {
                content += line + ""\n"";
            }
            reader.close();
            return content;
        } catch (MalformedURLException e) {
            throw new ServiceException(e.getMessage());
        } catch (IOException e) {
            throw new ServiceException(e.getMessage());
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
"
"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
","    private String getRandomGUID(final boolean secure) {
        MessageDigest md5 = null;
        final StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        try {
            final long time = System.currentTimeMillis();
            final long rand;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(id);
            sbValueBeforeMD5.append(SEMI_COLON);
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(SEMI_COLON);
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            final byte[] array = md5.digest();
            final StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                final int bufferIndex = array[j] & SHIFT_SPACE;
                if (ZERO_TEST > bufferIndex) sb.append(CHAR_ZERO);
                sb.append(Integer.toHexString(bufferIndex));
            }
            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
"
"    public void loadFromFile() {
        if (filename == null) return;
        try {
            BufferedReader reader;
            try {
                File file = new File(filename);
                if (!file.exists()) return;
                reader = new BufferedReader(new FileReader(file));
            } catch (java.security.AccessControlException e) {
                URL url = new URL(filename);
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            String line;
            while (true) {
                line = reader.readLine();
                if (line == null) break;
                String name = line.substring(0, line.indexOf(""\t""));
                String rest1 = line.substring(line.indexOf(""\t"") + 1);
                String guiname = rest1.substring(0, rest1.indexOf(""\t""));
                String rest2 = rest1.substring(rest1.indexOf(""\t"") + 1);
                String type = rest2.substring(0, rest2.indexOf(""\t""));
                String value = rest2.substring(rest2.indexOf(""\t"") + 1);
                defineField(name, guiname, type);
                setField(name, value, true);
            }
            reader.close();
        } catch (IOException e) {
            throw new JGameError(""Error reading file '"" + filename + ""'."", false);
        }
    }
","    private static MyCookieData parseCookie(Cookie cookie) throws CookieException {
        String value = cookie.getValue();
        System.out.println(""original cookie: "" + value);
        value = value.replace(""%3A"", "":"");
        value = value.replace(""%40"", ""@"");
        System.out.println(""cookie after replacement: "" + value);
        String[] parts = value.split("":"");
        if (parts.length < 4) throw new CookieException(""only "" + parts.length + "" parts in the cookie! "" + value);
        String email = parts[0];
        String nickname = parts[1];
        boolean admin = Boolean.getBoolean(parts[2].toLowerCase());
        String hsh = parts[3];
        boolean valid_cookie = true;
        String cookie_secret = System.getProperty(""COOKIE_SECRET"");
        if (cookie_secret == """") throw new CookieException(""cookie secret is not set"");
        if (email.equals("""")) {
            System.out.println(""email is empty!"");
            nickname = """";
            admin = false;
        } else {
            try {
                MessageDigest sha = MessageDigest.getInstance(""SHA"");
                sha.update((email + nickname + admin + cookie_secret).getBytes());
                StringBuilder builder = new StringBuilder();
                for (byte b : sha.digest()) {
                    byte tmphigh = (byte) (b >> 4);
                    tmphigh = (byte) (tmphigh & 0xf);
                    builder.append(hextab.charAt(tmphigh));
                    byte tmplow = (byte) (b & 0xf);
                    builder.append(hextab.charAt(tmplow));
                }
                System.out.println();
                String vhsh = builder.toString();
                if (!vhsh.equals(hsh)) {
                    System.out.println(""hash not same!"");
                    System.out.println(""hash passed in: "" + hsh);
                    System.out.println(""hash generated: "" + vhsh);
                    valid_cookie = false;
                } else System.out.println(""cookie match!"");
            } catch (NoSuchAlgorithmException ex) {
            }
        }
        return new MyCookieData(email, admin, nickname, valid_cookie);
    }
"
"    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        jButton1.setEnabled(false);
        for (int i = 0; i < max; i++) {
            Card crd = WLP.getSelectedCard(WLP.jTable1.getSelectedRows()[i]);
            String s, s2;
            s = """";
            s2 = """";
            try {
                URL url = new URL(""http://www.m-w.com/dictionary/"" + crd.getWord());
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                String str;
                while ((str = in.readLine()) != null) {
                    s = s + str;
                }
                in.close();
            } catch (MalformedURLException e) {
            } catch (IOException e) {
            }
            Pattern pattern = Pattern.compile(""popWin\\('/cgi-bin/(.+?)'"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
            Matcher matcher = pattern.matcher(s);
            if (matcher.find()) {
                String newurl = ""http://m-w.com/cgi-bin/"" + matcher.group(1);
                try {
                    URL url2 = new URL(newurl);
                    BufferedReader in2 = new BufferedReader(new InputStreamReader(url2.openStream()));
                    String str;
                    while ((str = in2.readLine()) != null) {
                        s2 = s2 + str;
                    }
                    in2.close();
                } catch (MalformedURLException e) {
                } catch (IOException e) {
                }
                Pattern pattern2 = Pattern.compile(""<A HREF=\""http://(.+?)\"">Click here to listen with your default audio player"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
                Matcher matcher2 = pattern2.matcher(s2);
                if (matcher2.find()) {
                    getWave(""http://"" + matcher2.group(1), crd.getWord());
                }
                int val = jProgressBar1.getValue();
                val++;
                jProgressBar1.setValue(val);
                this.paintAll(this.getGraphics());
            }
        }
        jButton1.setEnabled(true);
    }
","    public static List<ServerInfo> getStartedServers() {
        List<ServerInfo> infos = new ArrayList<ServerInfo>();
        try {
            StringBuilder request = new StringBuilder();
            request.append(url).append(""/"").append(displayServlet);
            request.append(""?ingame=1"");
            URL objUrl = new URL(request.toString());
            URLConnection urlConnect = objUrl.openConnection();
            InputStream in = urlConnect.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            while (reader.ready()) {
                String name = reader.readLine();
                String ip = reader.readLine();
                int port = Integer.valueOf(reader.readLine());
                ServerInfo server = new ServerInfo(name, ip, port);
                server.nbPlayers = Integer.valueOf(reader.readLine());
                infos.add(server);
            }
            in.close();
            return infos;
        } catch (Exception e) {
            return infos;
        }
    }
"
"    static byte[] genDigest(String pad, byte[] passwd) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(DIGEST_ALGORITHM);
        digest.update(pad.getBytes());
        digest.update(passwd);
        return digest.digest();
    }
","    public static String readRss(String feed, int num) {
        InputStream stream = null;
        try {
            feed = appendParam(feed, ""num"", """" + num);
            System.out.println(""feed="" + feed);
            URL url = new URL(feed);
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", RSS_USER_AGENT);
            stream = connection.getInputStream();
            return CFileHelper.readInputStream(stream);
        } catch (Exception e) {
            throw new CException(e);
        } finally {
            CFileHelper.closeStream(stream);
        }
    }
"
"    public void initFromXml(final String xmlFileName) throws java.net.MalformedURLException, ConfigurationException, IOException {
        if (xmlInitialized) {
            return;
        }
        templates = null;
        MergeTemplateWriter.setTokenList(getTokenProvider().getKnownTokens());
        java.net.URL url = new FileFinder().getUrl(getTokenProvider().getClass(), xmlFileName);
        InputStreamReader xmlFileReader = new InputStreamReader(url.openStream());
        KnownTemplates temps = MergeTemplateWriter.importFromXML(xmlFileReader);
        xmlFileReader.close();
        KnownTemplates.setDefaultInstance(temps);
        setTemplates(temps);
        setInitialized(true);
    }
","    public static String calculatesMD5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest mdAlgorithm = MessageDigest.getInstance(""MD5"");
        mdAlgorithm.update(plainText.getBytes());
        byte[] digest = mdAlgorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
"
"    public void deploy(final File extension) {
        log.info(""Deploying new extension from {}"", extension.getPath());
        RequestContextHolder.setRequestContext(new RequestContext(SZoneConfig.getDefaultZoneName(), SZoneConfig.getAdminUserName(SZoneConfig.getDefaultZoneName()), new BaseSessionContext()));
        RequestContextHolder.getRequestContext().resolve();
        JarInputStream warIn;
        try {
            warIn = new JarInputStream(new FileInputStream(extension), true);
        } catch (IOException e) {
            log.warn(""Unable to open extension WAR at "" + extension.getPath(), e);
            return;
        }
        SAXReader reader = new SAXReader(false);
        reader.setIncludeExternalDTDDeclarations(false);
        String extensionPrefix = extension.getName().substring(0, extension.getName().lastIndexOf("".""));
        File extensionDir = new File(extensionBaseDir, extensionPrefix);
        extensionDir.mkdirs();
        File extensionWebDir = new File(this.extensionWebDir, extensionPrefix);
        extensionWebDir.mkdirs();
        try {
            for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) {
                File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName());
                if (entry.isDirectory()) {
                    log.debug(""Creating directory at {}"", inflated.getPath());
                    inflated.mkdirs();
                    continue;
                }
                inflated.getParentFile().mkdirs();
                FileOutputStream entryOut = new FileOutputStream(inflated);
                if (!entry.getName().endsWith(configurationFileExtension)) {
                    log.debug(""Inflating file resource to {}"", inflated.getPath());
                    IOUtils.copy(warIn, entryOut);
                    entryOut.close();
                    continue;
                }
                try {
                    final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true));
                    Attribute schema = document.getRootElement().attribute(schemaAttribute);
                    if (schema == null || StringUtils.isBlank(schema.getText())) {
                        log.debug(""Inflating XML with unrecognized schema to {}"", inflated.getPath());
                        continue;
                    }
                    if (schema.getText().contains(definitionsSchemaNamespace)) {
                        log.debug(""Inflating and registering definition from {}"", inflated.getPath());
                        document.getRootElement().add(new AbstractAttribute() {

                            private static final long serialVersionUID = -7880537136055718310L;

                            public QName getQName() {
                                return new QName(extensionAttr, document.getRootElement().getNamespace());
                            }

                            public String getValue() {
                                return extension.getName().substring(0, extension.getName().lastIndexOf("".""));
                            }
                        });
                        definitionModule.addDefinition(document, true);
                        continue;
                    }
                    if (schema.getText().contains(templateSchemaNamespace)) {
                        log.debug(""Inflating and registering template from {}"", inflated.getPath());
                        templateService.addTemplate(document, true, zoneModule.getDefaultZone());
                        continue;
                    }
                } catch (DocumentException e) {
                    log.warn(""Malformed XML file in extension war at "" + extension.getPath(), e);
                    return;
                }
            }
        } catch (IOException e) {
            log.warn(""Malformed extension war at "" + extension.getPath(), e);
            return;
        } finally {
            try {
                warIn.close();
            } catch (IOException e) {
                log.warn(""Unable to close extension war at "" + extension.getPath(), e);
                return;
            }
            RequestContextHolder.clear();
        }
        log.info(""Extension deployed successfully from {}"", extension.getPath());
    }
","    protected String getManualDownloadURL() {
        if (_newestVersionString.indexOf(""weekly"") > 0) {
            return ""http://www.cs.rice.edu/~javaplt/drjavarice/weekly/"";
        }
        final String DRJAVA_FILES_PAGE = ""http://sourceforge.net/project/showfiles.php?group_id=44253"";
        final String LINK_PREFIX = ""<a href=\""/project/showfiles.php?group_id=44253"";
        final String LINK_SUFFIX = ""\"">"";
        BufferedReader br = null;
        try {
            URL url = new URL(DRJAVA_FILES_PAGE);
            InputStream urls = url.openStream();
            InputStreamReader is = new InputStreamReader(urls);
            br = new BufferedReader(is);
            String line;
            int pos;
            while ((line = br.readLine()) != null) {
                if ((pos = line.indexOf(_newestVersionString)) >= 0) {
                    int prePos = line.indexOf(LINK_PREFIX);
                    if ((prePos >= 0) && (prePos < pos)) {
                        int suffixPos = line.indexOf(LINK_SUFFIX, prePos);
                        if ((suffixPos >= 0) && (suffixPos + LINK_SUFFIX.length() == pos)) {
                            String versionLink = edu.rice.cs.plt.text.TextUtil.xmlUnescape(line.substring(prePos + LINK_PREFIX.length(), suffixPos));
                            return DRJAVA_FILES_PAGE + versionLink;
                        }
                    }
                }
            }
            ;
        } catch (IOException e) {
            return DRJAVA_FILES_PAGE;
        } finally {
            try {
                if (br != null) br.close();
            } catch (IOException e) {
            }
        }
        return DRJAVA_FILES_PAGE;
    }
"
"    public static void putWithUserSettings(String from, String to, String renameTo, boolean binary, IProgressMonitor monitor) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, binary);
        synchedSet.add(ftpHolder);
        int ftpqueuesize = PrefPageOne.getIntValue(CONSTANTS.PREF_FTPQUEUE);
        if (synchedSet.size() >= ftpqueuesize) {
            JobHandler.aquireFTPLock();
            try {
                ftpClient = new FTPClient();
                ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
                ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
                ftpClient.connect();
                try {
                    Thread.sleep(1500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                synchronized (synchedSet) {
                    for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                        if (monitor != null && monitor.isCanceled()) {
                            JobHandler.releaseFTPLock();
                            ftpClient.quit();
                            return;
                        }
                        Thread.yield();
                        FTPHolder element = (FTPHolder) iter.next();
                        if (element.binary) {
                            ftpClient.setType(FTPTransferType.BINARY);
                        } else {
                            ftpClient.setType(FTPTransferType.ASCII);
                        }
                        ftpClient.put(element.from, element.to);
                        if (element.renameTo != null) {
                            try {
                                ftpClient.delete(element.renameTo);
                            } catch (Exception e) {
                            }
                            ftpClient.rename(element.to, element.renameTo);
                            log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);
                        }
                    }
                    synchedSet.clear();
                }
                JobHandler.releaseFTPLock();
                ftpClient.quit();
            } catch (UnknownHostException e) {
                e.printStackTrace();
            } catch (FTPException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    public static Image load(final InputStream input, String format, Point dimension) throws CoreException {
        MultiStatus status = new MultiStatus(GraphVizActivator.ID, 0, ""Errors occurred while running Graphviz"", null);
        File dotInput = null, dotOutput = null;
        ByteArrayOutputStream dotContents = new ByteArrayOutputStream();
        try {
            dotInput = File.createTempFile(TMP_FILE_PREFIX, DOT_EXTENSION);
            dotOutput = File.createTempFile(TMP_FILE_PREFIX, ""."" + format);
            dotOutput.delete();
            FileOutputStream tmpDotOutputStream = null;
            try {
                IOUtils.copy(input, dotContents);
                tmpDotOutputStream = new FileOutputStream(dotInput);
                IOUtils.copy(new ByteArrayInputStream(dotContents.toByteArray()), tmpDotOutputStream);
            } finally {
                IOUtils.closeQuietly(tmpDotOutputStream);
            }
            IStatus result = runDot(format, dimension, dotInput, dotOutput);
            status.add(result);
            status.add(logInput(dotContents));
            if (dotOutput.isFile()) {
                if (!result.isOK() && Platform.inDebugMode()) LogUtils.log(status);
                ImageLoader loader = new ImageLoader();
                ImageData[] imageData = loader.load(dotOutput.getAbsolutePath());
                return new Image(Display.getDefault(), imageData[0]);
            }
        } catch (SWTException e) {
            status.add(new Status(IStatus.ERROR, GraphVizActivator.ID, """", e));
        } catch (IOException e) {
            status.add(new Status(IStatus.ERROR, GraphVizActivator.ID, """", e));
        } finally {
            dotInput.delete();
            dotOutput.delete();
            IOUtils.closeQuietly(input);
        }
        throw new CoreException(status);
    }
"
"    protected InputStream makeRequestAndGetJSONData(String url) throws URISyntaxException, ClientProtocolException, IOException {
        DefaultHttpClient httpClient = new DefaultHttpClient();
        URI uri;
        InputStream data = null;
        uri = new URI(url);
        HttpGet method = new HttpGet(uri);
        HttpResponse response = httpClient.execute(method);
        data = response.getEntity().getContent();
        return data;
    }
","    public static String getMd5Hash(String text) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(text.getBytes());
            Formatter f = new Formatter(result);
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                f.format(""%02x"", new Object[] { new Byte(digest[i]) });
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
"
"    public void testSetRequestProperty() throws Exception {
        MockHTTPServer httpServer = new MockHTTPServer(""HTTP Server for User-Specified Request Property"", 2);
        httpServer.start();
        synchronized (bound) {
            if (!httpServer.started) {
                bound.wait(5000);
            }
        }
        HttpURLConnection urlConnection = (HttpURLConnection) new URL(""http://localhost:"" + httpServer.port()).openConnection();
        assertEquals(0, urlConnection.getRequestProperties().size());
        final String PROPERTY1 = ""Accept"";
        final String PROPERTY2 = ""Connection"";
        urlConnection.setRequestProperty(PROPERTY1, null);
        urlConnection.setRequestProperty(PROPERTY1, null);
        urlConnection.setRequestProperty(PROPERTY2, ""keep-alive"");
        assertEquals(2, urlConnection.getRequestProperties().size());
        assertNull(urlConnection.getRequestProperty(PROPERTY1));
        assertEquals(""keep-alive"", urlConnection.getRequestProperty(PROPERTY2));
        urlConnection.setRequestProperty(PROPERTY1, ""/"");
        urlConnection.setRequestProperty(PROPERTY2, null);
        assertEquals(""/"", urlConnection.getRequestProperty(PROPERTY1));
        assertNull(urlConnection.getRequestProperty(PROPERTY2));
    }
","    public String generateKey(String className, String methodName, String text, String meaning) {
        if (text == null) {
            return null;
        }
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""Error initializing MD5"", e);
        }
        try {
            md5.update(text.getBytes(""UTF-8""));
            if (meaning != null) {
                md5.update(meaning.getBytes(""UTF-8""));
            }
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(""UTF-8 unsupported"", e);
        }
        return StringUtils.toHexString(md5.digest());
    }
"
"    public static void executa(String arquivo, String filial, String ip) {
        String drive = arquivo.substring(0, 2);
        if (drive.indexOf("":"") == -1) drive = """";
        Properties p = Util.lerPropriedades(arquivo);
        String servidor = p.getProperty(""servidor"");
        String impressora = p.getProperty(""fila"");
        String arqRel = new String(drive + p.getProperty(""arquivo""));
        String copias = p.getProperty(""copias"");
        if (filial.equalsIgnoreCase(servidor)) {
            Socket s = null;
            int tentativas = 0;
            boolean conectado = false;
            while (!conectado) {
                try {
                    tentativas++;
                    System.out.println(""Tentando conectar "" + ip + "" ("" + tentativas + "")"");
                    s = new Socket(ip, 7000);
                    conectado = s.isConnected();
                } catch (ConnectException ce) {
                    System.err.println(ce.getMessage());
                    System.err.println(ce.getCause());
                } catch (UnknownHostException uhe) {
                    System.err.println(uhe.getMessage());
                } catch (IOException ioe) {
                    System.err.println(ioe.getMessage());
                }
            }
            FileInputStream in = null;
            BufferedOutputStream out = null;
            try {
                in = new FileInputStream(new File(arqRel));
                out = new BufferedOutputStream(new GZIPOutputStream(s.getOutputStream()));
            } catch (FileNotFoundException e3) {
                e3.printStackTrace();
            } catch (IOException e3) {
                e3.printStackTrace();
            }
            String arqtr = arqRel.substring(2);
            System.out.println(""Proximo arquivo: "" + arqRel + "" ->"" + arqtr);
            while (arqtr.length() < 30) arqtr += "" "";
            while (impressora.length() < 30) impressora += "" "";
            byte aux[] = new byte[30];
            byte cop[] = new byte[2];
            try {
                aux = arqtr.getBytes(""UTF8"");
                out.write(aux);
                aux = impressora.getBytes(""UTF8"");
                out.write(aux);
                cop = copias.getBytes(""UTF8"");
                out.write(cop);
                out.flush();
            } catch (UnsupportedEncodingException e2) {
                e2.printStackTrace();
            } catch (IOException e2) {
                e2.printStackTrace();
            }
            byte b[] = new byte[1024];
            int nBytes;
            try {
                while ((nBytes = in.read(b)) != -1) out.write(b, 0, nBytes);
                out.flush();
                out.close();
                in.close();
                s.close();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            System.out.println(""Arquivo "" + arqRel + "" foi transmitido. \n\n"");
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            SimpleDateFormat dfArq = new SimpleDateFormat(""yyyy-MM-dd"");
            SimpleDateFormat dfLog = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
            String arqLog = ""log"" + filial + dfArq.format(new Date()) + "".txt"";
            PrintWriter pw = null;
            try {
                pw = new PrintWriter(new FileWriter(arqLog, true));
            } catch (IOException e) {
                e.printStackTrace();
            }
            pw.println(""Arquivo:  "" + arquivo + ""  "" + dfLog.format(new Date()));
            pw.flush();
            pw.close();
            File f = new File(arquivo);
            while (!f.delete()) {
                System.out.println(""Erro apagando "" + arquivo);
            }
        }
    }
","    public void testDigest() {
        try {
            String myinfo = ""我的测试信息"";
            MessageDigest alga = MessageDigest.getInstance(""SHA-1"");
            alga.update(myinfo.getBytes());
            byte[] digesta = alga.digest();
            System.out.println(""本信息摘要是:"" + byte2hex(digesta));
            MessageDigest algb = MessageDigest.getInstance(""SHA-1"");
            algb.update(myinfo.getBytes());
            if (MessageDigest.isEqual(digesta, algb.digest())) {
                System.out.println(""信息检查正常"");
            } else {
                System.out.println(""摘要不相同"");
            }
        } catch (NoSuchAlgorithmException ex) {
            System.out.println(""非法摘要算法"");
        }
    }
"
"    public static synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        md = MessageDigest.getInstance(""SHA"");
        md.update(plaintext.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
","    @Override
    public synchronized void deletePersistenceEntityStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException {
        final Connection connection = this.getConnection();
        try {
            connection.setAutoCommit(false);
            String queryString = ""DELETE "" + this.getPersistenceEntityStatisticsSchemaAndTableName() + "" FROM "" + this.getPersistenceEntityStatisticsSchemaAndTableName() + "" INNER JOIN "" + this.getPersistenceEntityElementsSchemaAndTableName() + "" ON "" + this.getPersistenceEntityElementsSchemaAndTableName() + "".element_id =  "" + this.getPersistenceEntityStatisticsSchemaAndTableName() + "".element_id WHERE "";
            if (elementId != null) {
                queryString = queryString + "" elementId = ? AND "";
            }
            if (contextName != null) {
                queryString = queryString + "" context_name LIKE ? AND "";
            }
            if ((project != null)) {
                queryString = queryString + "" project LIKE ? AND "";
            }
            if ((name != null)) {
                queryString = queryString + "" name LIKE ? AND "";
            }
            if (dateFrom != null) {
                queryString = queryString + "" start_timestamp >= ? AND "";
            }
            if (dateTo != null) {
                queryString = queryString + "" start_timestamp <= ? AND "";
            }
            queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);
            final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);
            int indexCounter = 1;
            if (elementId != null) {
                preparedStatement.setLong(indexCounter, elementId.longValue());
                indexCounter = indexCounter + 1;
            }
            if (contextName != null) {
                preparedStatement.setString(indexCounter, contextName);
                indexCounter = indexCounter + 1;
            }
            if ((project != null)) {
                preparedStatement.setString(indexCounter, project);
                indexCounter = indexCounter + 1;
            }
            if ((name != null)) {
                preparedStatement.setString(indexCounter, name);
                indexCounter = indexCounter + 1;
            }
            if (dateFrom != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));
                indexCounter = indexCounter + 1;
            }
            if (dateTo != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));
                indexCounter = indexCounter + 1;
            }
            preparedStatement.executeUpdate();
            preparedStatement.close();
            connection.commit();
        } catch (final SQLException e) {
            try {
                connection.rollback();
            } catch (final SQLException ex) {
                JeeObserverServerContext.logger.log(Level.SEVERE, ""Transaction rollback error."", ex);
            }
            JeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());
            throw new DatabaseException(""Error deleting persistence entity statistics."", e);
        } finally {
            this.releaseConnection(connection);
        }
    }
"
"    public void saveProjectFile(File aFile) {
        SimpleDateFormat sdf = new SimpleDateFormat(""yyMMddHHmmss"");
        File destDir = new File(theProjectsDirectory, sdf.format(Calendar.getInstance().getTime()));
        if (destDir.mkdirs()) {
            File outFile = new File(destDir, ""project.xml"");
            try {
                FileChannel sourceChannel = new FileInputStream(aFile).getChannel();
                FileChannel destinationChannel = new FileOutputStream(outFile).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                aFile.delete();
            }
        }
    }
","    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
"
"    public static final void copyFile(File argSource, File argDestination) throws IOException {
        FileChannel srcChannel = new FileInputStream(argSource).getChannel();
        FileChannel dstChannel = new FileOutputStream(argDestination).getChannel();
        try {
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
","    void setURLString(String path, boolean forceLoad) {
        if (path != null) {
            if (this.url != null || inputStream != null) throw new IllegalArgumentException(Ding3dI18N.getString(""MediaContainer5""));
            try {
                URL url = new URL(path);
                InputStream stream;
                stream = url.openStream();
                stream.close();
            } catch (Exception e) {
                throw new SoundException(javax.media.ding3d.Ding3dI18N.getString(""MediaContainer0""));
            }
        }
        this.urlString = path;
        if (forceLoad) dispatchMessage();
    }
"
"    @Override
    protected void loadInternals(final File internDir, final ExecutionMonitor exec) throws IOException, CanceledExecutionException {
        List<String> taxa = new Vector<String>();
        String domain = m_domain.getStringValue();
        String id = """";
        if (domain.equalsIgnoreCase(""Eukaryota"")) id = ""eukaryota"";
        try {
            URL url = new URL(""http://www.ebi.ac.uk/genomes/"" + id + "".details.txt"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String link = """";
            String key = """";
            String name = """";
            int counter = 0;
            String line = """";
            while ((line = reader.readLine()) != null) {
                String[] st = line.split(""\t"");
                ena_details ena = new ena_details(st[0], st[1], st[2], st[3], st[4]);
                ENADataHolder.instance().put(ena.desc, ena);
                taxa.add(ena.desc);
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public void save(File f, AudioFileFormat.Type t) throws IOException {
        if (t.getExtension().equals(""raw"")) {
            IOUtils.copy(makeInputStream(), new FileOutputStream(f));
        } else {
            AudioSystem.write(makeStream(), t, f);
        }
    }
"
"    public static String encryptPassword(String password) {
        if (password == null) return null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""Algorithm not found"", e);
            return null;
        }
        digest.reset();
        digest.update(password.getBytes());
        return hexValue(digest.digest());
    }
","    public void testJTLM_publish100() throws Exception {
        EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema(""/JTLM/schemas/TLMComposite.xsd"", getClass(), m_compilerErrors);
        Assert.assertEquals(0, m_compilerErrors.getTotalCount());
        GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.DEFAULT_OPTIONS);
        AlignmentType[] alignments = new AlignmentType[] { AlignmentType.bitPacked, AlignmentType.byteAligned, AlignmentType.preCompress, AlignmentType.compress };
        for (AlignmentType alignment : alignments) {
            Transmogrifier encoder = new Transmogrifier();
            EXIDecoder decoder = new EXIDecoder(999);
            Scanner scanner;
            InputSource inputSource;
            encoder.setAlignmentType(alignment);
            decoder.setAlignmentType(alignment);
            encoder.setEXISchema(grammarCache);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            encoder.setOutputStream(baos);
            URL url = resolveSystemIdAsURL(""/JTLM/publish100.xml"");
            inputSource = new InputSource(url.toString());
            inputSource.setByteStream(url.openStream());
            byte[] bts;
            int n_events, n_texts;
            encoder.encode(inputSource);
            bts = baos.toByteArray();
            decoder.setEXISchema(grammarCache);
            decoder.setInputStream(new ByteArrayInputStream(bts));
            scanner = decoder.processHeader();
            ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>();
            EXIEvent exiEvent;
            n_events = 0;
            n_texts = 0;
            while ((exiEvent = scanner.nextEvent()) != null) {
                ++n_events;
                if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) {
                    if (n_texts % 100 == 0) {
                        final int n = n_texts / 100;
                        Assert.assertEquals(publish100_centennials[n], exiEvent.getCharacters().makeString());
                    }
                    ++n_texts;
                }
                exiEventList.add(exiEvent);
            }
            Assert.assertEquals(10610, n_events);
        }
    }
"
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public TestReport runImpl() throws Exception {
        String parser = XMLResourceDescriptor.getXMLParserClassName();
        DocumentFactory df = new SAXDocumentFactory(GenericDOMImplementation.getDOMImplementation(), parser);
        File f = (new File(testFileName));
        URL url = f.toURL();
        Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream());
        Element e = doc.getElementById(targetId);
        if (e == null) {
            DefaultTestReport report = new DefaultTestReport(this);
            report.setErrorCode(ERROR_GET_ELEMENT_BY_ID_FAILED);
            report.addDescriptionEntry(ENTRY_KEY_ID, targetId);
            report.setPassed(false);
            return report;
        }
        Document otherDocument = df.createDocument(null, rootTag, url.toString(), url.openStream());
        DocumentFragment docFrag = otherDocument.createDocumentFragment();
        try {
            docFrag.appendChild(doc.getDocumentElement());
        } catch (DOMException ex) {
            return reportSuccess();
        }
        DefaultTestReport report = new DefaultTestReport(this);
        report.setErrorCode(ERROR_EXCEPTION_NOT_THROWN);
        report.setPassed(false);
        return report;
    }
"
"    protected URLConnection openConnection(URL url) throws IOException {
        if (bundleEntry != null) return (new BundleURLConnection(url, bundleEntry));
        String bidString = url.getHost();
        if (bidString == null) {
            throw new IOException(NLS.bind(AdaptorMsg.URL_NO_BUNDLE_ID, url.toExternalForm()));
        }
        AbstractBundle bundle = null;
        long bundleID;
        try {
            bundleID = Long.parseLong(bidString);
        } catch (NumberFormatException nfe) {
            throw new MalformedURLException(NLS.bind(AdaptorMsg.URL_INVALID_BUNDLE_ID, bidString));
        }
        bundle = (AbstractBundle) context.getBundle(bundleID);
        if (!url.getAuthority().equals(SECURITY_AUTHORIZED)) {
            checkAdminPermission(bundle);
        }
        if (bundle == null) {
            throw new IOException(NLS.bind(AdaptorMsg.URL_NO_BUNDLE_FOUND, url.toExternalForm()));
        }
        return (new BundleURLConnection(url, findBundleEntry(url, bundle)));
    }
","    public static String MD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException ex) {
            return """";
        }
    }
"
"    private static void copy(File source, File dest) throws FileNotFoundException, IOException {
        FileInputStream input = new FileInputStream(source);
        FileOutputStream output = new FileOutputStream(dest);
        System.out.println(""Copying "" + source + "" to "" + dest);
        IOUtils.copy(input, output);
        output.close();
        input.close();
        dest.setLastModified(source.lastModified());
    }
","    public static void readDefault() {
        ClassLoader l = Skeleton.class.getClassLoader();
        URL url = l.getResource(""weka/core/parser/JFlex/skeleton.default"");
        if (url == null) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
        try {
            InputStreamReader reader = new InputStreamReader(url.openStream());
            readSkel(new BufferedReader(reader));
        } catch (IOException e) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
    }
"
"    public static Bitmap loadPhotoBitmap(final String imageUrl, final String type) {
        InputStream imageStream = null;
        try {
            HttpGet httpRequest = new HttpGet(new URL(imageUrl).toURI());
            HttpResponse response = (HttpResponse) new DefaultHttpClient().execute(httpRequest);
            httpRequest = null;
            BufferedHttpEntity bufHttpEntity = new BufferedHttpEntity(response.getEntity());
            response = null;
            imageStream = bufHttpEntity.getContent();
            bufHttpEntity = null;
            if (imageStream != null) {
                final BitmapFactory.Options options = new BitmapFactory.Options();
                if (type.equals(""image"")) {
                    options.inSampleSize = 2;
                }
                return BitmapFactory.decodeStream(imageStream, null, options);
            } else {
            }
        } catch (IOException e) {
        } catch (URISyntaxException e) {
        } finally {
            if (imageStream != null) closeStream(imageStream);
        }
        return null;
    }
","    public static String urlPost(Map<String, String> paraMap, String urlStr) throws IOException {
        String strParam = """";
        for (Map.Entry<String, String> entry : paraMap.entrySet()) {
            strParam = strParam + (entry.getKey() + ""="" + entry.getValue()) + ""&"";
        }
        URL url = new URL(urlStr);
        URLConnection connection = url.openConnection();
        connection.setDoOutput(true);
        OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), ""utf-8"");
        out.write(strParam);
        out.flush();
        out.close();
        String sCurrentLine;
        String sTotalString;
        sCurrentLine = """";
        sTotalString = """";
        InputStream l_urlStream;
        l_urlStream = connection.getInputStream();
        BufferedReader l_reader = new BufferedReader(new InputStreamReader(l_urlStream));
        while ((sCurrentLine = l_reader.readLine()) != null) {
            sTotalString += sCurrentLine + ""\r\n"";
        }
        System.out.println(sTotalString);
        return sTotalString;
    }
"
"    public static String submitURLRequest(String url) throws HttpException, IOException, URISyntaxException {
        HttpClient httpclient = new DefaultHttpClient();
        InputStream stream = null;
        user_agents = new LinkedList<String>();
        user_agents.add(""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        String response_text = """";
        URI uri = new URI(url);
        HttpGet post = new HttpGet(uri);
        int MAX = user_agents.size() - 1;
        int index = (int) Math.round(((double) Math.random() * (MAX)));
        String agent = user_agents.get(index);
        httpclient.getParams().setParameter(CoreProtocolPNames.USER_AGENT, agent);
        httpclient.getParams().setParameter(""User-Agent"", agent);
        httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.ACCEPT_NONE);
        HttpResponse response = httpclient.execute(post);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            stream = entity.getContent();
            response_text = convertStreamToString(stream);
        }
        httpclient.getConnectionManager().shutdown();
        if (stream != null) {
            stream.close();
        }
        return response_text;
    }
","    public void loadFromFile() {
        if (filename == null) return;
        try {
            BufferedReader reader;
            try {
                File file = new File(filename);
                if (!file.exists()) return;
                reader = new BufferedReader(new FileReader(file));
            } catch (java.security.AccessControlException e) {
                URL url = new URL(filename);
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            String line;
            while (true) {
                line = reader.readLine();
                if (line == null) break;
                String name = line.substring(0, line.indexOf(""\t""));
                String rest1 = line.substring(line.indexOf(""\t"") + 1);
                String guiname = rest1.substring(0, rest1.indexOf(""\t""));
                String rest2 = rest1.substring(rest1.indexOf(""\t"") + 1);
                String type = rest2.substring(0, rest2.indexOf(""\t""));
                String value = rest2.substring(rest2.indexOf(""\t"") + 1);
                defineField(name, guiname, type);
                setField(name, value, true);
            }
            reader.close();
        } catch (IOException e) {
            throw new JGameError(""Error reading file '"" + filename + ""'."", false);
        }
    }
"
"    protected static String getURLandWriteToDisk(String url, Model retModel) throws MalformedURLException, IOException {
        String path = null;
        URL ontURL = new URL(url);
        InputStream ins = ontURL.openStream();
        InputStreamReader bufRead;
        OutputStreamWriter bufWrite;
        int offset = 0, read = 0;
        initModelHash();
        if (System.getProperty(""user.dir"") != null) {
            String delimiter;
            path = System.getProperty(""user.dir"");
            if (path.contains(""/"")) {
                delimiter = ""/"";
            } else {
                delimiter = ""\\"";
            }
            char c = path.charAt(path.length() - 1);
            if (c == '/' || c == '\\') {
                path = path.substring(0, path.length() - 2);
            }
            path = path.substring(0, path.lastIndexOf(delimiter) + 1);
            path = path.concat(""ontologies"" + delimiter + ""downloaded"");
            (new File(path)).mkdir();
            path = path.concat(delimiter);
            path = createFullPath(url, path);
            bufWrite = new OutputStreamWriter(new FileOutputStream(path));
            bufRead = new InputStreamReader(ins);
            read = bufRead.read();
            while (read != -1) {
                bufWrite.write(read);
                offset += read;
                read = bufRead.read();
            }
            bufRead.close();
            bufWrite.close();
            ins.close();
            FileInputStream fs = new FileInputStream(path);
            retModel.read(fs, """");
        }
        return path;
    }
","    public static void main(String[] args) {
        try {
            File fichierXSD = new File(""D:/Users/Balley/données/gml/commune.xsd"");
            URL urlFichierXSD = fichierXSD.toURI().toURL();
            InputStream isXSD = urlFichierXSD.openStream();
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = dbFactory.newDocumentBuilder();
            Document documentXSD = (builder.parse(isXSD));
            ChargeurGMLSchema chargeur = new ChargeurGMLSchema(documentXSD);
            SchemaConceptuelJeu sc = chargeur.gmlSchema2schemaConceptuel(documentXSD);
            System.out.println(sc.getFeatureTypes().size());
            for (int i = 0; i < sc.getFeatureTypes().size(); i++) {
                System.out.println(sc.getFeatureTypes().get(i).getTypeName());
                for (int j = 0; j < sc.getFeatureTypes().get(i).getFeatureAttributes().size(); j++) {
                    System.out.println(""    "" + sc.getFeatureTypes().get(i).getFeatureAttributes().get(j).getMemberName() + "" : "" + sc.getFeatureTypes().get(i).getFeatureAttributes().get(j).getValueType());
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        }
    }
"
"    public void readConfig(String urlString) throws Exception {
        try {
            URL url = new URL(urlString);
            InputStream in = url.openStream();
            XmlDoc xml = new Parser().parse(new InputSource(in), true, true);
            Verifier v = new Verifier(InputOutput.create(SCHEMA), null);
            v.verify(xml.getDocument());
            this.config = xml.getDocument();
        } catch (Exception e) {
            log(""Can't read "" + urlString + "": "" + e.toString());
            throw e;
        }
        initParms();
        log(""Got parameters: \n"" + paramsInfo());
        initMessages();
        log(""Got messages: \n"" + messagesInfo());
        checkMessageId();
    }
","    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
"
"    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        PrintWriter out = response.getWriter();
        response.setContentType(""text/html"");
        HttpSession session = request.getSession();
        String session_id = session.getId();
        File session_fileDir = new File(destinationDir + java.io.File.separator + session_id);
        session_fileDir.mkdir();
        DiskFileItemFactory fileItemFactory = new DiskFileItemFactory();
        fileItemFactory.setSizeThreshold(1 * 1024 * 1024);
        fileItemFactory.setRepository(tmpDir);
        ServletFileUpload uploadHandler = new ServletFileUpload(fileItemFactory);
        String pathToFile = new String();
        try {
            List items = uploadHandler.parseRequest(request);
            Iterator itr = items.iterator();
            while (itr.hasNext()) {
                FileItem item = (FileItem) itr.next();
                if (item.isFormField()) {
                    ;
                } else {
                    pathToFile = getServletContext().getRealPath(""/"") + ""files"" + java.io.File.separator + session_id;
                    File file = new File(pathToFile + java.io.File.separator + item.getName());
                    item.write(file);
                    getContents(file, pathToFile);
                    ComtorStandAlone.setMode(Mode.CLOUD);
                    Comtor.start(pathToFile);
                }
            }
            try {
                File reportFile = new File(pathToFile + java.io.File.separator + ""comtorReport.txt"");
                String reportURLString = AWSServices.storeReportS3(reportFile, session_id).toString();
                if (reportURLString.startsWith(""https"")) reportURLString = reportURLString.replaceFirst(""https"", ""http"");
                String requestURL = request.getRequestURL().toString();
                String url = requestURL.substring(0, requestURL.lastIndexOf(""/""));
                out.println(""<html><head/><body>"");
                out.println(""<a href=\"""" + url + ""\"">Return to home</a>&nbsp;&nbsp;"");
                out.println(""<a href=\"""" + reportURLString + ""\"">Report URL</a><br/><hr/>"");
                Scanner scan = new Scanner(reportFile);
                out.println(""<pre>"");
                while (scan.hasNextLine()) out.println(scan.nextLine());
                out.println(""</pre><hr/>"");
                out.println(""<a href=\"""" + url + ""\"">Return to home</a>&nbsp;&nbsp;"");
                out.println(""<a href=\"""" + reportURLString + ""\"">Report URL</a><br/>"");
                out.println(""</body></html>"");
            } catch (Exception ex) {
                System.err.println(ex);
            }
        } catch (FileUploadException ex) {
            System.err.println(""Error encountered while parsing the request"" + ex);
        } catch (Exception ex) {
            System.err.println(""Error encountered while uploading file"" + ex);
        }
    }
","    @Override
    public HostRecord addressForHost(String domainName) throws Exception {
        String fullUrl = requestUrlStub + domainName;
        URL url = new URL(fullUrl);
        HttpURLConnection connection = null;
        connection = null;
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setDoOutput(true);
        connection.setReadTimeout(10000);
        connection.connect();
        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        HostRecord result = new HostRecord(domainName);
        byte parts[] = new byte[4];
        while ((inputLine = in.readLine()) != null) {
            String pat1 = ""<span class='orange'>"";
            String pat2 = ""</span>"";
            int index1 = inputLine.indexOf(pat1);
            int index2 = inputLine.indexOf(pat2);
            if ((index1 > 0) && (index2 > 0)) {
                String ipStr = inputLine.substring(index1 + pat1.length(), index2);
                String[] s = ipStr.split(""\\."");
                for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i]);
            }
        }
        IPAddress ipAddress = new IPAddress(parts);
        result.addIpAddress(ipAddress);
        in.close();
        return result;
    }
"
"    public Program updateProgramPath(int id, String sourcePath) throws AdaptationException {
        Program program = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""UPDATE Programs SET "" + ""sourcePath = '"" + sourcePath + ""' "" + ""WHERE id = "" + id;
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * from Programs WHERE id = "" + id;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to update program failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            program = getProgram(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in updateProgramPath"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return program;
    }
","    public void fetchFile(String ID) {
        String url = ""http://www.nal.usda.gov/cgi-bin/agricola-ind?bib="" + ID + ""&conf=010000++++++++++++++&screen=MA"";
        System.out.println(url);
        try {
            PrintWriter pw = new PrintWriter(new FileWriter(""MARC"" + ID + "".txt""));
            if (!id.contains(""MARC"" + ID + "".txt"")) {
                id.add(""MARC"" + ID + "".txt"");
            }
            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));
            in.readLine();
            String inputLine, stx = """";
            StringBuffer sb = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith(""<TR><TD><B>"")) {
                    String sts = (inputLine.substring(inputLine.indexOf(""B>"") + 2, inputLine.indexOf(""</"")));
                    int i = 0;
                    try {
                        i = Integer.parseInt(sts);
                    } catch (NumberFormatException nfe) {
                    }
                    if (i > 0) {
                        stx = stx + ""\n"" + sts + "" - "";
                    } else {
                        stx += sts;
                    }
                }
                if (!(inputLine.startsWith(""<"") || inputLine.startsWith("" <"") || inputLine.startsWith("">""))) {
                    String tx = inputLine.trim();
                    stx += tx;
                }
            }
            pw.println(stx);
            pw.close();
        } catch (Exception e) {
            System.out.println(""Couldn't open stream"");
            System.out.println(e);
        }
    }
"
"    public String stringOfUrl(String addr) throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        URL url = new URL(addr);
        IOUtils.copy(url.openStream(), output);
        return output.toString();
    }
","    protected InputStream callApiMethod(String apiUrl, String xmlContent, String contentType, String method, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.setRequestMethod(method);
            request.setDoOutput(true);
            if (contentType != null) {
                request.setRequestProperty(""Content-Type"", contentType);
            }
            if (xmlContent != null) {
                PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));
                out.print(xmlContent);
                out.flush();
                out.close();
            }
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
"
"    private void insert() throws SQLException, NamingException {
        Logger logger = getLogger();
        if (logger.isDebugEnabled()) {
            logger.debug(""enter - "" + getClass().getName() + "".insert()"");
        }
        try {
            if (logger.isInfoEnabled()) {
                logger.info(""insert(): Create new sequencer record for "" + getName());
            }
            Connection conn = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;
            try {
                InitialContext ctx = new InitialContext();
                DataSource ds = (DataSource) ctx.lookup(dataSourceName);
                conn = ds.getConnection();
                conn.setReadOnly(false);
                stmt = conn.prepareStatement(INSERT_SEQ);
                stmt.setString(INS_NAME, getName());
                stmt.setLong(INS_NEXT_KEY, defaultInterval * 2);
                stmt.setLong(INS_INTERVAL, defaultInterval);
                stmt.setLong(INS_UPDATE, System.currentTimeMillis());
                try {
                    if (stmt.executeUpdate() != 1) {
                        nextId = -1L;
                        logger.warn(""insert(): Failed to create sequencer entry for "" + getName() + "" (no error message)"");
                    } else if (logger.isInfoEnabled()) {
                        nextId = defaultInterval;
                        nextSeed = defaultInterval * 2;
                        interval = defaultInterval;
                        logger.info(""insert(): First ID will be "" + nextId);
                    }
                } catch (SQLException e) {
                    logger.warn(""insert(): Error inserting row into database, possible concurrency issue: "" + e.getMessage());
                    if (logger.isDebugEnabled()) {
                        e.printStackTrace();
                    }
                    nextId = -1L;
                }
                if (!conn.getAutoCommit()) {
                    conn.commit();
                }
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ignore) {
                    }
                }
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ignore) {
                    }
                }
                if (conn != null) {
                    if (!conn.getAutoCommit()) {
                        try {
                            conn.rollback();
                        } catch (SQLException ignore) {
                        }
                    }
                    try {
                        conn.close();
                    } catch (SQLException ignore) {
                    }
                }
            }
        } finally {
            if (logger.isDebugEnabled()) {
                logger.debug(""exit - "" + getClass().getName() + "".insert()"");
            }
        }
    }
","    protected ProductionTabsProperties(final PlayerID playerId, final List<Rule> mRules, final String mapDir) {
        m_rules = mRules;
        final ResourceLoader loader = ResourceLoader.getMapResourceLoader(mapDir);
        String propertyFile = PROPERTY_FILE + ""."" + playerId.getName() + "".properties"";
        URL url = loader.getResource(propertyFile);
        if (url == null) {
            propertyFile = PROPERTY_FILE + "".properties"";
            url = loader.getResource(propertyFile);
            if (url == null) {
            } else {
                try {
                    m_properties.load(url.openStream());
                } catch (final IOException e) {
                    System.out.println(""Error reading "" + propertyFile + e);
                }
            }
        }
    }
"
"    public static boolean checkEncode(String origin, byte[] mDigest, String algorithm) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(algorithm);
        md.update(origin.getBytes());
        if (MessageDigest.isEqual(mDigest, md.digest())) {
            return true;
        } else {
            return false;
        }
    }
","    public String output(final ComponentParameter compParameter) {
        InputStream inputStream;
        try {
            final URL url = new URL(""http://xml.weather.yahoo.com/forecastrss?p="" + getPagelet().getOptionProperty(""_weather_code"") + ""&u=c"");
            inputStream = url.openStream();
        } catch (final IOException e) {
            return e.getMessage();
        }
        final StringBuilder sb = new StringBuilder();
        new AbstractXmlDocument(inputStream) {

            @Override
            protected void init() throws Exception {
                final Element root = getRoot();
                final Namespace ns = root.getNamespaceForPrefix(""yweather"");
                final Element channel = root.element(""channel"");
                final String link = channel.elementText(""link"");
                final Element item = channel.element(""item"");
                Element ele = item.element(QName.get(""condition"", ns));
                if (ele == null) {
                    sb.append(""ERROR"");
                    return;
                }
                final String imgPath = getPagelet().getColumnBean().getPortalBean().getCssResourceHomePath(compParameter) + ""/images/yahoo/"";
                String text, image;
                Date date = new SimpleDateFormat(YahooWeatherUtils.RFC822_MASKS[1], Locale.US).parse(ele.attributeValue(""date""));
                final int temp = Integer.parseInt(ele.attributeValue(""temp""));
                int code = Integer.valueOf(ele.attributeValue(""code"")).intValue();
                if (code == 3200) {
                    text = YahooWeatherUtils.yahooTexts[YahooWeatherUtils.yahooTexts.length - 1];
                    image = imgPath + ""3200.gif"";
                } else {
                    text = YahooWeatherUtils.yahooTexts[code];
                    image = imgPath + code + "".gif"";
                }
                sb.append(""<div style=\""line-height: normal;\""><a target=\""_blank\"" href=\"""").append(link).append(""\""><img src=\"""");
                sb.append(image).append(""\"" /></a>"");
                sb.append(YahooWeatherUtils.formatHour(date)).append("" - "");
                sb.append(text).append("" - "").append(temp).append(""℃"").append(""<br>"");
                final Iterator<?> it = item.elementIterator(QName.get(""forecast"", ns));
                while (it.hasNext()) {
                    ele = (Element) it.next();
                    date = new SimpleDateFormat(""dd MMM yyyy"", Locale.US).parse(ele.attributeValue(""date""));
                    final int low = Integer.parseInt(ele.attributeValue(""low""));
                    final int high = Integer.parseInt(ele.attributeValue(""high""));
                    code = Integer.valueOf(ele.attributeValue(""code"")).intValue();
                    if (code == 3200) {
                        text = YahooWeatherUtils.yahooTexts[YahooWeatherUtils.yahooTexts.length - 1];
                        image = imgPath + ""3200.gif"";
                    } else {
                        text = YahooWeatherUtils.yahooTexts[code];
                        image = imgPath + code + "".gif"";
                    }
                    sb.append(YahooWeatherUtils.formatWeek(date)).append("" ( "");
                    sb.append(text).append("". "");
                    sb.append(low).append(""℃~"").append(high).append(""℃"");
                    sb.append("" )<br>"");
                }
                sb.append(""</div>"");
            }
        };
        return sb.toString();
    }
"
"    @Override
    public void run() {
        try {
            long pos = begin;
            byte[] buf = new byte[1024];
            URLConnection cn = url.openConnection();
            Utils.setHeader(cn);
            cn.setRequestProperty(""Range"", ""bytes="" + begin + ""-"" + end);
            BufferedInputStream bis = new BufferedInputStream(cn.getInputStream());
            int len;
            while ((len = bis.read(buf)) > 0) {
                synchronized (file) {
                    file.seek(pos);
                    file.write(buf, 0, len);
                }
                pos += len;
                Statics.getInstance().addComleted(len);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        latch.countDown();
    }
","    @Override
    public void copy(final String fileName) throws FileIOException {
        final long savedCurrentPositionInFile = currentPositionInFile;
        if (opened) {
            closeImpl();
        }
        final FileInputStream fis;
        try {
            fis = new FileInputStream(file);
        } catch (FileNotFoundException exception) {
            throw HELPER_FILE_UTIL.fileIOException(FAILED_OPEN + file, file, exception);
        }
        final File destinationFile = new File(fileName);
        final FileOutputStream fos;
        try {
            fos = new FileOutputStream(destinationFile);
        } catch (FileNotFoundException exception) {
            throw HELPER_FILE_UTIL.fileIOException(FAILED_OPEN + destinationFile, destinationFile, exception);
        }
        try {
            final byte[] buf = new byte[1024];
            int readLength = 0;
            while ((readLength = fis.read(buf)) != -1) {
                fos.write(buf, 0, readLength);
            }
        } catch (IOException exception) {
            throw HELPER_FILE_UTIL.fileIOException(""failed copy from "" + file + "" to "" + destinationFile, null, exception);
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (fos != null) {
                    fos.close();
                }
            } catch (Exception exception) {
            }
        }
        if (opened) {
            openImpl();
            seek(savedCurrentPositionInFile);
        }
    }
"
"    public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException {
        File in = null;
        if (input.equals(STDIN)) {
            try {
                in = File.createTempFile(""tmp"", "".jp2"");
                input = in.getAbsolutePath();
                in.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), in);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage bi = extractImpl.process(input, params);
        if (bi != null) {
            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);
            if (params.getTransform() != null) bi = params.getTransform().run(bi);
            w.write(bi, os);
        }
        if (in != null) in.delete();
    }
","    public void add(Channel channel) throws Exception {
        String sqlStr = null;
        DBOperation dbo = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {
            sqlStr = ""insert into t_ip_channel (id,name,description,ascii_name,channel_path,site_id,type,data_url,template_id,use_status,order_no,style,creator,create_date,refresh_flag,page_num) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"";
            dbo = createDBOperation();
            connection = dbo.getConnection();
            connection.setAutoCommit(false);
            String[] path = new String[1];
            path[0] = channel.getPath();
            selfDefineAdd(path, channel, connection, preparedStatement);
            preparedStatement = connection.prepareStatement(sqlStr);
            preparedStatement.setInt(1, channel.getChannelID());
            preparedStatement.setString(2, channel.getName());
            preparedStatement.setString(3, channel.getDescription());
            preparedStatement.setString(4, channel.getAsciiName());
            preparedStatement.setString(5, channel.getPath());
            preparedStatement.setInt(6, channel.getSiteId());
            preparedStatement.setString(7, channel.getChannelType());
            preparedStatement.setString(8, channel.getDataUrl());
            if (channel.getTemplateId() == null || channel.getTemplateId().trim().equals("""")) preparedStatement.setNull(9, Types.INTEGER); else preparedStatement.setInt(9, Integer.parseInt(channel.getTemplateId()));
            preparedStatement.setString(10, channel.getUseStatus());
            preparedStatement.setInt(11, channel.getOrderNo());
            preparedStatement.setString(12, channel.getStyle());
            preparedStatement.setInt(13, channel.getCreator());
            preparedStatement.setTimestamp(14, (Timestamp) channel.getCreateDate());
            preparedStatement.setString(15, channel.getRefPath());
            preparedStatement.setInt(16, channel.getPageNum());
            preparedStatement.executeUpdate();
            connection.commit();
            int operateTypeID = Const.OPERATE_TYPE_ID;
            int resID = channel.getChannelID() + Const.CHANNEL_TYPE_RES;
            String resName = channel.getName();
            int resTypeID = Const.RES_TYPE_ID;
            String remark = """";
            AuthorityManager am = new AuthorityManager();
            am.createExtResource(Integer.toString(resID), resName, resTypeID, operateTypeID, remark);
        } catch (SQLException ex) {
            connection.rollback();
            log.error(""���Ƶ��ʱSql�쳣��ִ����䣺"" + sqlStr);
            throw ex;
        } finally {
            close(resultSet, null, preparedStatement, connection, dbo);
        }
    }
"
"    public RFC1345List(URL url) {
        if (url == null) return;
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(new GZIPInputStream(url.openStream())));
            final String linePattern = "" XX???????      HHHH    X"";
            String line;
            mnemos = new HashMap();
            nextline: while ((line = br.readLine()) != null) {
                if (line.length() < 9) continue nextline;
                if (line.charAt(7) == ' ' || line.charAt(8) != ' ') {
                    line = line.substring(0, 8) + ""        "" + line.substring(8);
                }
                if (line.length() < linePattern.length()) continue nextline;
                for (int i = 0; i < linePattern.length(); i++) {
                    char c = line.charAt(i);
                    switch(linePattern.charAt(i)) {
                        case ' ':
                            if (c != ' ') continue nextline;
                            break;
                        case 'X':
                            if (c == ' ') continue nextline;
                            break;
                        case '?':
                            break;
                        case 'H':
                            if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) ; else continue nextline;
                            break;
                        default:
                            throw new RuntimeException(""Pattern broken!"");
                    }
                }
                char c = (char) Integer.parseInt(line.substring(16, 20), 16);
                String mnemo = line.substring(1, 16).trim();
                if (mnemo.length() < 2) throw new RuntimeException();
                mnemos.put(mnemo, new Character(c));
            }
            br.close();
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
","    private void readCard() {
        try {
            final String urlString = createURLStringExistRESTGetXQuery(""//scheda[cata = \"""" + cata + ""\""]"");
            InputStream inputStream = new URL(urlString).openStream();
            uiSchedaXml.read(inputStream);
            inputStream.close();
        } catch (MalformedURLException e) {
            System.out.println(e);
        } catch (IOException e) {
            System.out.println(e);
        }
    }
"
"    protected static boolean checkVersion(String address) {
        Scanner scanner = null;
        try {
            URL url = new URL(address);
            InputStream iS = url.openStream();
            scanner = new Scanner(iS);
            if (scanner == null && DEBUG) System.out.println(""SCANNER NULL"");
            String firstLine = scanner.nextLine();
            double latestVersion = Double.valueOf(firstLine.trim());
            double thisVersion = JCards.VERSION;
            if (thisVersion >= latestVersion) {
                JCards.latestVersion = true;
            } else {
                displaySimpleAlert(null, JCards.VERSION_PREFIX + latestVersion + "" is available online!\n"" + ""Look under the file menu for a link to the download site."");
            }
        } catch (Exception e) {
            if (VERBOSE || DEBUG) {
                System.out.println(""Can't decide latest version"");
                e.printStackTrace();
            }
            return false;
        }
        return true;
    }
","    public static int deleteSysPosInsert() {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_SYS_POSITION_INSERT "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }
"
"    public AbstractASiCSignatureService(InputStream documentInputStream, DigestAlgo digestAlgo, RevocationDataService revocationDataService, TimeStampService timeStampService, String claimedRole, IdentityDTO identity, byte[] photo, TemporaryDataStorage temporaryDataStorage, OutputStream documentOutputStream) throws IOException {
        super(digestAlgo);
        this.temporaryDataStorage = temporaryDataStorage;
        this.documentOutputStream = documentOutputStream;
        this.tmpFile = File.createTempFile(""eid-dss-"", "".asice"");
        FileOutputStream fileOutputStream;
        fileOutputStream = new FileOutputStream(this.tmpFile);
        IOUtils.copy(documentInputStream, fileOutputStream);
        addSignatureFacet(new ASiCSignatureFacet(this.tmpFile, digestAlgo));
        XAdESSignatureFacet xadesSignatureFacet = new XAdESSignatureFacet(getSignatureDigestAlgorithm());
        xadesSignatureFacet.setRole(claimedRole);
        xadesSignatureFacet.setXadesNamespacePrefix(""xades"");
        addSignatureFacet(xadesSignatureFacet);
        addSignatureFacet(new XAdESXLSignatureFacet(timeStampService, revocationDataService, getSignatureDigestAlgorithm()));
        addSignatureFacet(new KeyInfoSignatureFacet(true, false, false));
        if (null != identity) {
            IdentitySignatureFacet identitySignatureFacet = new IdentitySignatureFacet(identity, photo, getSignatureDigestAlgorithm());
            addSignatureFacet(identitySignatureFacet);
        }
    }
","    public static String[] parsePLS(String strURL, Context c) {
        URL url;
        URLConnection urlConn = null;
        String TAG = ""parsePLS"";
        Vector<String> radio = new Vector<String>();
        final String filetoken = ""file"";
        final String SPLITTER = ""="";
        try {
            url = new URL(strURL);
            urlConn = url.openConnection();
            Log.d(TAG, ""Got data"");
        } catch (IOException ioe) {
            Log.e(TAG, ""Could not connect to "" + strURL);
        }
        try {
            DataInputStream in = new DataInputStream(urlConn.getInputStream());
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                String temp = strLine.toLowerCase();
                Log.d(TAG, strLine);
                if (temp.startsWith(filetoken)) {
                    String[] s = Pattern.compile(SPLITTER).split(temp);
                    radio.add(s[1]);
                    Log.d(TAG, ""Found audio "" + s[1]);
                }
            }
            br.close();
            in.close();
        } catch (Exception e) {
            Log.e(TAG, ""Trouble reading file: "" + e.getMessage());
        }
        String[] t = new String[0];
        String[] r = null;
        if (radio.size() != 0) {
            r = (String[]) radio.toArray(t);
            Log.d(TAG, ""Found total: "" + String.valueOf(r.length));
        }
        return r;
    }
"
"    private void updateUser(AddEditUserForm addform, HttpServletRequest request) throws Exception {
        Session hbsession = HibernateUtil.currentSession();
        try {
            Transaction tx = hbsession.beginTransaction();
            NvUsers user = (NvUsers) hbsession.load(NvUsers.class, addform.getLogin());
            if (!addform.getPassword().equalsIgnoreCase("""")) {
                MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
                md.update(addform.getPassword().getBytes(""UTF-8""));
                byte[] pd = md.digest();
                StringBuffer app = new StringBuffer();
                for (int i = 0; i < pd.length; i++) {
                    String s2 = Integer.toHexString(pd[i] & 0xFF);
                    app.append((s2.length() == 1) ? ""0"" + s2 : s2);
                }
                user.setPassword(app.toString());
            }
            ActionErrors errors = new ActionErrors();
            HashMap cAttrs = addform.getCustomAttrs();
            Query q1 = hbsession.createQuery(""from org.nodevision.portal.hibernate.om.NvCustomAttrs as a"");
            Iterator attrs = q1.iterate();
            HashMap attrInfos = new HashMap();
            while (attrs.hasNext()) {
                NvCustomAttrs element = (NvCustomAttrs) attrs.next();
                attrInfos.put(element.getAttrName(), element.getAttrType());
                NvCustomValuesId id = new NvCustomValuesId();
                id.setNvUsers(user);
                NvCustomValues value = new NvCustomValues();
                id.setNvCustomAttrs(element);
                value.setId(id);
                if (element.getAttrType().equalsIgnoreCase(""String"")) {
                    ByteArrayOutputStream bout = new ByteArrayOutputStream();
                    ObjectOutputStream serializer = new ObjectOutputStream(bout);
                    serializer.writeObject(cAttrs.get(element.getAttrName()).toString());
                    value.setAttrValue(Hibernate.createBlob(bout.toByteArray()));
                } else if (element.getAttrType().equalsIgnoreCase(""Boolean"")) {
                    Boolean valueBoolean = Boolean.FALSE;
                    if (cAttrs.get(element.getAttrName()) != null) {
                        valueBoolean = Boolean.TRUE;
                    }
                    ByteArrayOutputStream bout = new ByteArrayOutputStream();
                    ObjectOutputStream serializer = new ObjectOutputStream(bout);
                    serializer.writeObject(valueBoolean);
                    value.setAttrValue(Hibernate.createBlob(bout.toByteArray()));
                } else if (element.getAttrType().equalsIgnoreCase(""Date"")) {
                    Date date = new Date(0);
                    if (!cAttrs.get(element.getAttrName()).toString().equalsIgnoreCase("""")) {
                        String bdate = cAttrs.get(element.getAttrName()).toString();
                        SimpleDateFormat df = new SimpleDateFormat(""dd-MM-yyyy"");
                        date = df.parse(bdate);
                    }
                    ByteArrayOutputStream bout = new ByteArrayOutputStream();
                    ObjectOutputStream serializer = new ObjectOutputStream(bout);
                    serializer.writeObject(date);
                    value.setAttrValue(Hibernate.createBlob(bout.toByteArray()));
                }
                hbsession.saveOrUpdate(value);
                hbsession.flush();
            }
            String bdate = addform.getUser_bdate();
            SimpleDateFormat df = new SimpleDateFormat(""dd-MM-yyyy"");
            Date parsedDate = df.parse(bdate);
            user.setTimezone(addform.getTimezone());
            user.setLocale(addform.getLocale());
            user.setBdate(new BigDecimal(parsedDate.getTime()));
            user.setGender(addform.getUser_gender());
            user.setEmployer(addform.getEmployer());
            user.setDepartment(addform.getDepartment());
            user.setJobtitle(addform.getJobtitle());
            user.setNamePrefix(addform.getName_prefix());
            user.setNameGiven(addform.getName_given());
            user.setNameFamily(addform.getName_famliy());
            user.setNameMiddle(addform.getName_middle());
            user.setNameSuffix(addform.getName_suffix());
            user.setHomeName(addform.getHome_name());
            user.setHomeStreet(addform.getHome_street());
            user.setHomeStateprov(addform.getHome_stateprov());
            user.setHomePostalcode(addform.getHome_postalcode().equalsIgnoreCase("""") ? new Integer(0) : new Integer(addform.getHome_postalcode()));
            user.setHomeOrganization(addform.getHome_organization_name());
            user.setHomeCountry(addform.getHome_country());
            user.setHomeCity(addform.getHome_city());
            user.setHomePhoneIntcode((addform.getHome_phone_intcode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_phone_intcode()));
            user.setHomePhoneLoccode((addform.getHome_phone_loccode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_phone_loccode()));
            user.setHomePhoneNumber((addform.getHome_phone_number().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_phone_number()));
            user.setHomePhoneExt((addform.getHome_phone_ext().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_phone_ext()));
            user.setHomePhoneComment(addform.getHome_phone_commment());
            user.setHomeFaxIntcode((addform.getHome_fax_intcode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_fax_intcode()));
            user.setHomeFaxLoccode((addform.getHome_fax_loccode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_fax_loccode()));
            user.setHomeFaxNumber((addform.getHome_fax_number().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_fax_number()));
            user.setHomeFaxExt((addform.getHome_fax_ext().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_fax_ext()));
            user.setHomeFaxComment(addform.getHome_fax_commment());
            user.setHomeMobileIntcode((addform.getHome_mobile_intcode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_mobile_intcode()));
            user.setHomeMobileLoccode((addform.getHome_mobile_loccode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_mobile_loccode()));
            user.setHomeMobileNumber((addform.getHome_mobile_number().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_mobile_number()));
            user.setHomeMobileExt((addform.getHome_mobile_ext().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_mobile_ext()));
            user.setHomeMobileComment(addform.getHome_mobile_commment());
            user.setHomePagerIntcode((addform.getHome_pager_intcode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_pager_intcode()));
            user.setHomePagerLoccode((addform.getHome_pager_loccode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_pager_loccode()));
            user.setHomePagerNumber((addform.getHome_pager_number().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_pager_number()));
            user.setHomePagerExt((addform.getHome_pager_ext().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getHome_pager_ext()));
            user.setHomePagerComment(addform.getHome_pager_commment());
            user.setHomeUri(addform.getHome_uri());
            user.setHomeEmail(addform.getHome_email());
            user.setBusinessName(addform.getBusiness_name());
            user.setBusinessStreet(addform.getBusiness_street());
            user.setBusinessStateprov(addform.getBusiness_stateprov());
            user.setBusinessPostalcode((addform.getBusiness_postalcode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_postalcode()));
            user.setBusinessOrganization(addform.getBusiness_organization_name());
            user.setBusinessCountry(addform.getBusiness_country());
            user.setBusinessCity(addform.getBusiness_city());
            user.setBusinessPhoneIntcode((addform.getBusiness_phone_intcode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_phone_intcode()));
            user.setBusinessPhoneLoccode((addform.getBusiness_phone_loccode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_phone_loccode()));
            user.setBusinessPhoneNumber((addform.getBusiness_phone_number().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_phone_number()));
            user.setBusinessPhoneExt((addform.getBusiness_phone_ext().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_phone_ext()));
            user.setBusinessPhoneComment(addform.getBusiness_phone_commment());
            user.setBusinessFaxIntcode((addform.getBusiness_fax_intcode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_fax_intcode()));
            user.setBusinessFaxLoccode((addform.getBusiness_fax_loccode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_fax_loccode()));
            user.setBusinessFaxNumber((addform.getBusiness_fax_number().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_fax_number()));
            user.setBusinessFaxExt((addform.getBusiness_fax_ext().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_fax_ext()));
            user.setBusinessFaxComment(addform.getBusiness_fax_commment());
            user.setBusinessMobileIntcode((addform.getBusiness_mobile_intcode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_mobile_intcode()));
            user.setBusinessMobileLoccode((addform.getBusiness_mobile_loccode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_mobile_loccode()));
            user.setBusinessMobileNumber((addform.getBusiness_mobile_number().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_mobile_number()));
            user.setBusinessMobileExt((addform.getBusiness_mobile_ext().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_mobile_ext()));
            user.setBusinessMobileComment(addform.getBusiness_mobile_commment());
            user.setBusinessPagerIntcode((addform.getBusiness_pager_intcode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_pager_intcode()));
            user.setBusinessPagerLoccode((addform.getBusiness_pager_loccode().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_pager_loccode()));
            user.setBusinessPagerNumber((addform.getBusiness_pager_number().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_pager_number()));
            user.setBusinessPagerExt((addform.getBusiness_pager_ext().equalsIgnoreCase("""")) ? new Integer(0) : Integer.valueOf(addform.getBusiness_pager_ext()));
            user.setBusinessPagerComment(addform.getBusiness_pager_commment());
            user.setBusinessUri(addform.getBusiness_uri());
            user.setBusinessEmail(addform.getBusiness_email());
            String hqlDelete = ""delete org.nodevision.portal.hibernate.om.NvUserRoles where login = :login"";
            int deletedEntities = hbsession.createQuery(hqlDelete).setString(""login"", user.getLogin()).executeUpdate();
            String[] selectedGroups = addform.getSelectedGroups();
            Set newGroups = new HashSet();
            for (int i = 0; i < selectedGroups.length; i++) {
                NvUserRolesId userroles = new NvUserRolesId();
                userroles.setNvUsers(user);
                userroles.setNvRoles((NvRoles) hbsession.load(NvRoles.class, selectedGroups[i]));
                NvUserRoles newRole = new NvUserRoles();
                newRole.setId(userroles);
                newGroups.add(newRole);
            }
            user.setSetOfNvUserRoles(newGroups);
            hbsession.update(user);
            hbsession.flush();
            if (!hbsession.connection().getAutoCommit()) {
                tx.commit();
            }
        } finally {
            HibernateUtil.closeSession();
        }
    }
","    private String clientLogin(AuthInfo authInfo) throws AuthoricationRequiredException {
        logger.fine(""clientLogin."");
        try {
            String url = ""https://www.google.com/accounts/ClientLogin"";
            HttpPost httpPost = new HttpPost(url);
            ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();
            params.add(new BasicNameValuePair(""accountType"", ""HOSTED_OR_GOOGLE""));
            params.add(new BasicNameValuePair(""Email"", authInfo.getEmail()));
            params.add(new BasicNameValuePair(""Passwd"", new String(authInfo.getPassword())));
            params.add(new BasicNameValuePair(""service"", ""ah""));
            params.add(new BasicNameValuePair(""source"", ""client.kotan-server.appspot.com""));
            httpPost.setEntity(new UrlEncodedFormEntity(params, ""UTF-8""));
            HttpResponse response = clientManager.httpClient.execute(httpPost);
            HttpEntity entity = response.getEntity();
            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                entity.consumeContent();
                throw new AuthoricationRequiredException(EntityUtils.toString(entity));
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent()));
            while (true) {
                String line = reader.readLine();
                if (line == null) break;
                if (line.startsWith(""Auth="")) {
                    return line.substring(""Auth="".length());
                }
            }
            reader.close();
            throw new AuthoricationRequiredException(""Login failure."");
        } catch (IOException e) {
            throw new AuthoricationRequiredException(e);
        }
    }
"
"    @Override
    public void onLoadingEnded() {
        if (m_frame != null) {
            try {
                String urltext = getDocument().getDocumentURI();
                URL url = new URL(urltext);
                InputStreamReader isr = new InputStreamReader(url.openStream());
                BufferedReader in = new BufferedReader(isr);
                String inputLine;
                urltext = null;
                url = null;
                m_content.clear();
                while ((inputLine = in.readLine()) != null) {
                    m_content.add(inputLine);
                }
                in.close();
                isr = null;
                in = null;
                inputLine = null;
                Action action = parseHtml();
                if (action.value() == Action.ACTION_BROWSER_LOADING_DONE && action.toString().equals(Action.COMMAND_CARD_PREVIEW)) {
                    FileUtils.copyURLToFile(new URL(getCardImageURL(m_card.MID)), new File(m_card.getImagePath()));
                    fireActionEvent(MainWindow.class, action.value(), action.toString());
                }
                action = null;
            } catch (Exception ex) {
                Dialog.ErrorBox(m_frame, ex.getStackTrace());
            }
        }
        m_loading = false;
    }
","    public String move(Integer param) {
        LOG.debug(""move "" + param);
        StringBuffer ret = new StringBuffer();
        try {
            URL url = new URL(""http://"" + host + ""/decoder_control.cgi?command="" + param + ""&user="" + user + ""&pwd="" + password);
            URLConnection con = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                ret.append(inputLine);
            }
            in.close();
        } catch (Exception e) {
            logException(e);
            connect(host, user, password);
        }
        return ret.toString();
    }
"
"    private void loadDefaultDrivers() {
        final URL url = _app.getResources().getDefaultDriversUrl();
        try {
            InputStreamReader isr = new InputStreamReader(url.openStream());
            try {
                _cache.load(isr);
            } finally {
                isr.close();
            }
        } catch (Exception ex) {
            final Logger logger = _app.getLogger();
            logger.showMessage(Logger.ILogTypes.ERROR, ""Error loading default driver file: "" + url != null ? url.toExternalForm() : """");
            logger.showMessage(Logger.ILogTypes.ERROR, ex);
        }
    }
","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash;
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
"
"    public void deletePortletName(PortletName portletNameBean) {
        DatabaseAdapter dbDyn = null;
        PreparedStatement ps = null;
        try {
            dbDyn = DatabaseAdapter.getInstance();
            if (portletNameBean.getPortletId() == null) throw new IllegalArgumentException(""portletNameId is null"");
            String sql = ""delete from  WM_PORTAL_PORTLET_NAME "" + ""where  ID_SITE_CTX_TYPE=?"";
            ps = dbDyn.prepareStatement(sql);
            RsetTools.setLong(ps, 1, portletNameBean.getPortletId());
            int i1 = ps.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of deleted records - "" + i1);
            dbDyn.commit();
        } catch (Exception e) {
            try {
                if (dbDyn != null) dbDyn.rollback();
            } catch (Exception e001) {
            }
            String es = ""Error delete portlet name"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
","    public TestReport runImpl() throws Exception {
        DocumentFactory df = new SAXDocumentFactory(GenericDOMImplementation.getDOMImplementation(), parserClassName);
        File f = (new File(testFileName));
        URL url = f.toURL();
        Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream());
        File ser1 = File.createTempFile(""doc1"", ""ser"");
        File ser2 = File.createTempFile(""doc2"", ""ser"");
        try {
            ObjectOutputStream oos;
            oos = new ObjectOutputStream(new FileOutputStream(ser1));
            oos.writeObject(doc);
            oos.close();
            ObjectInputStream ois;
            ois = new ObjectInputStream(new FileInputStream(ser1));
            doc = (Document) ois.readObject();
            ois.close();
            oos = new ObjectOutputStream(new FileOutputStream(ser2));
            oos.writeObject(doc);
            oos.close();
        } catch (IOException e) {
            DefaultTestReport report = new DefaultTestReport(this);
            report.setErrorCode(""io.error"");
            report.addDescriptionEntry(""message"", e.getClass().getName() + "": "" + e.getMessage());
            report.addDescriptionEntry(""file.name"", testFileName);
            report.setPassed(false);
            return report;
        }
        InputStream is1 = new FileInputStream(ser1);
        InputStream is2 = new FileInputStream(ser2);
        for (; ; ) {
            int i1 = is1.read();
            int i2 = is2.read();
            if (i1 == -1 && i2 == -1) {
                return reportSuccess();
            }
            if (i1 != i2) {
                DefaultTestReport report = new DefaultTestReport(this);
                report.setErrorCode(""difference.found"");
                report.addDescriptionEntry(""file.name"", testFileName);
                report.setPassed(false);
                return report;
            }
        }
    }
"
"    protected String getPostRequestContent(String urlText, String postParam) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        String line = null;
        try {
            urlcon.setRequestMethod(""POST"");
            urlcon.setUseCaches(false);
            urlcon.setDoOutput(true);
            PrintStream ps = new PrintStream(urlcon.getOutputStream());
            ps.print(postParam);
            ps.close();
            urlcon.connect();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
            line = reader.readLine();
            reader.close();
        } finally {
            urlcon.disconnect();
        }
        return line;
    }
","    private void download(String fileName, HttpServletResponse response) throws IOException {
        TelnetInputStream ftpIn = ftpClient_sun.get(fileName);
        response.setHeader(""Content-disposition"", ""attachment;filename="" + URLEncoder.encode(fileName, ""UTF-8""));
        OutputStream out = null;
        try {
            out = response.getOutputStream();
            IOUtils.copy(ftpIn, out);
        } finally {
            if (ftpIn != null) {
                ftpIn.close();
            }
        }
    }
"
"    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println(""Usage: HashCalculator <Algorithm> <Input>"");
            System.out.println(""The preferred algorithm is SHA."");
        } else {
            MessageDigest md;
            try {
                md = MessageDigest.getInstance(args[0]);
                md.update(args[1].getBytes());
                System.out.print(""Hashed value of "" + args[1] + "" is: "");
                System.out.println((new BASE64Encoder()).encode(md.digest()));
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        destinationChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        sourceChannel.close();
        destinationChannel.close();
    }
"
"    public JarClassLoader(ClassLoader parent) {
        super(parent);
        initLogger();
        hmClass = new HashMap<String, Class<?>>();
        lstJarFile = new ArrayList<JarFileInfo>();
        hsDeleteOnExit = new HashSet<File>();
        String sUrlTopJar = null;
        pd = getClass().getProtectionDomain();
        CodeSource cs = pd.getCodeSource();
        URL urlTopJar = cs.getLocation();
        String protocol = urlTopJar.getProtocol();
        JarFileInfo jarFileInfo = null;
        if (""http"".equals(protocol) || ""https"".equals(protocol)) {
            try {
                urlTopJar = new URL(""jar:"" + urlTopJar + ""!/"");
                JarURLConnection jarCon = (JarURLConnection) urlTopJar.openConnection();
                JarFile jarFile = jarCon.getJarFile();
                jarFileInfo = new JarFileInfo(jarFile, jarFile.getName(), null, null);
                logInfo(LogArea.JAR, ""Loading from top JAR: '%s' PROTOCOL: '%s'"", urlTopJar, protocol);
            } catch (Exception e) {
                logError(LogArea.JAR, ""Failure to load HTTP JAR: %s %s"", urlTopJar, e.toString());
                return;
            }
        }
        if (""file"".equals(protocol)) {
            try {
                sUrlTopJar = URLDecoder.decode(urlTopJar.getFile(), ""UTF-8"");
            } catch (UnsupportedEncodingException e) {
                logError(LogArea.JAR, ""Failure to decode URL: %s %s"", urlTopJar, e.toString());
                return;
            }
            File fileJar = new File(sUrlTopJar);
            if (fileJar.isDirectory()) {
                logInfo(LogArea.JAR, ""Loading from exploded directory: %s"", sUrlTopJar);
                return;
            }
            try {
                jarFileInfo = new JarFileInfo(new JarFile(fileJar), fileJar.getName(), null, null);
                logInfo(LogArea.JAR, ""Loading from top JAR: '%s' PROTOCOL: '%s'"", sUrlTopJar, protocol);
            } catch (IOException e) {
                logError(LogArea.JAR, ""Not a JAR: %s %s"", sUrlTopJar, e.toString());
                return;
            }
        }
        try {
            if (jarFileInfo == null) {
                throw new IOException(String.format(""Unknown protocol %s"", protocol));
            }
            loadJar(jarFileInfo);
        } catch (IOException e) {
            logError(LogArea.JAR, ""Not valid URL: %s %s"", urlTopJar, e.toString());
            return;
        }
        checkShading();
        Runtime.getRuntime().addShutdownHook(new Thread() {

            public void run() {
                shutdown();
            }
        });
    }
","    protected static void copyFile(File from, File to) throws IOException {
        if (!from.isFile() || !to.isFile()) {
            throw new IOException(""Both parameters must be files. from is "" + from.isFile() + "", to is "" + to.isFile());
        }
        FileChannel in = (new FileInputStream(from)).getChannel();
        FileChannel out = (new FileOutputStream(to)).getChannel();
        in.transferTo(0, from.length(), out);
        in.close();
        out.close();
    }
"
